// Copyright (c) 2023 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=d807c7566ce3085243e9e7ea279fee7241acfc5f$
//

#ifndef HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_RENDER_PROCESS_HANDLER_CAPI_H_
#define HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_RENDER_PROCESS_HANDLER_CAPI_H_
#pragma once

#include "include/capi/honey_base_capi.h"
#include "include/capi/honey_browser_capi.h"
#include "include/capi/honey_dom_capi.h"
#include "include/capi/honey_frame_capi.h"
#include "include/capi/honey_load_handler_capi.h"
#include "include/capi/honey_process_message_capi.h"
#include "include/capi/honey_v8_capi.h"
#include "include/capi/honey_values_capi.h"

#ifdef __cplusplus
extern "C" {
#endif

///
/// Structure used to implement render process callbacks. The functions of this
/// structure will be called on the render process main thread (TID_RENDERER)
/// unless otherwise indicated.
///
typedef struct _honey_render_process_handler_t {
  ///
  /// Base structure.
  ///
  honey_base_ref_counted_t base;

  ///
  /// Called after WebKit has been initialized.
  ///
  void(HONEYCOMB_CALLBACK* on_web_kit_initialized)(
      struct _honey_render_process_handler_t* self);

  ///
  /// Called after a browser has been created. When browsing cross-origin a new
  /// browser will be created before the old browser with the same identifier is
  /// destroyed. |extra_info| is an optional read-only value originating from
  /// honey_browser_host_t::honey_browser_host_create_browser(),
  /// honey_browser_host_t::honey_browser_host_create_browser_sync(),
  /// honey_life_span_handler_t::on_before_popup() or
  /// honey_browser_view_t::honey_browser_view_create().
  ///
  void(HONEYCOMB_CALLBACK* on_browser_created)(
      struct _honey_render_process_handler_t* self,
      struct _honey_browser_t* browser,
      struct _honey_dictionary_value_t* extra_info);

  ///
  /// Called before a browser is destroyed.
  ///
  void(HONEYCOMB_CALLBACK* on_browser_destroyed)(
      struct _honey_render_process_handler_t* self,
      struct _honey_browser_t* browser);

  ///
  /// Return the handler for browser load status events.
  ///
  struct _honey_load_handler_t*(HONEYCOMB_CALLBACK* get_load_handler)(
      struct _honey_render_process_handler_t* self);

  ///
  /// Called immediately after the V8 context for a frame has been created. To
  /// retrieve the JavaScript 'window' object use the
  /// honey_v8context_t::get_global() function. V8 handles can only be accessed
  /// from the thread on which they are created. A task runner for posting tasks
  /// on the associated thread can be retrieved via the
  /// honey_v8context_t::get_task_runner() function.
  ///
  void(HONEYCOMB_CALLBACK* on_context_created)(
      struct _honey_render_process_handler_t* self,
      struct _honey_browser_t* browser,
      struct _honey_frame_t* frame,
      struct _honey_v8context_t* context);

  ///
  /// Called immediately before the V8 context for a frame is released. No
  /// references to the context should be kept after this function is called.
  ///
  void(HONEYCOMB_CALLBACK* on_context_released)(
      struct _honey_render_process_handler_t* self,
      struct _honey_browser_t* browser,
      struct _honey_frame_t* frame,
      struct _honey_v8context_t* context);

  ///
  /// Called for global uncaught exceptions in a frame. Execution of this
  /// callback is disabled by default. To enable set
  /// honey_settings_t.uncaught_exception_stack_size > 0.
  ///
  void(HONEYCOMB_CALLBACK* on_uncaught_exception)(
      struct _honey_render_process_handler_t* self,
      struct _honey_browser_t* browser,
      struct _honey_frame_t* frame,
      struct _honey_v8context_t* context,
      struct _honey_v8exception_t* exception,
      struct _honey_v8stack_trace_t* stackTrace);

  ///
  /// Called when a new node in the the browser gets focus. The |node| value may
  /// be NULL if no specific node has gained focus. The node object passed to
  /// this function represents a snapshot of the DOM at the time this function
  /// is executed. DOM objects are only valid for the scope of this function. Do
  /// not keep references to or attempt to access any DOM objects outside the
  /// scope of this function.
  ///
  void(HONEYCOMB_CALLBACK* on_focused_node_changed)(
      struct _honey_render_process_handler_t* self,
      struct _honey_browser_t* browser,
      struct _honey_frame_t* frame,
      struct _honey_domnode_t* node);

  ///
  /// Called when a new message is received from a different process. Return
  /// true (1) if the message was handled or false (0) otherwise. It is safe to
  /// keep a reference to |message| outside of this callback.
  ///
  int(HONEYCOMB_CALLBACK* on_process_message_received)(
      struct _honey_render_process_handler_t* self,
      struct _honey_browser_t* browser,
      struct _honey_frame_t* frame,
      honey_process_id_t source_process,
      struct _honey_process_message_t* message);
} honey_render_process_handler_t;

#ifdef __cplusplus
}
#endif

#endif  // HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_RENDER_PROCESS_HANDLER_CAPI_H_
