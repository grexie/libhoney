// Copyright (c) 2023 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=d082d724164cb0b1da12d49b080c599934f08b9d$
//

#ifndef HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_ZIP_READER_CAPI_H_
#define HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_ZIP_READER_CAPI_H_
#pragma once

#include "include/capi/honey_base_capi.h"
#include "include/capi/honey_stream_capi.h"

#ifdef __cplusplus
extern "C" {
#endif

///
/// Structure that supports the reading of zip archives via the zlib unzip API.
/// The functions of this structure should only be called on the thread that
/// creates the object.
///
typedef struct _honey_zip_reader_t {
  ///
  /// Base structure.
  ///
  honey_base_ref_counted_t base;

  ///
  /// Moves the cursor to the first file in the archive. Returns true (1) if the
  /// cursor position was set successfully.
  ///
  int(HONEYCOMB_CALLBACK* move_to_first_file)(struct _honey_zip_reader_t* self);

  ///
  /// Moves the cursor to the next file in the archive. Returns true (1) if the
  /// cursor position was set successfully.
  ///
  int(HONEYCOMB_CALLBACK* move_to_next_file)(struct _honey_zip_reader_t* self);

  ///
  /// Moves the cursor to the specified file in the archive. If |caseSensitive|
  /// is true (1) then the search will be case sensitive. Returns true (1) if
  /// the cursor position was set successfully.
  ///
  int(HONEYCOMB_CALLBACK* move_to_file)(struct _honey_zip_reader_t* self,
                                  const honey_string_t* fileName,
                                  int caseSensitive);

  ///
  /// Closes the archive. This should be called directly to ensure that cleanup
  /// occurs on the correct thread.
  ///
  int(HONEYCOMB_CALLBACK* close)(struct _honey_zip_reader_t* self);

  ///
  /// Returns the name of the file.
  ///
  // The resulting string must be freed by calling honey_string_userfree_free().
  honey_string_userfree_t(HONEYCOMB_CALLBACK* get_file_name)(
      struct _honey_zip_reader_t* self);

  ///
  /// Returns the uncompressed size of the file.
  ///
  int64_t(HONEYCOMB_CALLBACK* get_file_size)(struct _honey_zip_reader_t* self);

  ///
  /// Returns the last modified timestamp for the file.
  ///
  honey_basetime_t(HONEYCOMB_CALLBACK* get_file_last_modified)(
      struct _honey_zip_reader_t* self);

  ///
  /// Opens the file for reading of uncompressed data. A read password may
  /// optionally be specified.
  ///
  int(HONEYCOMB_CALLBACK* open_file)(struct _honey_zip_reader_t* self,
                               const honey_string_t* password);

  ///
  /// Closes the file.
  ///
  int(HONEYCOMB_CALLBACK* close_file)(struct _honey_zip_reader_t* self);

  ///
  /// Read uncompressed file contents into the specified buffer. Returns < 0 if
  /// an error occurred, 0 if at the end of file, or the number of bytes read.
  ///
  int(HONEYCOMB_CALLBACK* read_file)(struct _honey_zip_reader_t* self,
                               void* buffer,
                               size_t bufferSize);

  ///
  /// Returns the current offset in the uncompressed file contents.
  ///
  int64_t(HONEYCOMB_CALLBACK* tell)(struct _honey_zip_reader_t* self);

  ///
  /// Returns true (1) if at end of the file contents.
  ///
  int(HONEYCOMB_CALLBACK* eof)(struct _honey_zip_reader_t* self);
} honey_zip_reader_t;

///
/// Create a new honey_zip_reader_t object. The returned object's functions can
/// only be called from the thread that created the object.
///
HONEYCOMB_EXPORT honey_zip_reader_t* honey_zip_reader_create(
    struct _honey_stream_reader_t* stream);

#ifdef __cplusplus
}
#endif

#endif  // HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_ZIP_READER_CAPI_H_
