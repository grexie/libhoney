// Copyright (c) 2023 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=f72e94f6bd63b6ea623c4d3170b5ad4333c136d6$
//

#ifndef HONEYCOMB_INCLUDE_CAPI_VIEWS_HONEYCOMB_BROWSER_VIEW_CAPI_H_
#define HONEYCOMB_INCLUDE_CAPI_VIEWS_HONEYCOMB_BROWSER_VIEW_CAPI_H_
#pragma once

#include "include/capi/honey_browser_capi.h"
#include "include/capi/views/honey_browser_view_delegate_capi.h"
#include "include/capi/views/honey_view_capi.h"

#ifdef __cplusplus
extern "C" {
#endif

///
/// A View hosting a honey_browser_t instance. Methods must be called on the
/// browser process UI thread unless otherwise indicated.
///
typedef struct _honey_browser_view_t {
  ///
  /// Base structure.
  ///
  honey_view_t base;

  ///
  /// Returns the honey_browser_t hosted by this BrowserView. Will return NULL if
  /// the browser has not yet been created or has already been destroyed.
  ///
  struct _honey_browser_t*(HONEYCOMB_CALLBACK* get_browser)(
      struct _honey_browser_view_t* self);

  ///
  /// Returns the Chrome toolbar associated with this BrowserView. Only
  /// supported when using the Chrome runtime. The honey_browser_view_delegate_t::
  /// get_chrome_toolbar_type() function must return a value other than
  /// HONEYCOMB_CTT_NONE and the toolbar will not be available until after this
  /// BrowserView is added to a honey_window_t and
  /// honey_view_delegate_t::on_window_changed() has been called.
  ///
  struct _honey_view_t*(HONEYCOMB_CALLBACK* get_chrome_toolbar)(
      struct _honey_browser_view_t* self);

  ///
  /// Sets whether accelerators registered with honey_window_t::SetAccelerator are
  /// triggered before or after the event is sent to the honey_browser_t. If
  /// |prefer_accelerators| is true (1) then the matching accelerator will be
  /// triggered immediately and the event will not be sent to the honey_browser_t.
  /// If |prefer_accelerators| is false (0) then the matching accelerator will
  /// only be triggered if the event is not handled by web content or by
  /// honey_keyboard_handler_t. The default value is false (0).
  ///
  void(HONEYCOMB_CALLBACK* set_prefer_accelerators)(struct _honey_browser_view_t* self,
                                              int prefer_accelerators);
} honey_browser_view_t;

///
/// Create a new BrowserView. The underlying honey_browser_t will not be created
/// until this view is added to the views hierarchy. The optional |extra_info|
/// parameter provides an opportunity to specify extra information specific to
/// the created browser that will be passed to
/// honey_render_process_handler_t::on_browser_created() in the render process.
///
HONEYCOMB_EXPORT honey_browser_view_t* honey_browser_view_create(
    struct _honey_client_t* client,
    const honey_string_t* url,
    const struct _honey_browser_settings_t* settings,
    struct _honey_dictionary_value_t* extra_info,
    struct _honey_request_context_t* request_context,
    struct _honey_browser_view_delegate_t* delegate);

///
/// Returns the BrowserView associated with |browser|.
///
HONEYCOMB_EXPORT honey_browser_view_t* honey_browser_view_get_for_browser(
    struct _honey_browser_t* browser);

#ifdef __cplusplus
}
#endif

#endif  // HONEYCOMB_INCLUDE_CAPI_VIEWS_HONEYCOMB_BROWSER_VIEW_CAPI_H_
