// Copyright (c) 2023 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=eb9dcb574252483dfab12834af93ba14138d4089$
//

#ifndef HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_CLIENT_CAPI_H_
#define HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_CLIENT_CAPI_H_
#pragma once

#include "include/capi/honey_audio_handler_capi.h"
#include "include/capi/honey_base_capi.h"
#include "include/capi/honey_command_handler_capi.h"
#include "include/capi/honey_context_menu_handler_capi.h"
#include "include/capi/honey_dialog_handler_capi.h"
#include "include/capi/honey_display_handler_capi.h"
#include "include/capi/honey_download_handler_capi.h"
#include "include/capi/honey_drag_handler_capi.h"
#include "include/capi/honey_find_handler_capi.h"
#include "include/capi/honey_focus_handler_capi.h"
#include "include/capi/honey_frame_handler_capi.h"
#include "include/capi/honey_jsdialog_handler_capi.h"
#include "include/capi/honey_keyboard_handler_capi.h"
#include "include/capi/honey_life_span_handler_capi.h"
#include "include/capi/honey_load_handler_capi.h"
#include "include/capi/honey_permission_handler_capi.h"
#include "include/capi/honey_print_handler_capi.h"
#include "include/capi/honey_process_message_capi.h"
#include "include/capi/honey_render_handler_capi.h"
#include "include/capi/honey_request_handler_capi.h"

#ifdef __cplusplus
extern "C" {
#endif

///
/// Implement this structure to provide handler implementations.
///
typedef struct _honey_client_t {
  ///
  /// Base structure.
  ///
  honey_base_ref_counted_t base;

  ///
  /// Return the handler for audio rendering events.
  ///
  struct _honey_audio_handler_t*(HONEYCOMB_CALLBACK* get_audio_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for commands. If no handler is provided the default
  /// implementation will be used.
  ///
  struct _honey_command_handler_t*(HONEYCOMB_CALLBACK* get_command_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for context menus. If no handler is provided the
  /// default implementation will be used.
  ///
  struct _honey_context_menu_handler_t*(HONEYCOMB_CALLBACK* get_context_menu_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for dialogs. If no handler is provided the default
  /// implementation will be used.
  ///
  struct _honey_dialog_handler_t*(HONEYCOMB_CALLBACK* get_dialog_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for browser display state events.
  ///
  struct _honey_display_handler_t*(HONEYCOMB_CALLBACK* get_display_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for download events. If no handler is returned
  /// downloads will not be allowed.
  ///
  struct _honey_download_handler_t*(HONEYCOMB_CALLBACK* get_download_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for drag events.
  ///
  struct _honey_drag_handler_t*(HONEYCOMB_CALLBACK* get_drag_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for find result events.
  ///
  struct _honey_find_handler_t*(HONEYCOMB_CALLBACK* get_find_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for focus events.
  ///
  struct _honey_focus_handler_t*(HONEYCOMB_CALLBACK* get_focus_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for events related to honey_frame_t lifespan. This
  /// function will be called once during honey_browser_t creation and the result
  /// will be cached for performance reasons.
  ///
  struct _honey_frame_handler_t*(HONEYCOMB_CALLBACK* get_frame_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for permission requests.
  ///
  struct _honey_permission_handler_t*(HONEYCOMB_CALLBACK* get_permission_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for JavaScript dialogs. If no handler is provided the
  /// default implementation will be used.
  ///
  struct _honey_jsdialog_handler_t*(HONEYCOMB_CALLBACK* get_jsdialog_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for keyboard events.
  ///
  struct _honey_keyboard_handler_t*(HONEYCOMB_CALLBACK* get_keyboard_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for browser life span events.
  ///
  struct _honey_life_span_handler_t*(HONEYCOMB_CALLBACK* get_life_span_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for browser load status events.
  ///
  struct _honey_load_handler_t*(HONEYCOMB_CALLBACK* get_load_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for printing on Linux. If a print handler is not
  /// provided then printing will not be supported on the Linux platform.
  ///
  struct _honey_print_handler_t*(HONEYCOMB_CALLBACK* get_print_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for off-screen rendering events.
  ///
  struct _honey_render_handler_t*(HONEYCOMB_CALLBACK* get_render_handler)(
      struct _honey_client_t* self);

  ///
  /// Return the handler for browser request events.
  ///
  struct _honey_request_handler_t*(HONEYCOMB_CALLBACK* get_request_handler)(
      struct _honey_client_t* self);

  ///
  /// Called when a new message is received from a different process. Return
  /// true (1) if the message was handled or false (0) otherwise.  It is safe to
  /// keep a reference to |message| outside of this callback.
  ///
  int(HONEYCOMB_CALLBACK* on_process_message_received)(
      struct _honey_client_t* self,
      struct _honey_browser_t* browser,
      struct _honey_frame_t* frame,
      honey_process_id_t source_process,
      struct _honey_process_message_t* message);
} honey_client_t;

#ifdef __cplusplus
}
#endif

#endif  // HONEYCOMB_INCLUDE_CAPI_HONEYCOMB_CLIENT_CAPI_H_
