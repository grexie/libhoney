// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=fc8189d4a430b02f6de35a53188be505db59bfa4$
//

#include "libhoneycomb_dll/cpptoc/resource_bundle_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/binary_value_cpptoc.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_resource_bundle_t* honey_resource_bundle_get_global() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombResourceBundle> _retval = HoneycombResourceBundle::GetGlobal();

  // Return type: refptr_same
  return HoneycombResourceBundleCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_string_userfree_t HONEYCOMB_CALLBACK
resource_bundle_get_localized_string(struct _honey_resource_bundle_t* self,
                                     int string_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval =
      HoneycombResourceBundleCppToC::Get(self)->GetLocalizedString(string_id);

  // Return type: string
  return _retval.DetachToUserFree();
}

struct _honey_binary_value_t* HONEYCOMB_CALLBACK
resource_bundle_get_data_resource(struct _honey_resource_bundle_t* self,
                                  int resource_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBinaryValue> _retval =
      HoneycombResourceBundleCppToC::Get(self)->GetDataResource(resource_id);

  // Return type: refptr_same
  return HoneycombBinaryValueCppToC::Wrap(_retval);
}

struct _honey_binary_value_t* HONEYCOMB_CALLBACK
resource_bundle_get_data_resource_for_scale(struct _honey_resource_bundle_t* self,
                                            int resource_id,
                                            honey_scale_factor_t scale_factor) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBinaryValue> _retval =
      HoneycombResourceBundleCppToC::Get(self)->GetDataResourceForScale(resource_id,
                                                                  scale_factor);

  // Return type: refptr_same
  return HoneycombBinaryValueCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombResourceBundleCppToC::HoneycombResourceBundleCppToC() {
  GetStruct()->get_localized_string = resource_bundle_get_localized_string;
  GetStruct()->get_data_resource = resource_bundle_get_data_resource;
  GetStruct()->get_data_resource_for_scale =
      resource_bundle_get_data_resource_for_scale;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombResourceBundleCppToC::~HoneycombResourceBundleCppToC() {}

template <>
HoneycombRefPtr<HoneycombResourceBundle> HoneycombCppToCRefCounted<
    HoneycombResourceBundleCppToC,
    HoneycombResourceBundle,
    honey_resource_bundle_t>::UnwrapDerived(HoneycombWrapperType type,
                                          honey_resource_bundle_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombResourceBundleCppToC,
                                   HoneycombResourceBundle,
                                   honey_resource_bundle_t>::kWrapperType =
    WT_RESOURCE_BUNDLE;
