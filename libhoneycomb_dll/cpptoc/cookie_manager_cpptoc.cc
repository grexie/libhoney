// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=fc593830dcad16182301bd0033d3932e06820e1b$
//

#include "libhoneycomb_dll/cpptoc/cookie_manager_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/completion_callback_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/cookie_visitor_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/delete_cookies_callback_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/set_cookie_callback_ctocpp.h"
#include "libhoneycomb_dll/template_util.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_cookie_manager_t* honey_cookie_manager_get_global_manager(
    honey_completion_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  HoneycombRefPtr<HoneycombCookieManager> _retval = HoneycombCookieManager::GetGlobalManager(
      HoneycombCompletionCallbackCToCpp::Wrap(callback));

  // Return type: refptr_same
  return HoneycombCookieManagerCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK
cookie_manager_visit_all_cookies(struct _honey_cookie_manager_t* self,
                                 struct _honey_cookie_visitor_t* visitor) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor);
  if (!visitor) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombCookieManagerCppToC::Get(self)->VisitAllCookies(
      HoneycombCookieVisitorCToCpp::Wrap(visitor));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
cookie_manager_visit_url_cookies(struct _honey_cookie_manager_t* self,
                                 const honey_string_t* url,
                                 int includeHttpOnly,
                                 struct _honey_cookie_visitor_t* visitor) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: url; type: string_byref_const
  DCHECK(url);
  if (!url) {
    return 0;
  }
  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor);
  if (!visitor) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombCookieManagerCppToC::Get(self)->VisitUrlCookies(
      HoneycombString(url), includeHttpOnly ? true : false,
      HoneycombCookieVisitorCToCpp::Wrap(visitor));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
cookie_manager_set_cookie(struct _honey_cookie_manager_t* self,
                          const honey_string_t* url,
                          const struct _honey_cookie_t* cookie,
                          struct _honey_set_cookie_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: url; type: string_byref_const
  DCHECK(url);
  if (!url) {
    return 0;
  }
  // Verify param: cookie; type: struct_byref_const
  DCHECK(cookie);
  if (!cookie) {
    return 0;
  }
  if (!template_util::has_valid_size(cookie)) {
    DCHECK(false) << "invalid cookie->[base.]size";
    return 0;
  }
  // Unverified params: callback

  // Translate param: cookie; type: struct_byref_const
  HoneycombCookie cookieObj;
  if (cookie) {
    cookieObj.Set(*cookie, false);
  }

  // Execute
  bool _retval = HoneycombCookieManagerCppToC::Get(self)->SetCookie(
      HoneycombString(url), cookieObj, HoneycombSetCookieCallbackCToCpp::Wrap(callback));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
cookie_manager_delete_cookies(struct _honey_cookie_manager_t* self,
                              const honey_string_t* url,
                              const honey_string_t* cookie_name,
                              struct _honey_delete_cookies_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Unverified params: url, cookie_name, callback

  // Execute
  bool _retval = HoneycombCookieManagerCppToC::Get(self)->DeleteCookies(
      HoneycombString(url), HoneycombString(cookie_name),
      HoneycombDeleteCookiesCallbackCToCpp::Wrap(callback));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
cookie_manager_flush_store(struct _honey_cookie_manager_t* self,
                           honey_completion_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Unverified params: callback

  // Execute
  bool _retval = HoneycombCookieManagerCppToC::Get(self)->FlushStore(
      HoneycombCompletionCallbackCToCpp::Wrap(callback));

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombCookieManagerCppToC::HoneycombCookieManagerCppToC() {
  GetStruct()->visit_all_cookies = cookie_manager_visit_all_cookies;
  GetStruct()->visit_url_cookies = cookie_manager_visit_url_cookies;
  GetStruct()->set_cookie = cookie_manager_set_cookie;
  GetStruct()->delete_cookies = cookie_manager_delete_cookies;
  GetStruct()->flush_store = cookie_manager_flush_store;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombCookieManagerCppToC::~HoneycombCookieManagerCppToC() {}

template <>
HoneycombRefPtr<HoneycombCookieManager> HoneycombCppToCRefCounted<
    HoneycombCookieManagerCppToC,
    HoneycombCookieManager,
    honey_cookie_manager_t>::UnwrapDerived(HoneycombWrapperType type,
                                         honey_cookie_manager_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombCookieManagerCppToC,
                                   HoneycombCookieManager,
                                   honey_cookie_manager_t>::kWrapperType =
    WT_COOKIE_MANAGER;
