// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f7d9700dd9445bf363712c5ccafdcbcb438d7917$
//

#include "libhoneycomb_dll/cpptoc/thread_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/task_runner_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_thread_t* honey_thread_create(
    const honey_string_t* display_name,
    honey_thread_priority_t priority,
    honey_message_loop_type_t message_loop_type,
    int stoppable,
    honey_com_init_mode_t com_init_mode) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: display_name

  // Execute
  HoneycombRefPtr<HoneycombThread> _retval = HoneycombThread::CreateThread(
      HoneycombString(display_name), priority, message_loop_type,
      stoppable ? true : false, com_init_mode);

  // Return type: refptr_same
  return HoneycombThreadCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_task_runner_t* HONEYCOMB_CALLBACK
thread_get_task_runner(struct _honey_thread_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombTaskRunner> _retval =
      HoneycombThreadCppToC::Get(self)->GetTaskRunner();

  // Return type: refptr_same
  return HoneycombTaskRunnerCppToC::Wrap(_retval);
}

honey_platform_thread_id_t HONEYCOMB_CALLBACK
thread_get_platform_thread_id(struct _honey_thread_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return kInvalidPlatformThreadId;
  }

  // Execute
  honey_platform_thread_id_t _retval =
      HoneycombThreadCppToC::Get(self)->GetPlatformThreadId();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK thread_stop(struct _honey_thread_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombThreadCppToC::Get(self)->Stop();
}

int HONEYCOMB_CALLBACK thread_is_running(struct _honey_thread_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombThreadCppToC::Get(self)->IsRunning();

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombThreadCppToC::HoneycombThreadCppToC() {
  GetStruct()->get_task_runner = thread_get_task_runner;
  GetStruct()->get_platform_thread_id = thread_get_platform_thread_id;
  GetStruct()->stop = thread_stop;
  GetStruct()->is_running = thread_is_running;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombThreadCppToC::~HoneycombThreadCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombThread>
HoneycombCppToCRefCounted<HoneycombThreadCppToC, HoneycombThread, honey_thread_t>::UnwrapDerived(
    HoneycombWrapperType type,
    honey_thread_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombThreadCppToC, HoneycombThread, honey_thread_t>::
    kWrapperType = WT_THREAD;
