// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=118e67ac52da6f21cd4b60a318a04c0ecbce3d55$
//

#include "libhoneycomb_dll/cpptoc/task_cpptoc.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK task_execute(struct _honey_task_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombTaskCppToC::Get(self)->Execute();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombTaskCppToC::HoneycombTaskCppToC() {
  GetStruct()->execute = task_execute;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombTaskCppToC::~HoneycombTaskCppToC() {}

template <>
HoneycombRefPtr<HoneycombTask>
HoneycombCppToCRefCounted<HoneycombTaskCppToC, HoneycombTask, honey_task_t>::UnwrapDerived(
    HoneycombWrapperType type,
    honey_task_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCppToCRefCounted<HoneycombTaskCppToC, HoneycombTask, honey_task_t>::kWrapperType =
        WT_TASK;
