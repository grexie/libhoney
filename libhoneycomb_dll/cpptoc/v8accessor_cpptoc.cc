// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=a6bbf97ac7f70e325509631a3bbdbf4b8b860d0c$
//

#include "libhoneycomb_dll/cpptoc/v8accessor_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/v8value_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK v8accessor_get(struct _honey_v8accessor_t* self,
                                const honey_string_t* name,
                                struct _honey_v8value_t* object,
                                struct _honey_v8value_t** retval,
                                honey_string_t* exception) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }
  // Verify param: object; type: refptr_diff
  DCHECK(object);
  if (!object) {
    return 0;
  }
  // Verify param: retval; type: refptr_diff_byref
  DCHECK(retval);
  if (!retval) {
    return 0;
  }
  // Verify param: exception; type: string_byref
  DCHECK(exception);
  if (!exception) {
    return 0;
  }

  // Translate param: retval; type: refptr_diff_byref
  HoneycombRefPtr<HoneycombV8Value> retvalPtr;
  if (retval && *retval) {
    retvalPtr = HoneycombV8ValueCToCpp::Wrap(*retval);
  }
  HoneycombV8Value* retvalOrig = retvalPtr.get();
  // Translate param: exception; type: string_byref
  HoneycombString exceptionStr(exception);

  // Execute
  bool _retval = HoneycombV8AccessorCppToC::Get(self)->Get(
      HoneycombString(name), HoneycombV8ValueCToCpp::Wrap(object), retvalPtr, exceptionStr);

  // Restore param: retval; type: refptr_diff_byref
  if (retval) {
    if (retvalPtr.get()) {
      if (retvalPtr.get() != retvalOrig) {
        *retval = HoneycombV8ValueCToCpp::Unwrap(retvalPtr);
      }
    } else {
      *retval = nullptr;
    }
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK v8accessor_set(struct _honey_v8accessor_t* self,
                                const honey_string_t* name,
                                struct _honey_v8value_t* object,
                                struct _honey_v8value_t* value,
                                honey_string_t* exception) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }
  // Verify param: object; type: refptr_diff
  DCHECK(object);
  if (!object) {
    return 0;
  }
  // Verify param: value; type: refptr_diff
  DCHECK(value);
  if (!value) {
    return 0;
  }
  // Verify param: exception; type: string_byref
  DCHECK(exception);
  if (!exception) {
    return 0;
  }

  // Translate param: exception; type: string_byref
  HoneycombString exceptionStr(exception);

  // Execute
  bool _retval = HoneycombV8AccessorCppToC::Get(self)->Set(
      HoneycombString(name), HoneycombV8ValueCToCpp::Wrap(object),
      HoneycombV8ValueCToCpp::Wrap(value), exceptionStr);

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombV8AccessorCppToC::HoneycombV8AccessorCppToC() {
  GetStruct()->get = v8accessor_get;
  GetStruct()->set = v8accessor_set;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombV8AccessorCppToC::~HoneycombV8AccessorCppToC() {}

template <>
HoneycombRefPtr<HoneycombV8Accessor>
HoneycombCppToCRefCounted<HoneycombV8AccessorCppToC, HoneycombV8Accessor, honey_v8accessor_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_v8accessor_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombV8AccessorCppToC,
                                   HoneycombV8Accessor,
                                   honey_v8accessor_t>::kWrapperType =
    WT_V8ACCESSOR;
