// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c2dd1bf044dc413a46e8482869711ed60f7129c7$
//

#include "libhoneycomb_dll/cpptoc/domdocument_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/domnode_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_dom_document_type_t HONEYCOMB_CALLBACK
domdocument_get_type(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return DOM_DOCUMENT_TYPE_UNKNOWN;
  }

  // Execute
  honey_dom_document_type_t _retval = HoneycombDOMDocumentCppToC::Get(self)->GetType();

  // Return type: simple
  return _retval;
}

struct _honey_domnode_t* HONEYCOMB_CALLBACK
domdocument_get_document(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDOMNode> _retval =
      HoneycombDOMDocumentCppToC::Get(self)->GetDocument();

  // Return type: refptr_same
  return HoneycombDOMNodeCppToC::Wrap(_retval);
}

struct _honey_domnode_t* HONEYCOMB_CALLBACK
domdocument_get_body(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDOMNode> _retval = HoneycombDOMDocumentCppToC::Get(self)->GetBody();

  // Return type: refptr_same
  return HoneycombDOMNodeCppToC::Wrap(_retval);
}

struct _honey_domnode_t* HONEYCOMB_CALLBACK
domdocument_get_head(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDOMNode> _retval = HoneycombDOMDocumentCppToC::Get(self)->GetHead();

  // Return type: refptr_same
  return HoneycombDOMNodeCppToC::Wrap(_retval);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
domdocument_get_title(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombDOMDocumentCppToC::Get(self)->GetTitle();

  // Return type: string
  return _retval.DetachToUserFree();
}

struct _honey_domnode_t* HONEYCOMB_CALLBACK
domdocument_get_element_by_id(struct _honey_domdocument_t* self,
                              const honey_string_t* id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: id; type: string_byref_const
  DCHECK(id);
  if (!id) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDOMNode> _retval =
      HoneycombDOMDocumentCppToC::Get(self)->GetElementById(HoneycombString(id));

  // Return type: refptr_same
  return HoneycombDOMNodeCppToC::Wrap(_retval);
}

struct _honey_domnode_t* HONEYCOMB_CALLBACK
domdocument_get_focused_node(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDOMNode> _retval =
      HoneycombDOMDocumentCppToC::Get(self)->GetFocusedNode();

  // Return type: refptr_same
  return HoneycombDOMNodeCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK domdocument_has_selection(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombDOMDocumentCppToC::Get(self)->HasSelection();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
domdocument_get_selection_start_offset(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombDOMDocumentCppToC::Get(self)->GetSelectionStartOffset();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK
domdocument_get_selection_end_offset(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombDOMDocumentCppToC::Get(self)->GetSelectionEndOffset();

  // Return type: simple
  return _retval;
}

honey_string_userfree_t HONEYCOMB_CALLBACK
domdocument_get_selection_as_markup(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombDOMDocumentCppToC::Get(self)->GetSelectionAsMarkup();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_string_userfree_t HONEYCOMB_CALLBACK
domdocument_get_selection_as_text(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombDOMDocumentCppToC::Get(self)->GetSelectionAsText();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_string_userfree_t HONEYCOMB_CALLBACK
domdocument_get_base_url(struct _honey_domdocument_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombDOMDocumentCppToC::Get(self)->GetBaseURL();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_string_userfree_t HONEYCOMB_CALLBACK
domdocument_get_complete_url(struct _honey_domdocument_t* self,
                             const honey_string_t* partialURL) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: partialURL; type: string_byref_const
  DCHECK(partialURL);
  if (!partialURL) {
    return NULL;
  }

  // Execute
  HoneycombString _retval =
      HoneycombDOMDocumentCppToC::Get(self)->GetCompleteURL(HoneycombString(partialURL));

  // Return type: string
  return _retval.DetachToUserFree();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombDOMDocumentCppToC::HoneycombDOMDocumentCppToC() {
  GetStruct()->get_type = domdocument_get_type;
  GetStruct()->get_document = domdocument_get_document;
  GetStruct()->get_body = domdocument_get_body;
  GetStruct()->get_head = domdocument_get_head;
  GetStruct()->get_title = domdocument_get_title;
  GetStruct()->get_element_by_id = domdocument_get_element_by_id;
  GetStruct()->get_focused_node = domdocument_get_focused_node;
  GetStruct()->has_selection = domdocument_has_selection;
  GetStruct()->get_selection_start_offset =
      domdocument_get_selection_start_offset;
  GetStruct()->get_selection_end_offset = domdocument_get_selection_end_offset;
  GetStruct()->get_selection_as_markup = domdocument_get_selection_as_markup;
  GetStruct()->get_selection_as_text = domdocument_get_selection_as_text;
  GetStruct()->get_base_url = domdocument_get_base_url;
  GetStruct()->get_complete_url = domdocument_get_complete_url;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombDOMDocumentCppToC::~HoneycombDOMDocumentCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombDOMDocument>
HoneycombCppToCRefCounted<HoneycombDOMDocumentCppToC, HoneycombDOMDocument, honey_domdocument_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_domdocument_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombDOMDocumentCppToC,
                                   HoneycombDOMDocument,
                                   honey_domdocument_t>::kWrapperType =
    WT_DOMDOCUMENT;
