// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=36b8cdbb6821347abd764616baa7b1582a2d8779$
//

#include "libhoneycomb_dll/cpptoc/server_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/task_runner_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/server_handler_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"
#include "libhoneycomb_dll/transfer_util.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT void honey_server_create(const honey_string_t* address,
                                  uint16_t port,
                                  int backlog,
                                  struct _honey_server_handler_t* handler) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: address; type: string_byref_const
  DCHECK(address);
  if (!address) {
    return;
  }
  // Verify param: handler; type: refptr_diff
  DCHECK(handler);
  if (!handler) {
    return;
  }

  // Execute
  HoneycombServer::CreateServer(HoneycombString(address), port, backlog,
                          HoneycombServerHandlerCToCpp::Wrap(handler));
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

struct _honey_task_runner_t* HONEYCOMB_CALLBACK
server_get_task_runner(struct _honey_server_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombTaskRunner> _retval =
      HoneycombServerCppToC::Get(self)->GetTaskRunner();

  // Return type: refptr_same
  return HoneycombTaskRunnerCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK server_shutdown(struct _honey_server_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombServerCppToC::Get(self)->Shutdown();
}

int HONEYCOMB_CALLBACK server_is_running(struct _honey_server_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombServerCppToC::Get(self)->IsRunning();

  // Return type: bool
  return _retval;
}

honey_string_userfree_t HONEYCOMB_CALLBACK
server_get_address(struct _honey_server_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombServerCppToC::Get(self)->GetAddress();

  // Return type: string
  return _retval.DetachToUserFree();
}

int HONEYCOMB_CALLBACK server_has_connection(struct _honey_server_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombServerCppToC::Get(self)->HasConnection();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK server_is_valid_connection(struct _honey_server_t* self,
                                            int connection_id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombServerCppToC::Get(self)->IsValidConnection(connection_id);

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK server_send_http200response(struct _honey_server_t* self,
                                              int connection_id,
                                              const honey_string_t* content_type,
                                              const void* data,
                                              size_t data_size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: content_type; type: string_byref_const
  DCHECK(content_type);
  if (!content_type) {
    return;
  }
  // Verify param: data; type: simple_byaddr
  DCHECK(data);
  if (!data) {
    return;
  }

  // Execute
  HoneycombServerCppToC::Get(self)->SendHttp200Response(
      connection_id, HoneycombString(content_type), data, data_size);
}

void HONEYCOMB_CALLBACK server_send_http404response(struct _honey_server_t* self,
                                              int connection_id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombServerCppToC::Get(self)->SendHttp404Response(connection_id);
}

void HONEYCOMB_CALLBACK
server_send_http500response(struct _honey_server_t* self,
                            int connection_id,
                            const honey_string_t* error_message) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: error_message; type: string_byref_const
  DCHECK(error_message);
  if (!error_message) {
    return;
  }

  // Execute
  HoneycombServerCppToC::Get(self)->SendHttp500Response(connection_id,
                                                  HoneycombString(error_message));
}

void HONEYCOMB_CALLBACK
server_send_http_response(struct _honey_server_t* self,
                          int connection_id,
                          int response_code,
                          const honey_string_t* content_type,
                          int64_t content_length,
                          honey_string_multimap_t extra_headers) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: content_type; type: string_byref_const
  DCHECK(content_type);
  if (!content_type) {
    return;
  }
  // Unverified params: extra_headers

  // Translate param: extra_headers; type: string_map_multi_byref_const
  std::multimap<HoneycombString, HoneycombString> extra_headersMultimap;
  transfer_string_multimap_contents(extra_headers, extra_headersMultimap);

  // Execute
  HoneycombServerCppToC::Get(self)->SendHttpResponse(
      connection_id, response_code, HoneycombString(content_type), content_length,
      extra_headersMultimap);
}

void HONEYCOMB_CALLBACK server_send_raw_data(struct _honey_server_t* self,
                                       int connection_id,
                                       const void* data,
                                       size_t data_size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: data; type: simple_byaddr
  DCHECK(data);
  if (!data) {
    return;
  }

  // Execute
  HoneycombServerCppToC::Get(self)->SendRawData(connection_id, data, data_size);
}

void HONEYCOMB_CALLBACK server_close_connection(struct _honey_server_t* self,
                                          int connection_id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombServerCppToC::Get(self)->CloseConnection(connection_id);
}

void HONEYCOMB_CALLBACK server_send_web_socket_message(struct _honey_server_t* self,
                                                 int connection_id,
                                                 const void* data,
                                                 size_t data_size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: data; type: simple_byaddr
  DCHECK(data);
  if (!data) {
    return;
  }

  // Execute
  HoneycombServerCppToC::Get(self)->SendWebSocketMessage(connection_id, data,
                                                   data_size);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombServerCppToC::HoneycombServerCppToC() {
  GetStruct()->get_task_runner = server_get_task_runner;
  GetStruct()->shutdown = server_shutdown;
  GetStruct()->is_running = server_is_running;
  GetStruct()->get_address = server_get_address;
  GetStruct()->has_connection = server_has_connection;
  GetStruct()->is_valid_connection = server_is_valid_connection;
  GetStruct()->send_http200response = server_send_http200response;
  GetStruct()->send_http404response = server_send_http404response;
  GetStruct()->send_http500response = server_send_http500response;
  GetStruct()->send_http_response = server_send_http_response;
  GetStruct()->send_raw_data = server_send_raw_data;
  GetStruct()->close_connection = server_close_connection;
  GetStruct()->send_web_socket_message = server_send_web_socket_message;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombServerCppToC::~HoneycombServerCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombServer>
HoneycombCppToCRefCounted<HoneycombServerCppToC, HoneycombServer, honey_server_t>::UnwrapDerived(
    HoneycombWrapperType type,
    honey_server_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombServerCppToC, HoneycombServer, honey_server_t>::
    kWrapperType = WT_SERVER;
