// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d388bfeaf7f74152201d083d9142659d0a799391$
//

#include "libhoneycomb_dll/cpptoc/download_handler_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/before_download_callback_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/browser_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/download_item_callback_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/download_item_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK
download_handler_can_download(struct _honey_download_handler_t* self,
                              honey_browser_t* browser,
                              const honey_string_t* url,
                              const honey_string_t* request_method) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return 0;
  }
  // Verify param: url; type: string_byref_const
  DCHECK(url);
  if (!url) {
    return 0;
  }
  // Verify param: request_method; type: string_byref_const
  DCHECK(request_method);
  if (!request_method) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombDownloadHandlerCppToC::Get(self)->CanDownload(
      HoneycombBrowserCToCpp::Wrap(browser), HoneycombString(url),
      HoneycombString(request_method));

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK
download_handler_on_before_download(struct _honey_download_handler_t* self,
                                    honey_browser_t* browser,
                                    struct _honey_download_item_t* download_item,
                                    const honey_string_t* suggested_name,
                                    honey_before_download_callback_t* callback) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }
  // Verify param: download_item; type: refptr_diff
  DCHECK(download_item);
  if (!download_item) {
    return;
  }
  // Verify param: suggested_name; type: string_byref_const
  DCHECK(suggested_name);
  if (!suggested_name) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback);
  if (!callback) {
    return;
  }

  // Execute
  HoneycombDownloadHandlerCppToC::Get(self)->OnBeforeDownload(
      HoneycombBrowserCToCpp::Wrap(browser),
      HoneycombDownloadItemCToCpp::Wrap(download_item), HoneycombString(suggested_name),
      HoneycombBeforeDownloadCallbackCToCpp::Wrap(callback));
}

void HONEYCOMB_CALLBACK
download_handler_on_download_updated(struct _honey_download_handler_t* self,
                                     honey_browser_t* browser,
                                     struct _honey_download_item_t* download_item,
                                     honey_download_item_callback_t* callback) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }
  // Verify param: download_item; type: refptr_diff
  DCHECK(download_item);
  if (!download_item) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback);
  if (!callback) {
    return;
  }

  // Execute
  HoneycombDownloadHandlerCppToC::Get(self)->OnDownloadUpdated(
      HoneycombBrowserCToCpp::Wrap(browser),
      HoneycombDownloadItemCToCpp::Wrap(download_item),
      HoneycombDownloadItemCallbackCToCpp::Wrap(callback));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombDownloadHandlerCppToC::HoneycombDownloadHandlerCppToC() {
  GetStruct()->can_download = download_handler_can_download;
  GetStruct()->on_before_download = download_handler_on_before_download;
  GetStruct()->on_download_updated = download_handler_on_download_updated;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombDownloadHandlerCppToC::~HoneycombDownloadHandlerCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombDownloadHandler> HoneycombCppToCRefCounted<
    HoneycombDownloadHandlerCppToC,
    HoneycombDownloadHandler,
    honey_download_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                           honey_download_handler_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombDownloadHandlerCppToC,
                                   HoneycombDownloadHandler,
                                   honey_download_handler_t>::kWrapperType =
    WT_DOWNLOAD_HANDLER;
