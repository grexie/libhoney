// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c8d0d84851df03db685c0a87a53780d64ce425db$
//

#include "libhoneycomb_dll/cpptoc/v8interceptor_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/v8value_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK v8interceptor_get_byname(struct _honey_v8interceptor_t* self,
                                          const honey_string_t* name,
                                          struct _honey_v8value_t* object,
                                          struct _honey_v8value_t** retval,
                                          honey_string_t* exception) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }
  // Verify param: object; type: refptr_diff
  DCHECK(object);
  if (!object) {
    return 0;
  }
  // Verify param: retval; type: refptr_diff_byref
  DCHECK(retval);
  if (!retval) {
    return 0;
  }
  // Verify param: exception; type: string_byref
  DCHECK(exception);
  if (!exception) {
    return 0;
  }

  // Translate param: retval; type: refptr_diff_byref
  HoneycombRefPtr<HoneycombV8Value> retvalPtr;
  if (retval && *retval) {
    retvalPtr = HoneycombV8ValueCToCpp::Wrap(*retval);
  }
  HoneycombV8Value* retvalOrig = retvalPtr.get();
  // Translate param: exception; type: string_byref
  HoneycombString exceptionStr(exception);

  // Execute
  bool _retval = HoneycombV8InterceptorCppToC::Get(self)->Get(
      HoneycombString(name), HoneycombV8ValueCToCpp::Wrap(object), retvalPtr, exceptionStr);

  // Restore param: retval; type: refptr_diff_byref
  if (retval) {
    if (retvalPtr.get()) {
      if (retvalPtr.get() != retvalOrig) {
        *retval = HoneycombV8ValueCToCpp::Unwrap(retvalPtr);
      }
    } else {
      *retval = nullptr;
    }
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK v8interceptor_get_byindex(struct _honey_v8interceptor_t* self,
                                           int index,
                                           struct _honey_v8value_t* object,
                                           struct _honey_v8value_t** retval,
                                           honey_string_t* exception) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return 0;
  }
  // Verify param: object; type: refptr_diff
  DCHECK(object);
  if (!object) {
    return 0;
  }
  // Verify param: retval; type: refptr_diff_byref
  DCHECK(retval);
  if (!retval) {
    return 0;
  }
  // Verify param: exception; type: string_byref
  DCHECK(exception);
  if (!exception) {
    return 0;
  }

  // Translate param: retval; type: refptr_diff_byref
  HoneycombRefPtr<HoneycombV8Value> retvalPtr;
  if (retval && *retval) {
    retvalPtr = HoneycombV8ValueCToCpp::Wrap(*retval);
  }
  HoneycombV8Value* retvalOrig = retvalPtr.get();
  // Translate param: exception; type: string_byref
  HoneycombString exceptionStr(exception);

  // Execute
  bool _retval = HoneycombV8InterceptorCppToC::Get(self)->Get(
      index, HoneycombV8ValueCToCpp::Wrap(object), retvalPtr, exceptionStr);

  // Restore param: retval; type: refptr_diff_byref
  if (retval) {
    if (retvalPtr.get()) {
      if (retvalPtr.get() != retvalOrig) {
        *retval = HoneycombV8ValueCToCpp::Unwrap(retvalPtr);
      }
    } else {
      *retval = nullptr;
    }
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK v8interceptor_set_byname(struct _honey_v8interceptor_t* self,
                                          const honey_string_t* name,
                                          struct _honey_v8value_t* object,
                                          struct _honey_v8value_t* value,
                                          honey_string_t* exception) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }
  // Verify param: object; type: refptr_diff
  DCHECK(object);
  if (!object) {
    return 0;
  }
  // Verify param: value; type: refptr_diff
  DCHECK(value);
  if (!value) {
    return 0;
  }
  // Verify param: exception; type: string_byref
  DCHECK(exception);
  if (!exception) {
    return 0;
  }

  // Translate param: exception; type: string_byref
  HoneycombString exceptionStr(exception);

  // Execute
  bool _retval = HoneycombV8InterceptorCppToC::Get(self)->Set(
      HoneycombString(name), HoneycombV8ValueCToCpp::Wrap(object),
      HoneycombV8ValueCToCpp::Wrap(value), exceptionStr);

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK v8interceptor_set_byindex(struct _honey_v8interceptor_t* self,
                                           int index,
                                           struct _honey_v8value_t* object,
                                           struct _honey_v8value_t* value,
                                           honey_string_t* exception) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return 0;
  }
  // Verify param: object; type: refptr_diff
  DCHECK(object);
  if (!object) {
    return 0;
  }
  // Verify param: value; type: refptr_diff
  DCHECK(value);
  if (!value) {
    return 0;
  }
  // Verify param: exception; type: string_byref
  DCHECK(exception);
  if (!exception) {
    return 0;
  }

  // Translate param: exception; type: string_byref
  HoneycombString exceptionStr(exception);

  // Execute
  bool _retval = HoneycombV8InterceptorCppToC::Get(self)->Set(
      index, HoneycombV8ValueCToCpp::Wrap(object), HoneycombV8ValueCToCpp::Wrap(value),
      exceptionStr);

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombV8InterceptorCppToC::HoneycombV8InterceptorCppToC() {
  GetStruct()->get_byname = v8interceptor_get_byname;
  GetStruct()->get_byindex = v8interceptor_get_byindex;
  GetStruct()->set_byname = v8interceptor_set_byname;
  GetStruct()->set_byindex = v8interceptor_set_byindex;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombV8InterceptorCppToC::~HoneycombV8InterceptorCppToC() {}

template <>
HoneycombRefPtr<HoneycombV8Interceptor> HoneycombCppToCRefCounted<
    HoneycombV8InterceptorCppToC,
    HoneycombV8Interceptor,
    honey_v8interceptor_t>::UnwrapDerived(HoneycombWrapperType type,
                                        honey_v8interceptor_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombV8InterceptorCppToC,
                                   HoneycombV8Interceptor,
                                   honey_v8interceptor_t>::kWrapperType =
    WT_V8INTERCEPTOR;
