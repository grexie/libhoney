// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=ccecac02125e1608fe96c9646b6d9529434396e9$
//

#include "libhoneycomb_dll/cpptoc/cookie_visitor_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"
#include "libhoneycomb_dll/template_util.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK cookie_visitor_visit(struct _honey_cookie_visitor_t* self,
                                      const struct _honey_cookie_t* cookie,
                                      int count,
                                      int total,
                                      int* deleteCookie) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: cookie; type: struct_byref_const
  DCHECK(cookie);
  if (!cookie) {
    return 0;
  }
  if (!template_util::has_valid_size(cookie)) {
    DCHECK(false) << "invalid cookie->[base.]size";
    return 0;
  }
  // Verify param: deleteCookie; type: bool_byref
  DCHECK(deleteCookie);
  if (!deleteCookie) {
    return 0;
  }

  // Translate param: cookie; type: struct_byref_const
  HoneycombCookie cookieObj;
  if (cookie) {
    cookieObj.Set(*cookie, false);
  }
  // Translate param: deleteCookie; type: bool_byref
  bool deleteCookieBool = (deleteCookie && *deleteCookie) ? true : false;

  // Execute
  bool _retval = HoneycombCookieVisitorCppToC::Get(self)->Visit(
      cookieObj, count, total, deleteCookieBool);

  // Restore param: deleteCookie; type: bool_byref
  if (deleteCookie) {
    *deleteCookie = deleteCookieBool ? true : false;
  }

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombCookieVisitorCppToC::HoneycombCookieVisitorCppToC() {
  GetStruct()->visit = cookie_visitor_visit;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombCookieVisitorCppToC::~HoneycombCookieVisitorCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombCookieVisitor> HoneycombCppToCRefCounted<
    HoneycombCookieVisitorCppToC,
    HoneycombCookieVisitor,
    honey_cookie_visitor_t>::UnwrapDerived(HoneycombWrapperType type,
                                         honey_cookie_visitor_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombCookieVisitorCppToC,
                                   HoneycombCookieVisitor,
                                   honey_cookie_visitor_t>::kWrapperType =
    WT_COOKIE_VISITOR;
