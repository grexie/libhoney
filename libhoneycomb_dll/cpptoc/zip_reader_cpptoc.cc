// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=81049bd86aaa1a24f963364c61f766dd086598d5$
//

#include "libhoneycomb_dll/cpptoc/zip_reader_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/stream_reader_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_zip_reader_t* honey_zip_reader_create(
    honey_stream_reader_t* stream) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: stream; type: refptr_same
  DCHECK(stream);
  if (!stream) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombZipReader> _retval =
      HoneycombZipReader::Create(HoneycombStreamReaderCppToC::Unwrap(stream));

  // Return type: refptr_same
  return HoneycombZipReaderCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK zip_reader_move_to_first_file(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombZipReaderCppToC::Get(self)->MoveToFirstFile();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK zip_reader_move_to_next_file(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombZipReaderCppToC::Get(self)->MoveToNextFile();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK zip_reader_move_to_file(struct _honey_zip_reader_t* self,
                                         const honey_string_t* fileName,
                                         int caseSensitive) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: fileName; type: string_byref_const
  DCHECK(fileName);
  if (!fileName) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombZipReaderCppToC::Get(self)->MoveToFile(
      HoneycombString(fileName), caseSensitive ? true : false);

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK zip_reader_close(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombZipReaderCppToC::Get(self)->Close();

  // Return type: bool
  return _retval;
}

honey_string_userfree_t HONEYCOMB_CALLBACK
zip_reader_get_file_name(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombZipReaderCppToC::Get(self)->GetFileName();

  // Return type: string
  return _retval.DetachToUserFree();
}

int64_t HONEYCOMB_CALLBACK zip_reader_get_file_size(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int64_t _retval = HoneycombZipReaderCppToC::Get(self)->GetFileSize();

  // Return type: simple
  return _retval;
}

honey_basetime_t HONEYCOMB_CALLBACK
zip_reader_get_file_last_modified(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombBaseTime();
  }

  // Execute
  honey_basetime_t _retval = HoneycombZipReaderCppToC::Get(self)->GetFileLastModified();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK zip_reader_open_file(struct _honey_zip_reader_t* self,
                                      const honey_string_t* password) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Unverified params: password

  // Execute
  bool _retval = HoneycombZipReaderCppToC::Get(self)->OpenFile(HoneycombString(password));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK zip_reader_close_file(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombZipReaderCppToC::Get(self)->CloseFile();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK zip_reader_read_file(struct _honey_zip_reader_t* self,
                                      void* buffer,
                                      size_t bufferSize) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: buffer; type: simple_byaddr
  DCHECK(buffer);
  if (!buffer) {
    return 0;
  }

  // Execute
  int _retval = HoneycombZipReaderCppToC::Get(self)->ReadFile(buffer, bufferSize);

  // Return type: simple
  return _retval;
}

int64_t HONEYCOMB_CALLBACK zip_reader_tell(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int64_t _retval = HoneycombZipReaderCppToC::Get(self)->Tell();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK zip_reader_eof(struct _honey_zip_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombZipReaderCppToC::Get(self)->Eof();

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombZipReaderCppToC::HoneycombZipReaderCppToC() {
  GetStruct()->move_to_first_file = zip_reader_move_to_first_file;
  GetStruct()->move_to_next_file = zip_reader_move_to_next_file;
  GetStruct()->move_to_file = zip_reader_move_to_file;
  GetStruct()->close = zip_reader_close;
  GetStruct()->get_file_name = zip_reader_get_file_name;
  GetStruct()->get_file_size = zip_reader_get_file_size;
  GetStruct()->get_file_last_modified = zip_reader_get_file_last_modified;
  GetStruct()->open_file = zip_reader_open_file;
  GetStruct()->close_file = zip_reader_close_file;
  GetStruct()->read_file = zip_reader_read_file;
  GetStruct()->tell = zip_reader_tell;
  GetStruct()->eof = zip_reader_eof;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombZipReaderCppToC::~HoneycombZipReaderCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombZipReader>
HoneycombCppToCRefCounted<HoneycombZipReaderCppToC, HoneycombZipReader, honey_zip_reader_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_zip_reader_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombZipReaderCppToC,
                                   HoneycombZipReader,
                                   honey_zip_reader_t>::kWrapperType =
    WT_ZIP_READER;
