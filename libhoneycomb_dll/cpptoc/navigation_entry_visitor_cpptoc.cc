// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f1a90fb1b3cda0cec9e9b4349c722761be164d22$
//

#include "libhoneycomb_dll/cpptoc/navigation_entry_visitor_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/navigation_entry_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK
navigation_entry_visitor_visit(struct _honey_navigation_entry_visitor_t* self,
                               struct _honey_navigation_entry_t* entry,
                               int current,
                               int index,
                               int total) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: entry; type: refptr_diff
  DCHECK(entry);
  if (!entry) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombNavigationEntryVisitorCppToC::Get(self)->Visit(
      HoneycombNavigationEntryCToCpp::Wrap(entry), current ? true : false, index,
      total);

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombNavigationEntryVisitorCppToC::HoneycombNavigationEntryVisitorCppToC() {
  GetStruct()->visit = navigation_entry_visitor_visit;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombNavigationEntryVisitorCppToC::~HoneycombNavigationEntryVisitorCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombNavigationEntryVisitor>
HoneycombCppToCRefCounted<HoneycombNavigationEntryVisitorCppToC,
                    HoneycombNavigationEntryVisitor,
                    honey_navigation_entry_visitor_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_navigation_entry_visitor_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCppToCRefCounted<HoneycombNavigationEntryVisitorCppToC,
                        HoneycombNavigationEntryVisitor,
                        honey_navigation_entry_visitor_t>::kWrapperType =
        WT_NAVIGATION_ENTRY_VISITOR;
