// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=3107bde9f33663e0141afa3fef9051c53eac11d8$
//

#include "libhoneycomb_dll/cpptoc/views/fill_layout_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/box_layout_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_box_layout_t* HONEYCOMB_CALLBACK
fill_layout_as_box_layout(struct _honey_layout_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBoxLayout> _retval =
      HoneycombFillLayoutCppToC::Get(reinterpret_cast<honey_fill_layout_t*>(self))
          ->AsBoxLayout();

  // Return type: refptr_same
  return HoneycombBoxLayoutCppToC::Wrap(_retval);
}

honey_fill_layout_t* HONEYCOMB_CALLBACK
fill_layout_as_fill_layout(struct _honey_layout_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombFillLayout> _retval =
      HoneycombFillLayoutCppToC::Get(reinterpret_cast<honey_fill_layout_t*>(self))
          ->AsFillLayout();

  // Return type: refptr_same
  return HoneycombFillLayoutCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK fill_layout_is_valid(struct _honey_layout_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombFillLayoutCppToC::Get(reinterpret_cast<honey_fill_layout_t*>(self))
          ->IsValid();

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombFillLayoutCppToC::HoneycombFillLayoutCppToC() {
  GetStruct()->base.as_box_layout = fill_layout_as_box_layout;
  GetStruct()->base.as_fill_layout = fill_layout_as_fill_layout;
  GetStruct()->base.is_valid = fill_layout_is_valid;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombFillLayoutCppToC::~HoneycombFillLayoutCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombFillLayout>
HoneycombCppToCRefCounted<HoneycombFillLayoutCppToC, HoneycombFillLayout, honey_fill_layout_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_fill_layout_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombFillLayoutCppToC,
                                   HoneycombFillLayout,
                                   honey_fill_layout_t>::kWrapperType =
    WT_FILL_LAYOUT;
