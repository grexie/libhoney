// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=714f6a3397b0c294cf77f23061d07c3e9b548989$
//

#include "libhoneycomb_dll/cpptoc/views/overlay_controller_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/view_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/window_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK
overlay_controller_is_valid(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombOverlayControllerCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
overlay_controller_is_same(struct _honey_overlay_controller_t* self,
                           struct _honey_overlay_controller_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombOverlayControllerCppToC::Get(self)->IsSame(
      HoneycombOverlayControllerCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _honey_view_t* HONEYCOMB_CALLBACK
overlay_controller_get_contents_view(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval =
      HoneycombOverlayControllerCppToC::Get(self)->GetContentsView();

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

struct _honey_window_t* HONEYCOMB_CALLBACK
overlay_controller_get_window(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombWindow> _retval =
      HoneycombOverlayControllerCppToC::Get(self)->GetWindow();

  // Return type: refptr_same
  return HoneycombWindowCppToC::Wrap(_retval);
}

honey_docking_mode_t HONEYCOMB_CALLBACK
overlay_controller_get_docking_mode(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HONEYCOMB_DOCKING_MODE_TOP_LEFT;
  }

  // Execute
  honey_docking_mode_t _retval =
      HoneycombOverlayControllerCppToC::Get(self)->GetDockingMode();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
overlay_controller_destroy(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombOverlayControllerCppToC::Get(self)->Destroy();
}

void HONEYCOMB_CALLBACK
overlay_controller_set_bounds(struct _honey_overlay_controller_t* self,
                              const honey_rect_t* bounds) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: bounds; type: simple_byref_const
  DCHECK(bounds);
  if (!bounds) {
    return;
  }

  // Translate param: bounds; type: simple_byref_const
  HoneycombRect boundsVal = bounds ? *bounds : HoneycombRect();

  // Execute
  HoneycombOverlayControllerCppToC::Get(self)->SetBounds(boundsVal);
}

honey_rect_t HONEYCOMB_CALLBACK
overlay_controller_get_bounds(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval = HoneycombOverlayControllerCppToC::Get(self)->GetBounds();

  // Return type: simple
  return _retval;
}

honey_rect_t HONEYCOMB_CALLBACK overlay_controller_get_bounds_in_screen(
    struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval =
      HoneycombOverlayControllerCppToC::Get(self)->GetBoundsInScreen();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
overlay_controller_set_size(struct _honey_overlay_controller_t* self,
                            const honey_size_t* size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size) {
    return;
  }

  // Translate param: size; type: simple_byref_const
  HoneycombSize sizeVal = size ? *size : HoneycombSize();

  // Execute
  HoneycombOverlayControllerCppToC::Get(self)->SetSize(sizeVal);
}

honey_size_t HONEYCOMB_CALLBACK
overlay_controller_get_size(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval = HoneycombOverlayControllerCppToC::Get(self)->GetSize();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
overlay_controller_set_position(struct _honey_overlay_controller_t* self,
                                const honey_point_t* position) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: position; type: simple_byref_const
  DCHECK(position);
  if (!position) {
    return;
  }

  // Translate param: position; type: simple_byref_const
  HoneycombPoint positionVal = position ? *position : HoneycombPoint();

  // Execute
  HoneycombOverlayControllerCppToC::Get(self)->SetPosition(positionVal);
}

honey_point_t HONEYCOMB_CALLBACK
overlay_controller_get_position(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombPoint();
  }

  // Execute
  honey_point_t _retval = HoneycombOverlayControllerCppToC::Get(self)->GetPosition();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
overlay_controller_set_insets(struct _honey_overlay_controller_t* self,
                              const honey_insets_t* insets) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: insets; type: simple_byref_const
  DCHECK(insets);
  if (!insets) {
    return;
  }

  // Translate param: insets; type: simple_byref_const
  HoneycombInsets insetsVal = insets ? *insets : HoneycombInsets();

  // Execute
  HoneycombOverlayControllerCppToC::Get(self)->SetInsets(insetsVal);
}

honey_insets_t HONEYCOMB_CALLBACK
overlay_controller_get_insets(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombInsets();
  }

  // Execute
  honey_insets_t _retval = HoneycombOverlayControllerCppToC::Get(self)->GetInsets();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK overlay_controller_size_to_preferred_size(
    struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombOverlayControllerCppToC::Get(self)->SizeToPreferredSize();
}

void HONEYCOMB_CALLBACK
overlay_controller_set_visible(struct _honey_overlay_controller_t* self,
                               int visible) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombOverlayControllerCppToC::Get(self)->SetVisible(visible ? true : false);
}

int HONEYCOMB_CALLBACK
overlay_controller_is_visible(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombOverlayControllerCppToC::Get(self)->IsVisible();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
overlay_controller_is_drawn(struct _honey_overlay_controller_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombOverlayControllerCppToC::Get(self)->IsDrawn();

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombOverlayControllerCppToC::HoneycombOverlayControllerCppToC() {
  GetStruct()->is_valid = overlay_controller_is_valid;
  GetStruct()->is_same = overlay_controller_is_same;
  GetStruct()->get_contents_view = overlay_controller_get_contents_view;
  GetStruct()->get_window = overlay_controller_get_window;
  GetStruct()->get_docking_mode = overlay_controller_get_docking_mode;
  GetStruct()->destroy = overlay_controller_destroy;
  GetStruct()->set_bounds = overlay_controller_set_bounds;
  GetStruct()->get_bounds = overlay_controller_get_bounds;
  GetStruct()->get_bounds_in_screen = overlay_controller_get_bounds_in_screen;
  GetStruct()->set_size = overlay_controller_set_size;
  GetStruct()->get_size = overlay_controller_get_size;
  GetStruct()->set_position = overlay_controller_set_position;
  GetStruct()->get_position = overlay_controller_get_position;
  GetStruct()->set_insets = overlay_controller_set_insets;
  GetStruct()->get_insets = overlay_controller_get_insets;
  GetStruct()->size_to_preferred_size =
      overlay_controller_size_to_preferred_size;
  GetStruct()->set_visible = overlay_controller_set_visible;
  GetStruct()->is_visible = overlay_controller_is_visible;
  GetStruct()->is_drawn = overlay_controller_is_drawn;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombOverlayControllerCppToC::~HoneycombOverlayControllerCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombOverlayController> HoneycombCppToCRefCounted<
    HoneycombOverlayControllerCppToC,
    HoneycombOverlayController,
    honey_overlay_controller_t>::UnwrapDerived(HoneycombWrapperType type,
                                             honey_overlay_controller_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombOverlayControllerCppToC,
                                   HoneycombOverlayController,
                                   honey_overlay_controller_t>::kWrapperType =
    WT_OVERLAY_CONTROLLER;
