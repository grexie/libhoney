// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=a5ca3a4f1b8c666eee1a198e455dab6ca623650c$
//

#include "libhoneycomb_dll/cpptoc/views/view_delegate_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/browser_view_delegate_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/button_delegate_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/menu_button_delegate_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/panel_delegate_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/textfield_delegate_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/window_delegate_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/views/view_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_size_t HONEYCOMB_CALLBACK
view_delegate_get_preferred_size(struct _honey_view_delegate_t* self,
                                 honey_view_t* view) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval = HoneycombViewDelegateCppToC::Get(self)->GetPreferredSize(
      HoneycombViewCToCpp::Wrap(view));

  // Return type: simple
  return _retval;
}

honey_size_t HONEYCOMB_CALLBACK
view_delegate_get_minimum_size(struct _honey_view_delegate_t* self,
                               honey_view_t* view) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval = HoneycombViewDelegateCppToC::Get(self)->GetMinimumSize(
      HoneycombViewCToCpp::Wrap(view));

  // Return type: simple
  return _retval;
}

honey_size_t HONEYCOMB_CALLBACK
view_delegate_get_maximum_size(struct _honey_view_delegate_t* self,
                               honey_view_t* view) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval = HoneycombViewDelegateCppToC::Get(self)->GetMaximumSize(
      HoneycombViewCToCpp::Wrap(view));

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK
view_delegate_get_height_for_width(struct _honey_view_delegate_t* self,
                                   honey_view_t* view,
                                   int width) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return 0;
  }

  // Execute
  int _retval = HoneycombViewDelegateCppToC::Get(self)->GetHeightForWidth(
      HoneycombViewCToCpp::Wrap(view), width);

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
view_delegate_on_parent_view_changed(struct _honey_view_delegate_t* self,
                                     honey_view_t* view,
                                     int added,
                                     honey_view_t* parent) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return;
  }
  // Verify param: parent; type: refptr_diff
  DCHECK(parent);
  if (!parent) {
    return;
  }

  // Execute
  HoneycombViewDelegateCppToC::Get(self)->OnParentViewChanged(
      HoneycombViewCToCpp::Wrap(view), added ? true : false,
      HoneycombViewCToCpp::Wrap(parent));
}

void HONEYCOMB_CALLBACK
view_delegate_on_child_view_changed(struct _honey_view_delegate_t* self,
                                    honey_view_t* view,
                                    int added,
                                    honey_view_t* child) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return;
  }
  // Verify param: child; type: refptr_diff
  DCHECK(child);
  if (!child) {
    return;
  }

  // Execute
  HoneycombViewDelegateCppToC::Get(self)->OnChildViewChanged(
      HoneycombViewCToCpp::Wrap(view), added ? true : false,
      HoneycombViewCToCpp::Wrap(child));
}

void HONEYCOMB_CALLBACK
view_delegate_on_window_changed(struct _honey_view_delegate_t* self,
                                honey_view_t* view,
                                int added) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return;
  }

  // Execute
  HoneycombViewDelegateCppToC::Get(self)->OnWindowChanged(HoneycombViewCToCpp::Wrap(view),
                                                    added ? true : false);
}

void HONEYCOMB_CALLBACK
view_delegate_on_layout_changed(struct _honey_view_delegate_t* self,
                                honey_view_t* view,
                                const honey_rect_t* new_bounds) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return;
  }
  // Verify param: new_bounds; type: simple_byref_const
  DCHECK(new_bounds);
  if (!new_bounds) {
    return;
  }

  // Translate param: new_bounds; type: simple_byref_const
  HoneycombRect new_boundsVal = new_bounds ? *new_bounds : HoneycombRect();

  // Execute
  HoneycombViewDelegateCppToC::Get(self)->OnLayoutChanged(HoneycombViewCToCpp::Wrap(view),
                                                    new_boundsVal);
}

void HONEYCOMB_CALLBACK view_delegate_on_focus(struct _honey_view_delegate_t* self,
                                         honey_view_t* view) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return;
  }

  // Execute
  HoneycombViewDelegateCppToC::Get(self)->OnFocus(HoneycombViewCToCpp::Wrap(view));
}

void HONEYCOMB_CALLBACK view_delegate_on_blur(struct _honey_view_delegate_t* self,
                                        honey_view_t* view) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_diff
  DCHECK(view);
  if (!view) {
    return;
  }

  // Execute
  HoneycombViewDelegateCppToC::Get(self)->OnBlur(HoneycombViewCToCpp::Wrap(view));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombViewDelegateCppToC::HoneycombViewDelegateCppToC() {
  GetStruct()->get_preferred_size = view_delegate_get_preferred_size;
  GetStruct()->get_minimum_size = view_delegate_get_minimum_size;
  GetStruct()->get_maximum_size = view_delegate_get_maximum_size;
  GetStruct()->get_height_for_width = view_delegate_get_height_for_width;
  GetStruct()->on_parent_view_changed = view_delegate_on_parent_view_changed;
  GetStruct()->on_child_view_changed = view_delegate_on_child_view_changed;
  GetStruct()->on_window_changed = view_delegate_on_window_changed;
  GetStruct()->on_layout_changed = view_delegate_on_layout_changed;
  GetStruct()->on_focus = view_delegate_on_focus;
  GetStruct()->on_blur = view_delegate_on_blur;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombViewDelegateCppToC::~HoneycombViewDelegateCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombViewDelegate> HoneycombCppToCRefCounted<
    HoneycombViewDelegateCppToC,
    HoneycombViewDelegate,
    honey_view_delegate_t>::UnwrapDerived(HoneycombWrapperType type,
                                        honey_view_delegate_t* s) {
  if (type == WT_BROWSER_VIEW_DELEGATE) {
    return HoneycombBrowserViewDelegateCppToC::Unwrap(
        reinterpret_cast<honey_browser_view_delegate_t*>(s));
  }
  if (type == WT_BUTTON_DELEGATE) {
    return HoneycombButtonDelegateCppToC::Unwrap(
        reinterpret_cast<honey_button_delegate_t*>(s));
  }
  if (type == WT_MENU_BUTTON_DELEGATE) {
    return HoneycombMenuButtonDelegateCppToC::Unwrap(
        reinterpret_cast<honey_menu_button_delegate_t*>(s));
  }
  if (type == WT_PANEL_DELEGATE) {
    return HoneycombPanelDelegateCppToC::Unwrap(
        reinterpret_cast<honey_panel_delegate_t*>(s));
  }
  if (type == WT_TEXTFIELD_DELEGATE) {
    return HoneycombTextfieldDelegateCppToC::Unwrap(
        reinterpret_cast<honey_textfield_delegate_t*>(s));
  }
  if (type == WT_WINDOW_DELEGATE) {
    return HoneycombWindowDelegateCppToC::Unwrap(
        reinterpret_cast<honey_window_delegate_t*>(s));
  }
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombViewDelegateCppToC,
                                   HoneycombViewDelegate,
                                   honey_view_delegate_t>::kWrapperType =
    WT_VIEW_DELEGATE;
