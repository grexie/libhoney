// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=06e55741773f12f9804a5f981f94a010e5293e14$
//

#include "libhoneycomb_dll/cpptoc/v8context_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/browser_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/frame_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/task_runner_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/v8exception_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/v8value_cpptoc.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_v8context_t* honey_v8context_get_current_context() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombV8Context> _retval = HoneycombV8Context::GetCurrentContext();

  // Return type: refptr_same
  return HoneycombV8ContextCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT honey_v8context_t* honey_v8context_get_entered_context() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombV8Context> _retval = HoneycombV8Context::GetEnteredContext();

  // Return type: refptr_same
  return HoneycombV8ContextCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT int honey_v8context_in_context() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  bool _retval = HoneycombV8Context::InContext();

  // Return type: bool
  return _retval;
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_task_runner_t* HONEYCOMB_CALLBACK
v8context_get_task_runner(struct _honey_v8context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombTaskRunner> _retval =
      HoneycombV8ContextCppToC::Get(self)->GetTaskRunner();

  // Return type: refptr_same
  return HoneycombTaskRunnerCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK v8context_is_valid(struct _honey_v8context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombV8ContextCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

honey_browser_t* HONEYCOMB_CALLBACK
v8context_get_browser(struct _honey_v8context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBrowser> _retval = HoneycombV8ContextCppToC::Get(self)->GetBrowser();

  // Return type: refptr_same
  return HoneycombBrowserCppToC::Wrap(_retval);
}

honey_frame_t* HONEYCOMB_CALLBACK v8context_get_frame(struct _honey_v8context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombFrame> _retval = HoneycombV8ContextCppToC::Get(self)->GetFrame();

  // Return type: refptr_same
  return HoneycombFrameCppToC::Wrap(_retval);
}

struct _honey_v8value_t* HONEYCOMB_CALLBACK
v8context_get_global(struct _honey_v8context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombV8Value> _retval = HoneycombV8ContextCppToC::Get(self)->GetGlobal();

  // Return type: refptr_same
  return HoneycombV8ValueCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK v8context_enter(struct _honey_v8context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombV8ContextCppToC::Get(self)->Enter();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK v8context_exit(struct _honey_v8context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombV8ContextCppToC::Get(self)->Exit();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK v8context_is_same(struct _honey_v8context_t* self,
                                   struct _honey_v8context_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombV8ContextCppToC::Get(self)->IsSame(HoneycombV8ContextCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK v8context_eval(struct _honey_v8context_t* self,
                                const honey_string_t* code,
                                const honey_string_t* script_url,
                                int start_line,
                                struct _honey_v8value_t** retval,
                                struct _honey_v8exception_t** exception) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: code; type: string_byref_const
  DCHECK(code);
  if (!code) {
    return 0;
  }
  // Verify param: retval; type: refptr_same_byref
  DCHECK(retval);
  if (!retval) {
    return 0;
  }
  // Verify param: exception; type: refptr_same_byref
  DCHECK(exception);
  if (!exception) {
    return 0;
  }
  // Unverified params: script_url

  // Translate param: retval; type: refptr_same_byref
  HoneycombRefPtr<HoneycombV8Value> retvalPtr;
  if (retval && *retval) {
    retvalPtr = HoneycombV8ValueCppToC::Unwrap(*retval);
  }
  HoneycombV8Value* retvalOrig = retvalPtr.get();
  // Translate param: exception; type: refptr_same_byref
  HoneycombRefPtr<HoneycombV8Exception> exceptionPtr;
  if (exception && *exception) {
    exceptionPtr = HoneycombV8ExceptionCppToC::Unwrap(*exception);
  }
  HoneycombV8Exception* exceptionOrig = exceptionPtr.get();

  // Execute
  bool _retval = HoneycombV8ContextCppToC::Get(self)->Eval(
      HoneycombString(code), HoneycombString(script_url), start_line, retvalPtr,
      exceptionPtr);

  // Restore param: retval; type: refptr_same_byref
  if (retval) {
    if (retvalPtr.get()) {
      if (retvalPtr.get() != retvalOrig) {
        *retval = HoneycombV8ValueCppToC::Wrap(retvalPtr);
      }
    } else {
      *retval = nullptr;
    }
  }
  // Restore param: exception; type: refptr_same_byref
  if (exception) {
    if (exceptionPtr.get()) {
      if (exceptionPtr.get() != exceptionOrig) {
        *exception = HoneycombV8ExceptionCppToC::Wrap(exceptionPtr);
      }
    } else {
      *exception = nullptr;
    }
  }

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombV8ContextCppToC::HoneycombV8ContextCppToC() {
  GetStruct()->get_task_runner = v8context_get_task_runner;
  GetStruct()->is_valid = v8context_is_valid;
  GetStruct()->get_browser = v8context_get_browser;
  GetStruct()->get_frame = v8context_get_frame;
  GetStruct()->get_global = v8context_get_global;
  GetStruct()->enter = v8context_enter;
  GetStruct()->exit = v8context_exit;
  GetStruct()->is_same = v8context_is_same;
  GetStruct()->eval = v8context_eval;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombV8ContextCppToC::~HoneycombV8ContextCppToC() {}

template <>
HoneycombRefPtr<HoneycombV8Context>
HoneycombCppToCRefCounted<HoneycombV8ContextCppToC, HoneycombV8Context, honey_v8context_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_v8context_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombV8ContextCppToC,
                                   HoneycombV8Context,
                                   honey_v8context_t>::kWrapperType =
    WT_V8CONTEXT;
