// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=994446939847e01ee1c2ce3b3c3f1988bbe97a10$
//

#include "libhoneycomb_dll/cpptoc/v8stack_trace_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/v8stack_frame_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_v8stack_trace_t* honey_v8stack_trace_get_current(int frame_limit) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombV8StackTrace> _retval = HoneycombV8StackTrace::GetCurrent(frame_limit);

  // Return type: refptr_same
  return HoneycombV8StackTraceCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK v8stack_trace_is_valid(struct _honey_v8stack_trace_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombV8StackTraceCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
v8stack_trace_get_frame_count(struct _honey_v8stack_trace_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombV8StackTraceCppToC::Get(self)->GetFrameCount();

  // Return type: simple
  return _retval;
}

struct _honey_v8stack_frame_t* HONEYCOMB_CALLBACK
v8stack_trace_get_frame(struct _honey_v8stack_trace_t* self, int index) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombV8StackFrame> _retval =
      HoneycombV8StackTraceCppToC::Get(self)->GetFrame(index);

  // Return type: refptr_same
  return HoneycombV8StackFrameCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombV8StackTraceCppToC::HoneycombV8StackTraceCppToC() {
  GetStruct()->is_valid = v8stack_trace_is_valid;
  GetStruct()->get_frame_count = v8stack_trace_get_frame_count;
  GetStruct()->get_frame = v8stack_trace_get_frame;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombV8StackTraceCppToC::~HoneycombV8StackTraceCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombV8StackTrace> HoneycombCppToCRefCounted<
    HoneycombV8StackTraceCppToC,
    HoneycombV8StackTrace,
    honey_v8stack_trace_t>::UnwrapDerived(HoneycombWrapperType type,
                                        honey_v8stack_trace_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombV8StackTraceCppToC,
                                   HoneycombV8StackTrace,
                                   honey_v8stack_trace_t>::kWrapperType =
    WT_V8STACK_TRACE;
