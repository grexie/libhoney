// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=41a3981a7d293d6a13bba9961192d4fc7f0a49f1$
//

#include "libhoneycomb_dll/cpptoc/render_process_handler_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/load_handler_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/browser_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/dictionary_value_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/domnode_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/frame_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/process_message_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/v8context_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/v8exception_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/v8stack_trace_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK render_process_handler_on_web_kit_initialized(
    struct _honey_render_process_handler_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombRenderProcessHandlerCppToC::Get(self)->OnWebKitInitialized();
}

void HONEYCOMB_CALLBACK render_process_handler_on_browser_created(
    struct _honey_render_process_handler_t* self,
    honey_browser_t* browser,
    struct _honey_dictionary_value_t* extra_info) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }
  // Unverified params: extra_info

  // Execute
  HoneycombRenderProcessHandlerCppToC::Get(self)->OnBrowserCreated(
      HoneycombBrowserCToCpp::Wrap(browser),
      HoneycombDictionaryValueCToCpp::Wrap(extra_info));
}

void HONEYCOMB_CALLBACK render_process_handler_on_browser_destroyed(
    struct _honey_render_process_handler_t* self,
    honey_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }

  // Execute
  HoneycombRenderProcessHandlerCppToC::Get(self)->OnBrowserDestroyed(
      HoneycombBrowserCToCpp::Wrap(browser));
}

honey_load_handler_t* HONEYCOMB_CALLBACK render_process_handler_get_load_handler(
    struct _honey_render_process_handler_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombLoadHandler> _retval =
      HoneycombRenderProcessHandlerCppToC::Get(self)->GetLoadHandler();

  // Return type: refptr_same
  return HoneycombLoadHandlerCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK render_process_handler_on_context_created(
    struct _honey_render_process_handler_t* self,
    honey_browser_t* browser,
    honey_frame_t* frame,
    struct _honey_v8context_t* context) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame);
  if (!frame) {
    return;
  }
  // Verify param: context; type: refptr_diff
  DCHECK(context);
  if (!context) {
    return;
  }

  // Execute
  HoneycombRenderProcessHandlerCppToC::Get(self)->OnContextCreated(
      HoneycombBrowserCToCpp::Wrap(browser), HoneycombFrameCToCpp::Wrap(frame),
      HoneycombV8ContextCToCpp::Wrap(context));
}

void HONEYCOMB_CALLBACK render_process_handler_on_context_released(
    struct _honey_render_process_handler_t* self,
    honey_browser_t* browser,
    honey_frame_t* frame,
    struct _honey_v8context_t* context) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame);
  if (!frame) {
    return;
  }
  // Verify param: context; type: refptr_diff
  DCHECK(context);
  if (!context) {
    return;
  }

  // Execute
  HoneycombRenderProcessHandlerCppToC::Get(self)->OnContextReleased(
      HoneycombBrowserCToCpp::Wrap(browser), HoneycombFrameCToCpp::Wrap(frame),
      HoneycombV8ContextCToCpp::Wrap(context));
}

void HONEYCOMB_CALLBACK render_process_handler_on_uncaught_exception(
    struct _honey_render_process_handler_t* self,
    honey_browser_t* browser,
    honey_frame_t* frame,
    struct _honey_v8context_t* context,
    struct _honey_v8exception_t* exception,
    struct _honey_v8stack_trace_t* stackTrace) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame);
  if (!frame) {
    return;
  }
  // Verify param: context; type: refptr_diff
  DCHECK(context);
  if (!context) {
    return;
  }
  // Verify param: exception; type: refptr_diff
  DCHECK(exception);
  if (!exception) {
    return;
  }
  // Verify param: stackTrace; type: refptr_diff
  DCHECK(stackTrace);
  if (!stackTrace) {
    return;
  }

  // Execute
  HoneycombRenderProcessHandlerCppToC::Get(self)->OnUncaughtException(
      HoneycombBrowserCToCpp::Wrap(browser), HoneycombFrameCToCpp::Wrap(frame),
      HoneycombV8ContextCToCpp::Wrap(context), HoneycombV8ExceptionCToCpp::Wrap(exception),
      HoneycombV8StackTraceCToCpp::Wrap(stackTrace));
}

void HONEYCOMB_CALLBACK render_process_handler_on_focused_node_changed(
    struct _honey_render_process_handler_t* self,
    honey_browser_t* browser,
    honey_frame_t* frame,
    honey_domnode_t* node) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }
  // Unverified params: frame, node

  // Execute
  HoneycombRenderProcessHandlerCppToC::Get(self)->OnFocusedNodeChanged(
      HoneycombBrowserCToCpp::Wrap(browser), HoneycombFrameCToCpp::Wrap(frame),
      HoneycombDOMNodeCToCpp::Wrap(node));
}

int HONEYCOMB_CALLBACK render_process_handler_on_process_message_received(
    struct _honey_render_process_handler_t* self,
    honey_browser_t* browser,
    honey_frame_t* frame,
    honey_process_id_t source_process,
    honey_process_message_t* message) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return 0;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame);
  if (!frame) {
    return 0;
  }
  // Verify param: message; type: refptr_diff
  DCHECK(message);
  if (!message) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombRenderProcessHandlerCppToC::Get(self)->OnProcessMessageReceived(
          HoneycombBrowserCToCpp::Wrap(browser), HoneycombFrameCToCpp::Wrap(frame),
          source_process, HoneycombProcessMessageCToCpp::Wrap(message));

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombRenderProcessHandlerCppToC::HoneycombRenderProcessHandlerCppToC() {
  GetStruct()->on_web_kit_initialized =
      render_process_handler_on_web_kit_initialized;
  GetStruct()->on_browser_created = render_process_handler_on_browser_created;
  GetStruct()->on_browser_destroyed =
      render_process_handler_on_browser_destroyed;
  GetStruct()->get_load_handler = render_process_handler_get_load_handler;
  GetStruct()->on_context_created = render_process_handler_on_context_created;
  GetStruct()->on_context_released = render_process_handler_on_context_released;
  GetStruct()->on_uncaught_exception =
      render_process_handler_on_uncaught_exception;
  GetStruct()->on_focused_node_changed =
      render_process_handler_on_focused_node_changed;
  GetStruct()->on_process_message_received =
      render_process_handler_on_process_message_received;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombRenderProcessHandlerCppToC::~HoneycombRenderProcessHandlerCppToC() {}

template <>
HoneycombRefPtr<HoneycombRenderProcessHandler> HoneycombCppToCRefCounted<
    HoneycombRenderProcessHandlerCppToC,
    HoneycombRenderProcessHandler,
    honey_render_process_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                                 honey_render_process_handler_t*
                                                     s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombRenderProcessHandlerCppToC,
                                   HoneycombRenderProcessHandler,
                                   honey_render_process_handler_t>::kWrapperType =
    WT_RENDER_PROCESS_HANDLER;
