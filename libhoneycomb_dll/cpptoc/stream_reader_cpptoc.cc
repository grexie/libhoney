// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=2a09370f896a73d7e617fb4f6d856b89db0d5531$
//

#include "libhoneycomb_dll/cpptoc/stream_reader_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/read_handler_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_stream_reader_t* honey_stream_reader_create_for_file(
    const honey_string_t* fileName) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: fileName; type: string_byref_const
  DCHECK(fileName);
  if (!fileName) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombStreamReader> _retval =
      HoneycombStreamReader::CreateForFile(HoneycombString(fileName));

  // Return type: refptr_same
  return HoneycombStreamReaderCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT honey_stream_reader_t* honey_stream_reader_create_for_data(void* data,
                                                                  size_t size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: data; type: simple_byaddr
  DCHECK(data);
  if (!data) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombStreamReader> _retval =
      HoneycombStreamReader::CreateForData(data, size);

  // Return type: refptr_same
  return HoneycombStreamReaderCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT honey_stream_reader_t* honey_stream_reader_create_for_handler(
    honey_read_handler_t* handler) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: handler; type: refptr_diff
  DCHECK(handler);
  if (!handler) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombStreamReader> _retval =
      HoneycombStreamReader::CreateForHandler(HoneycombReadHandlerCToCpp::Wrap(handler));

  // Return type: refptr_same
  return HoneycombStreamReaderCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

size_t HONEYCOMB_CALLBACK stream_reader_read(struct _honey_stream_reader_t* self,
                                       void* ptr,
                                       size_t size,
                                       size_t n) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: ptr; type: simple_byaddr
  DCHECK(ptr);
  if (!ptr) {
    return 0;
  }

  // Execute
  size_t _retval = HoneycombStreamReaderCppToC::Get(self)->Read(ptr, size, n);

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK stream_reader_seek(struct _honey_stream_reader_t* self,
                                    int64_t offset,
                                    int whence) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombStreamReaderCppToC::Get(self)->Seek(offset, whence);

  // Return type: simple
  return _retval;
}

int64_t HONEYCOMB_CALLBACK stream_reader_tell(struct _honey_stream_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int64_t _retval = HoneycombStreamReaderCppToC::Get(self)->Tell();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK stream_reader_eof(struct _honey_stream_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombStreamReaderCppToC::Get(self)->Eof();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK stream_reader_may_block(struct _honey_stream_reader_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombStreamReaderCppToC::Get(self)->MayBlock();

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombStreamReaderCppToC::HoneycombStreamReaderCppToC() {
  GetStruct()->read = stream_reader_read;
  GetStruct()->seek = stream_reader_seek;
  GetStruct()->tell = stream_reader_tell;
  GetStruct()->eof = stream_reader_eof;
  GetStruct()->may_block = stream_reader_may_block;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombStreamReaderCppToC::~HoneycombStreamReaderCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombStreamReader> HoneycombCppToCRefCounted<
    HoneycombStreamReaderCppToC,
    HoneycombStreamReader,
    honey_stream_reader_t>::UnwrapDerived(HoneycombWrapperType type,
                                        honey_stream_reader_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombStreamReaderCppToC,
                                   HoneycombStreamReader,
                                   honey_stream_reader_t>::kWrapperType =
    WT_STREAM_READER;
