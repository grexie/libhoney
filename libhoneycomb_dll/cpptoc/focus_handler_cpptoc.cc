// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=0c39dbbfcbc1d5722ea173a74d287e752f7acfc8$
//

#include "libhoneycomb_dll/cpptoc/focus_handler_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/browser_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK focus_handler_on_take_focus(struct _honey_focus_handler_t* self,
                                              honey_browser_t* browser,
                                              int next) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }

  // Execute
  HoneycombFocusHandlerCppToC::Get(self)->OnTakeFocus(HoneycombBrowserCToCpp::Wrap(browser),
                                                next ? true : false);
}

int HONEYCOMB_CALLBACK focus_handler_on_set_focus(struct _honey_focus_handler_t* self,
                                            honey_browser_t* browser,
                                            honey_focus_source_t source) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombFocusHandlerCppToC::Get(self)->OnSetFocus(
      HoneycombBrowserCToCpp::Wrap(browser), source);

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK focus_handler_on_got_focus(struct _honey_focus_handler_t* self,
                                             honey_browser_t* browser) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }

  // Execute
  HoneycombFocusHandlerCppToC::Get(self)->OnGotFocus(HoneycombBrowserCToCpp::Wrap(browser));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombFocusHandlerCppToC::HoneycombFocusHandlerCppToC() {
  GetStruct()->on_take_focus = focus_handler_on_take_focus;
  GetStruct()->on_set_focus = focus_handler_on_set_focus;
  GetStruct()->on_got_focus = focus_handler_on_got_focus;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombFocusHandlerCppToC::~HoneycombFocusHandlerCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombFocusHandler> HoneycombCppToCRefCounted<
    HoneycombFocusHandlerCppToC,
    HoneycombFocusHandler,
    honey_focus_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                        honey_focus_handler_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombFocusHandlerCppToC,
                                   HoneycombFocusHandler,
                                   honey_focus_handler_t>::kWrapperType =
    WT_FOCUS_HANDLER;
