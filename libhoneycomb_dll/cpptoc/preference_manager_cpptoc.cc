// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=ea61753d9dc6c4e0e95db78e2f0d07ab0d65c769$
//

#include "libhoneycomb_dll/cpptoc/preference_manager_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/dictionary_value_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/request_context_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/value_cpptoc.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_preference_manager_t* honey_preference_manager_get_global() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombPreferenceManager> _retval =
      HoneycombPreferenceManager::GetGlobalPreferenceManager();

  // Return type: refptr_same
  return HoneycombPreferenceManagerCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK
preference_manager_has_preference(struct _honey_preference_manager_t* self,
                                  const honey_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombPreferenceManagerCppToC::Get(self)->HasPreference(HoneycombString(name));

  // Return type: bool
  return _retval;
}

struct _honey_value_t* HONEYCOMB_CALLBACK
preference_manager_get_preference(struct _honey_preference_manager_t* self,
                                  const honey_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombValue> _retval =
      HoneycombPreferenceManagerCppToC::Get(self)->GetPreference(HoneycombString(name));

  // Return type: refptr_same
  return HoneycombValueCppToC::Wrap(_retval);
}

struct _honey_dictionary_value_t* HONEYCOMB_CALLBACK
preference_manager_get_all_preferences(struct _honey_preference_manager_t* self,
                                       int include_defaults) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDictionaryValue> _retval =
      HoneycombPreferenceManagerCppToC::Get(self)->GetAllPreferences(
          include_defaults ? true : false);

  // Return type: refptr_same
  return HoneycombDictionaryValueCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK
preference_manager_can_set_preference(struct _honey_preference_manager_t* self,
                                      const honey_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombPreferenceManagerCppToC::Get(self)->CanSetPreference(HoneycombString(name));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
preference_manager_set_preference(struct _honey_preference_manager_t* self,
                                  const honey_string_t* name,
                                  struct _honey_value_t* value,
                                  honey_string_t* error) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }
  // Verify param: error; type: string_byref
  DCHECK(error);
  if (!error) {
    return 0;
  }
  // Unverified params: value

  // Translate param: error; type: string_byref
  HoneycombString errorStr(error);

  // Execute
  bool _retval = HoneycombPreferenceManagerCppToC::Get(self)->SetPreference(
      HoneycombString(name), HoneycombValueCppToC::Unwrap(value), errorStr);

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombPreferenceManagerCppToC::HoneycombPreferenceManagerCppToC() {
  GetStruct()->has_preference = preference_manager_has_preference;
  GetStruct()->get_preference = preference_manager_get_preference;
  GetStruct()->get_all_preferences = preference_manager_get_all_preferences;
  GetStruct()->can_set_preference = preference_manager_can_set_preference;
  GetStruct()->set_preference = preference_manager_set_preference;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombPreferenceManagerCppToC::~HoneycombPreferenceManagerCppToC() {}

template <>
HoneycombRefPtr<HoneycombPreferenceManager> HoneycombCppToCRefCounted<
    HoneycombPreferenceManagerCppToC,
    HoneycombPreferenceManager,
    honey_preference_manager_t>::UnwrapDerived(HoneycombWrapperType type,
                                             honey_preference_manager_t* s) {
  if (type == WT_REQUEST_CONTEXT) {
    return HoneycombRequestContextCppToC::Unwrap(
        reinterpret_cast<honey_request_context_t*>(s));
  }
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombPreferenceManagerCppToC,
                                   HoneycombPreferenceManager,
                                   honey_preference_manager_t>::kWrapperType =
    WT_PREFERENCE_MANAGER;
