// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=cd09888724297c57eac0b71ebbe54e097588cfd2$
//

#include "libhoneycomb_dll/cpptoc/resource_skip_callback_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK
resource_skip_callback_cont(struct _honey_resource_skip_callback_t* self,
                            int64_t bytes_skipped) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombResourceSkipCallbackCppToC::Get(self)->Continue(bytes_skipped);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombResourceSkipCallbackCppToC::HoneycombResourceSkipCallbackCppToC() {
  GetStruct()->cont = resource_skip_callback_cont;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombResourceSkipCallbackCppToC::~HoneycombResourceSkipCallbackCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombResourceSkipCallback> HoneycombCppToCRefCounted<
    HoneycombResourceSkipCallbackCppToC,
    HoneycombResourceSkipCallback,
    honey_resource_skip_callback_t>::UnwrapDerived(HoneycombWrapperType type,
                                                 honey_resource_skip_callback_t*
                                                     s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombResourceSkipCallbackCppToC,
                                   HoneycombResourceSkipCallback,
                                   honey_resource_skip_callback_t>::kWrapperType =
    WT_RESOURCE_SKIP_CALLBACK;
