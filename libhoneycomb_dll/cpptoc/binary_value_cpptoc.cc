// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=905b24443e08e2d3e2464d5f4138e97904be3e9e$
//

#include "libhoneycomb_dll/cpptoc/binary_value_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_binary_value_t* honey_binary_value_create(const void* data,
                                                       size_t data_size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: data; type: simple_byaddr
  DCHECK(data);
  if (!data) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBinaryValue> _retval = HoneycombBinaryValue::Create(data, data_size);

  // Return type: refptr_same
  return HoneycombBinaryValueCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK binary_value_is_valid(struct _honey_binary_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombBinaryValueCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK binary_value_is_owned(struct _honey_binary_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombBinaryValueCppToC::Get(self)->IsOwned();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK binary_value_is_same(struct _honey_binary_value_t* self,
                                      struct _honey_binary_value_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombBinaryValueCppToC::Get(self)->IsSame(
      HoneycombBinaryValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK binary_value_is_equal(struct _honey_binary_value_t* self,
                                       struct _honey_binary_value_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombBinaryValueCppToC::Get(self)->IsEqual(
      HoneycombBinaryValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _honey_binary_value_t* HONEYCOMB_CALLBACK
binary_value_copy(struct _honey_binary_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBinaryValue> _retval = HoneycombBinaryValueCppToC::Get(self)->Copy();

  // Return type: refptr_same
  return HoneycombBinaryValueCppToC::Wrap(_retval);
}

size_t HONEYCOMB_CALLBACK binary_value_get_size(struct _honey_binary_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  size_t _retval = HoneycombBinaryValueCppToC::Get(self)->GetSize();

  // Return type: simple
  return _retval;
}

size_t HONEYCOMB_CALLBACK binary_value_get_data(struct _honey_binary_value_t* self,
                                          void* buffer,
                                          size_t buffer_size,
                                          size_t data_offset) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: buffer; type: simple_byaddr
  DCHECK(buffer);
  if (!buffer) {
    return 0;
  }

  // Execute
  size_t _retval = HoneycombBinaryValueCppToC::Get(self)->GetData(buffer, buffer_size,
                                                            data_offset);

  // Return type: simple
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombBinaryValueCppToC::HoneycombBinaryValueCppToC() {
  GetStruct()->is_valid = binary_value_is_valid;
  GetStruct()->is_owned = binary_value_is_owned;
  GetStruct()->is_same = binary_value_is_same;
  GetStruct()->is_equal = binary_value_is_equal;
  GetStruct()->copy = binary_value_copy;
  GetStruct()->get_size = binary_value_get_size;
  GetStruct()->get_data = binary_value_get_data;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombBinaryValueCppToC::~HoneycombBinaryValueCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombBinaryValue>
HoneycombCppToCRefCounted<HoneycombBinaryValueCppToC, HoneycombBinaryValue, honey_binary_value_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_binary_value_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombBinaryValueCppToC,
                                   HoneycombBinaryValue,
                                   honey_binary_value_t>::kWrapperType =
    WT_BINARY_VALUE;
