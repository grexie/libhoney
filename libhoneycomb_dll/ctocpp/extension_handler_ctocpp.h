// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=5e432e7dd8e10b681b96bad3694ba2d0bf79fad6$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_EXTENSION_HANDLER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_EXTENSION_HANDLER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_client_capi.h"
#include "include/capi/honey_extension_handler_capi.h"
#include "include/honey_client.h"
#include "include/honey_extension_handler.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombExtensionHandlerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombExtensionHandlerCToCpp,
                                 HoneycombExtensionHandler,
                                 honey_extension_handler_t> {
 public:
  HoneycombExtensionHandlerCToCpp();
  virtual ~HoneycombExtensionHandlerCToCpp();

  // HoneycombExtensionHandler methods.
  void OnExtensionLoadFailed(honey_errorcode_t result) override;
  void OnExtensionLoaded(HoneycombRefPtr<HoneycombExtension> extension) override;
  void OnExtensionUnloaded(HoneycombRefPtr<HoneycombExtension> extension) override;
  bool OnBeforeBackgroundBrowser(HoneycombRefPtr<HoneycombExtension> extension,
                                 const HoneycombString& url,
                                 HoneycombRefPtr<HoneycombClient>& client,
                                 HoneycombBrowserSettings& settings) override;
  bool OnBeforeBrowser(HoneycombRefPtr<HoneycombExtension> extension,
                       HoneycombRefPtr<HoneycombBrowser> browser,
                       HoneycombRefPtr<HoneycombBrowser> active_browser,
                       int index,
                       const HoneycombString& url,
                       bool active,
                       HoneycombWindowInfo& windowInfo,
                       HoneycombRefPtr<HoneycombClient>& client,
                       HoneycombBrowserSettings& settings) override;
  HoneycombRefPtr<HoneycombBrowser> GetActiveBrowser(HoneycombRefPtr<HoneycombExtension> extension,
                                         HoneycombRefPtr<HoneycombBrowser> browser,
                                         bool include_incognito) override;
  bool CanAccessBrowser(HoneycombRefPtr<HoneycombExtension> extension,
                        HoneycombRefPtr<HoneycombBrowser> browser,
                        bool include_incognito,
                        HoneycombRefPtr<HoneycombBrowser> target_browser) override;
  bool GetExtensionResource(
      HoneycombRefPtr<HoneycombExtension> extension,
      HoneycombRefPtr<HoneycombBrowser> browser,
      const HoneycombString& file,
      HoneycombRefPtr<HoneycombGetExtensionResourceCallback> callback) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_EXTENSION_HANDLER_CTOCPP_H_
