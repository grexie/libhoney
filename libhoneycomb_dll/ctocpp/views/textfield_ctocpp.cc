// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=96c0f67c377e496e3824d6dc13969a728c4d5cb6$
//

#include "libhoneycomb_dll/ctocpp/views/textfield_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/views/textfield_delegate_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/view_delegate_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/views/browser_view_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/button_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/panel_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/scroll_view_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/view_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/window_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombTextfield> HoneycombTextfield::CreateTextfield(
    HoneycombRefPtr<HoneycombTextfieldDelegate> delegate) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: delegate

  // Execute
  honey_textfield_t* _retval =
      honey_textfield_create(HoneycombTextfieldDelegateCppToC::Wrap(delegate));

  // Return type: refptr_same
  return HoneycombTextfieldCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetPasswordInput(bool password_input) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_password_input)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_password_input(_struct, password_input);
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsPasswordInput() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_password_input)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_password_input(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SetReadOnly(bool read_only) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_read_only)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_read_only(_struct, read_only);
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsReadOnly() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombTextfieldCToCpp::GetText() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_text)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_text(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetText(const HoneycombString& text) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: text; type: string_byref_const
  DCHECK(!text.empty());
  if (text.empty()) {
    return;
  }

  // Execute
  _struct->set_text(_struct, text.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::AppendText(const HoneycombString& text) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, append_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: text; type: string_byref_const
  DCHECK(!text.empty());
  if (text.empty()) {
    return;
  }

  // Execute
  _struct->append_text(_struct, text.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::InsertOrReplaceText(const HoneycombString& text) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, insert_or_replace_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: text; type: string_byref_const
  DCHECK(!text.empty());
  if (text.empty()) {
    return;
  }

  // Execute
  _struct->insert_or_replace_text(_struct, text.GetStruct());
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::HasSelection() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_selection)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->has_selection(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombTextfieldCToCpp::GetSelectedText() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_selected_text)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_selected_text(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SelectAll(bool reversed) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, select_all)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->select_all(_struct, reversed);
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::ClearSelection() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clear_selection)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->clear_selection(_struct);
}

NO_SANITIZE("cfi-icall") HoneycombRange HoneycombTextfieldCToCpp::GetSelectedRange() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_selected_range)) {
    return HoneycombRange();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_range_t _retval = _struct->get_selected_range(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SelectRange(const HoneycombRange& range) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, select_range)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->select_range(_struct, &range);
}

NO_SANITIZE("cfi-icall") size_t HoneycombTextfieldCToCpp::GetCursorPosition() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_cursor_position)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_cursor_position(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetTextColor(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_text_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_text_color(_struct, color);
}

NO_SANITIZE("cfi-icall") honey_color_t HoneycombTextfieldCToCpp::GetTextColor() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_text_color)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_color_t _retval = _struct->get_text_color(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetSelectionTextColor(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_selection_text_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_selection_text_color(_struct, color);
}

NO_SANITIZE("cfi-icall")
honey_color_t HoneycombTextfieldCToCpp::GetSelectionTextColor() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_selection_text_color)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_color_t _retval = _struct->get_selection_text_color(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetSelectionBackgroundColor(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_selection_background_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_selection_background_color(_struct, color);
}

NO_SANITIZE("cfi-icall")
honey_color_t HoneycombTextfieldCToCpp::GetSelectionBackgroundColor() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_selection_background_color)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_color_t _retval = _struct->get_selection_background_color(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetFontList(const HoneycombString& font_list) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_font_list)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: font_list; type: string_byref_const
  DCHECK(!font_list.empty());
  if (font_list.empty()) {
    return;
  }

  // Execute
  _struct->set_font_list(_struct, font_list.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::ApplyTextColor(honey_color_t color,
                                        const HoneycombRange& range) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, apply_text_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->apply_text_color(_struct, color, &range);
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::ApplyTextStyle(honey_text_style_t style,
                                        bool add,
                                        const HoneycombRange& range) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, apply_text_style)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->apply_text_style(_struct, style, add, &range);
}

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldCToCpp::IsCommandEnabled(
    honey_text_field_commands_t command_id) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_command_enabled)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_command_enabled(_struct, command_id);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::ExecuteCommand(honey_text_field_commands_t command_id) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, execute_command)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->execute_command(_struct, command_id);
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::ClearEditHistory() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clear_edit_history)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->clear_edit_history(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetPlaceholderText(const HoneycombString& text) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_placeholder_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: text; type: string_byref_const
  DCHECK(!text.empty());
  if (text.empty()) {
    return;
  }

  // Execute
  _struct->set_placeholder_text(_struct, text.GetStruct());
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombTextfieldCToCpp::GetPlaceholderText() {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_placeholder_text)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_placeholder_text(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetPlaceholderTextColor(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_placeholder_text_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_placeholder_text_color(_struct, color);
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetAccessibleName(const HoneycombString& name) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_accessible_name)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return;
  }

  // Execute
  _struct->set_accessible_name(_struct, name.GetStruct());
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBrowserView> HoneycombTextfieldCToCpp::AsBrowserView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_browser_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_browser_view_t* _retval = _struct->as_browser_view(_struct);

  // Return type: refptr_same
  return HoneycombBrowserViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombButton> HoneycombTextfieldCToCpp::AsButton() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_button)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_button_t* _retval = _struct->as_button(_struct);

  // Return type: refptr_same
  return HoneycombButtonCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombPanel> HoneycombTextfieldCToCpp::AsPanel() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_panel)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_panel_t* _retval = _struct->as_panel(_struct);

  // Return type: refptr_same
  return HoneycombPanelCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombScrollView> HoneycombTextfieldCToCpp::AsScrollView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_scroll_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_scroll_view_t* _retval = _struct->as_scroll_view(_struct);

  // Return type: refptr_same
  return HoneycombScrollViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombTextfield> HoneycombTextfieldCToCpp::AsTextfield() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_textfield)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_textfield_t* _retval = _struct->as_textfield(_struct);

  // Return type: refptr_same
  return HoneycombTextfieldCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombTextfieldCToCpp::GetTypeString() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_type_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_type_string(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombString HoneycombTextfieldCToCpp::ToString(bool include_children) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, to_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->to_string(_struct, include_children);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsAttached() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_attached)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_attached(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldCToCpp::IsSame(HoneycombRefPtr<HoneycombView> that) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombViewCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombViewDelegate> HoneycombTextfieldCToCpp::GetDelegate() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_delegate)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_delegate_t* _retval = _struct->get_delegate(_struct);

  // Return type: refptr_diff
  return HoneycombViewDelegateCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombWindow> HoneycombTextfieldCToCpp::GetWindow() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_window)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_window_t* _retval = _struct->get_window(_struct);

  // Return type: refptr_same
  return HoneycombWindowCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") int HoneycombTextfieldCToCpp::GetID() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SetID(int id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_id)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_id(_struct, id);
}

NO_SANITIZE("cfi-icall") int HoneycombTextfieldCToCpp::GetGroupID() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_group_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_group_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SetGroupID(int group_id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_group_id)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_group_id(_struct, group_id);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombTextfieldCToCpp::GetParentView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_parent_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_parent_view(_struct);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombTextfieldCToCpp::GetViewForID(int id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_view_for_id)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_view_for_id(_struct, id);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetBounds(const HoneycombRect& bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_bounds)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_bounds(_struct, &bounds);
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombTextfieldCToCpp::GetBounds() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombTextfieldCToCpp::GetBoundsInScreen() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds_in_screen)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds_in_screen(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SetSize(const HoneycombSize& size) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_size(_struct, &size);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombTextfieldCToCpp::GetSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetPosition(const HoneycombPoint& position) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_position)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_position(_struct, &position);
}

NO_SANITIZE("cfi-icall") HoneycombPoint HoneycombTextfieldCToCpp::GetPosition() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_position)) {
    return HoneycombPoint();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_point_t _retval = _struct->get_position(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetInsets(const HoneycombInsets& insets) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_insets)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_insets(_struct, &insets);
}

NO_SANITIZE("cfi-icall") HoneycombInsets HoneycombTextfieldCToCpp::GetInsets() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_insets)) {
    return HoneycombInsets();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_insets_t _retval = _struct->get_insets(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombTextfieldCToCpp::GetPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_preferred_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_preferred_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SizeToPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, size_to_preferred_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->size_to_preferred_size(_struct);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombTextfieldCToCpp::GetMinimumSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_minimum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_minimum_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombTextfieldCToCpp::GetMaximumSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_maximum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_maximum_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") int HoneycombTextfieldCToCpp::GetHeightForWidth(int width) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_height_for_width)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_height_for_width(_struct, width);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::InvalidateLayout() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, invalidate_layout)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->invalidate_layout(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SetVisible(bool visible) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_visible)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_visible(_struct, visible);
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsVisible() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_visible(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsDrawn() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_drawn)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_drawn(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SetEnabled(bool enabled) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_enabled)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_enabled(_struct, enabled);
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsEnabled() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_enabled)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_enabled(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::SetFocusable(bool focusable) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_focusable)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_focusable(_struct, focusable);
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsFocusable() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_focusable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_focusable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombTextfieldCToCpp::IsAccessibilityFocusable() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_accessibility_focusable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_accessibility_focusable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombTextfieldCToCpp::RequestFocus() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, request_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->request_focus(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldCToCpp::SetBackgroundColor(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_background_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_background_color(_struct, color);
}

NO_SANITIZE("cfi-icall") honey_color_t HoneycombTextfieldCToCpp::GetBackgroundColor() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_background_color)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_color_t _retval = _struct->get_background_color(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldCToCpp::ConvertPointToScreen(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_screen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_screen(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldCToCpp::ConvertPointFromScreen(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_screen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_screen(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldCToCpp::ConvertPointToWindow(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_window)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_window(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldCToCpp::ConvertPointFromWindow(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_window)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_window(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldCToCpp::ConvertPointToView(HoneycombRefPtr<HoneycombView> view,
                                            HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_view)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->convert_point_to_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldCToCpp::ConvertPointFromView(HoneycombRefPtr<HoneycombView> view,
                                              HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_view)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->convert_point_from_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), &point);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombTextfieldCToCpp::HoneycombTextfieldCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombTextfieldCToCpp::~HoneycombTextfieldCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_textfield_t*
HoneycombCToCppRefCounted<HoneycombTextfieldCToCpp, HoneycombTextfield, honey_textfield_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombTextfield* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombTextfieldCToCpp,
                                   HoneycombTextfield,
                                   honey_textfield_t>::kWrapperType =
    WT_TEXTFIELD;
