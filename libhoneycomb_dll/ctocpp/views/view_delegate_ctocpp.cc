// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=024caf54f7f453df5c9ff4e5b62f5f69960f6a1b$
//

#include "libhoneycomb_dll/ctocpp/views/view_delegate_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/views/view_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/views/browser_view_delegate_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/button_delegate_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/menu_button_delegate_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/panel_delegate_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/textfield_delegate_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/window_delegate_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombViewDelegateCToCpp::GetPreferredSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_preferred_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_preferred_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombViewDelegateCToCpp::GetMinimumSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_minimum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_minimum_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombViewDelegateCToCpp::GetMaximumSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_maximum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_maximum_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
int HoneycombViewDelegateCToCpp::GetHeightForWidth(HoneycombRefPtr<HoneycombView> view,
                                             int width) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_height_for_width)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return 0;
  }

  // Execute
  int _retval =
      _struct->get_height_for_width(_struct, HoneycombViewCppToC::Wrap(view), width);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombViewDelegateCToCpp::OnParentViewChanged(HoneycombRefPtr<HoneycombView> view,
                                                bool added,
                                                HoneycombRefPtr<HoneycombView> parent) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_parent_view_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }
  // Verify param: parent; type: refptr_diff
  DCHECK(parent.get());
  if (!parent.get()) {
    return;
  }

  // Execute
  _struct->on_parent_view_changed(_struct, HoneycombViewCppToC::Wrap(view), added,
                                  HoneycombViewCppToC::Wrap(parent));
}

NO_SANITIZE("cfi-icall")
void HoneycombViewDelegateCToCpp::OnChildViewChanged(HoneycombRefPtr<HoneycombView> view,
                                               bool added,
                                               HoneycombRefPtr<HoneycombView> child) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_child_view_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }
  // Verify param: child; type: refptr_diff
  DCHECK(child.get());
  if (!child.get()) {
    return;
  }

  // Execute
  _struct->on_child_view_changed(_struct, HoneycombViewCppToC::Wrap(view), added,
                                 HoneycombViewCppToC::Wrap(child));
}

NO_SANITIZE("cfi-icall")
void HoneycombViewDelegateCToCpp::OnWindowChanged(HoneycombRefPtr<HoneycombView> view,
                                            bool added) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_window_changed(_struct, HoneycombViewCppToC::Wrap(view), added);
}

NO_SANITIZE("cfi-icall")
void HoneycombViewDelegateCToCpp::OnLayoutChanged(HoneycombRefPtr<HoneycombView> view,
                                            const HoneycombRect& new_bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_layout_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_layout_changed(_struct, HoneycombViewCppToC::Wrap(view), &new_bounds);
}

NO_SANITIZE("cfi-icall")
void HoneycombViewDelegateCToCpp::OnFocus(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_focus(_struct, HoneycombViewCppToC::Wrap(view));
}

NO_SANITIZE("cfi-icall")
void HoneycombViewDelegateCToCpp::OnBlur(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_blur)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_blur(_struct, HoneycombViewCppToC::Wrap(view));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombViewDelegateCToCpp::HoneycombViewDelegateCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombViewDelegateCToCpp::~HoneycombViewDelegateCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_view_delegate_t*
HoneycombCToCppRefCounted<HoneycombViewDelegateCToCpp,
                    HoneycombViewDelegate,
                    honey_view_delegate_t>::UnwrapDerived(HoneycombWrapperType type,
                                                        HoneycombViewDelegate* c) {
  if (type == WT_BROWSER_VIEW_DELEGATE) {
    return reinterpret_cast<honey_view_delegate_t*>(
        HoneycombBrowserViewDelegateCToCpp::Unwrap(
            reinterpret_cast<HoneycombBrowserViewDelegate*>(c)));
  }
  if (type == WT_BUTTON_DELEGATE) {
    return reinterpret_cast<honey_view_delegate_t*>(
        HoneycombButtonDelegateCToCpp::Unwrap(
            reinterpret_cast<HoneycombButtonDelegate*>(c)));
  }
  if (type == WT_MENU_BUTTON_DELEGATE) {
    return reinterpret_cast<honey_view_delegate_t*>(
        HoneycombMenuButtonDelegateCToCpp::Unwrap(
            reinterpret_cast<HoneycombMenuButtonDelegate*>(c)));
  }
  if (type == WT_PANEL_DELEGATE) {
    return reinterpret_cast<honey_view_delegate_t*>(
        HoneycombPanelDelegateCToCpp::Unwrap(reinterpret_cast<HoneycombPanelDelegate*>(c)));
  }
  if (type == WT_TEXTFIELD_DELEGATE) {
    return reinterpret_cast<honey_view_delegate_t*>(
        HoneycombTextfieldDelegateCToCpp::Unwrap(
            reinterpret_cast<HoneycombTextfieldDelegate*>(c)));
  }
  if (type == WT_WINDOW_DELEGATE) {
    return reinterpret_cast<honey_view_delegate_t*>(
        HoneycombWindowDelegateCToCpp::Unwrap(
            reinterpret_cast<HoneycombWindowDelegate*>(c)));
  }
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombViewDelegateCToCpp,
                                   HoneycombViewDelegate,
                                   honey_view_delegate_t>::kWrapperType =
    WT_VIEW_DELEGATE;
