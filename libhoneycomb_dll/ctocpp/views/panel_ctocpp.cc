// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c757b375edf4dd35fb31c4ae81048aa795b2518b$
//

#include "libhoneycomb_dll/ctocpp/views/panel_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/views/panel_delegate_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/view_delegate_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/views/box_layout_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/browser_view_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/button_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/fill_layout_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/layout_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/scroll_view_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/textfield_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/view_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/window_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombPanel> HoneycombPanel::CreatePanel(
    HoneycombRefPtr<HoneycombPanelDelegate> delegate) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: delegate

  // Execute
  honey_panel_t* _retval =
      honey_panel_create(HoneycombPanelDelegateCppToC::Wrap(delegate));

  // Return type: refptr_same
  return HoneycombPanelCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombWindow> HoneycombPanelCToCpp::AsWindow() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_window)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_window_t* _retval = _struct->as_window(_struct);

  // Return type: refptr_same
  return HoneycombWindowCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombFillLayout> HoneycombPanelCToCpp::SetToFillLayout() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_to_fill_layout)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_fill_layout_t* _retval = _struct->set_to_fill_layout(_struct);

  // Return type: refptr_same
  return HoneycombFillLayoutCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBoxLayout> HoneycombPanelCToCpp::SetToBoxLayout(
    const HoneycombBoxLayoutSettings& settings) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_to_box_layout)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_box_layout_t* _retval = _struct->set_to_box_layout(_struct, &settings);

  // Return type: refptr_same
  return HoneycombBoxLayoutCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombLayout> HoneycombPanelCToCpp::GetLayout() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_layout)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_layout_t* _retval = _struct->get_layout(_struct);

  // Return type: refptr_same
  return HoneycombLayoutCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::Layout() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, layout)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->layout(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombPanelCToCpp::AddChildView(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_child_view)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->add_child_view(_struct, HoneycombViewCToCpp::Unwrap(view));
}

NO_SANITIZE("cfi-icall")
void HoneycombPanelCToCpp::AddChildViewAt(HoneycombRefPtr<HoneycombView> view, int index) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_child_view_at)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }
  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return;
  }

  // Execute
  _struct->add_child_view_at(_struct, HoneycombViewCToCpp::Unwrap(view), index);
}

NO_SANITIZE("cfi-icall")
void HoneycombPanelCToCpp::ReorderChildView(HoneycombRefPtr<HoneycombView> view, int index) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, reorder_child_view)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->reorder_child_view(_struct, HoneycombViewCToCpp::Unwrap(view), index);
}

NO_SANITIZE("cfi-icall")
void HoneycombPanelCToCpp::RemoveChildView(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, remove_child_view)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->remove_child_view(_struct, HoneycombViewCToCpp::Unwrap(view));
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::RemoveAllChildViews() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, remove_all_child_views)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->remove_all_child_views(_struct);
}

NO_SANITIZE("cfi-icall") size_t HoneycombPanelCToCpp::GetChildViewCount() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_child_view_count)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_child_view_count(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombPanelCToCpp::GetChildViewAt(int index) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_child_view_at)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return nullptr;
  }

  // Execute
  honey_view_t* _retval = _struct->get_child_view_at(_struct, index);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBrowserView> HoneycombPanelCToCpp::AsBrowserView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_browser_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_browser_view_t* _retval = _struct->as_browser_view(_struct);

  // Return type: refptr_same
  return HoneycombBrowserViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombButton> HoneycombPanelCToCpp::AsButton() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_button)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_button_t* _retval = _struct->as_button(_struct);

  // Return type: refptr_same
  return HoneycombButtonCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombPanel> HoneycombPanelCToCpp::AsPanel() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_panel)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_panel_t* _retval = _struct->as_panel(_struct);

  // Return type: refptr_same
  return HoneycombPanelCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombScrollView> HoneycombPanelCToCpp::AsScrollView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_scroll_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_scroll_view_t* _retval = _struct->as_scroll_view(_struct);

  // Return type: refptr_same
  return HoneycombScrollViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombTextfield> HoneycombPanelCToCpp::AsTextfield() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_textfield)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_textfield_t* _retval = _struct->as_textfield(_struct);

  // Return type: refptr_same
  return HoneycombTextfieldCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombPanelCToCpp::GetTypeString() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_type_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_type_string(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombString HoneycombPanelCToCpp::ToString(bool include_children) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, to_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->to_string(_struct, include_children);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") bool HoneycombPanelCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombPanelCToCpp::IsAttached() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_attached)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_attached(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombPanelCToCpp::IsSame(HoneycombRefPtr<HoneycombView> that) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombViewCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombViewDelegate> HoneycombPanelCToCpp::GetDelegate() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_delegate)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_delegate_t* _retval = _struct->get_delegate(_struct);

  // Return type: refptr_diff
  return HoneycombViewDelegateCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombWindow> HoneycombPanelCToCpp::GetWindow() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_window)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_window_t* _retval = _struct->get_window(_struct);

  // Return type: refptr_same
  return HoneycombWindowCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") int HoneycombPanelCToCpp::GetID() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::SetID(int id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_id)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_id(_struct, id);
}

NO_SANITIZE("cfi-icall") int HoneycombPanelCToCpp::GetGroupID() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_group_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_group_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::SetGroupID(int group_id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_group_id)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_group_id(_struct, group_id);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombView> HoneycombPanelCToCpp::GetParentView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_parent_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_parent_view(_struct);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombPanelCToCpp::GetViewForID(int id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_view_for_id)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_view_for_id(_struct, id);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::SetBounds(const HoneycombRect& bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_bounds)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_bounds(_struct, &bounds);
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombPanelCToCpp::GetBounds() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombPanelCToCpp::GetBoundsInScreen() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds_in_screen)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds_in_screen(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::SetSize(const HoneycombSize& size) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_size(_struct, &size);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombPanelCToCpp::GetSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombPanelCToCpp::SetPosition(const HoneycombPoint& position) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_position)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_position(_struct, &position);
}

NO_SANITIZE("cfi-icall") HoneycombPoint HoneycombPanelCToCpp::GetPosition() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_position)) {
    return HoneycombPoint();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_point_t _retval = _struct->get_position(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombPanelCToCpp::SetInsets(const HoneycombInsets& insets) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_insets)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_insets(_struct, &insets);
}

NO_SANITIZE("cfi-icall") HoneycombInsets HoneycombPanelCToCpp::GetInsets() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_insets)) {
    return HoneycombInsets();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_insets_t _retval = _struct->get_insets(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombPanelCToCpp::GetPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_preferred_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_preferred_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::SizeToPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, size_to_preferred_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->size_to_preferred_size(_struct);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombPanelCToCpp::GetMinimumSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_minimum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_minimum_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombPanelCToCpp::GetMaximumSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_maximum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_maximum_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") int HoneycombPanelCToCpp::GetHeightForWidth(int width) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_height_for_width)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_height_for_width(_struct, width);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::InvalidateLayout() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, invalidate_layout)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->invalidate_layout(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::SetVisible(bool visible) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_visible)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_visible(_struct, visible);
}

NO_SANITIZE("cfi-icall") bool HoneycombPanelCToCpp::IsVisible() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_visible(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombPanelCToCpp::IsDrawn() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_drawn)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_drawn(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::SetEnabled(bool enabled) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_enabled)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_enabled(_struct, enabled);
}

NO_SANITIZE("cfi-icall") bool HoneycombPanelCToCpp::IsEnabled() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_enabled)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_enabled(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::SetFocusable(bool focusable) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_focusable)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_focusable(_struct, focusable);
}

NO_SANITIZE("cfi-icall") bool HoneycombPanelCToCpp::IsFocusable() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_focusable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_focusable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombPanelCToCpp::IsAccessibilityFocusable() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_accessibility_focusable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_accessibility_focusable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombPanelCToCpp::RequestFocus() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, request_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->request_focus(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombPanelCToCpp::SetBackgroundColor(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_background_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_background_color(_struct, color);
}

NO_SANITIZE("cfi-icall") honey_color_t HoneycombPanelCToCpp::GetBackgroundColor() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_background_color)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_color_t _retval = _struct->get_background_color(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
bool HoneycombPanelCToCpp::ConvertPointToScreen(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_screen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_screen(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombPanelCToCpp::ConvertPointFromScreen(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_screen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_screen(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombPanelCToCpp::ConvertPointToWindow(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_window)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_window(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombPanelCToCpp::ConvertPointFromWindow(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_window)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_window(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombPanelCToCpp::ConvertPointToView(HoneycombRefPtr<HoneycombView> view,
                                        HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_view)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->convert_point_to_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombPanelCToCpp::ConvertPointFromView(HoneycombRefPtr<HoneycombView> view,
                                          HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_view)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->convert_point_from_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), &point);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombPanelCToCpp::HoneycombPanelCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombPanelCToCpp::~HoneycombPanelCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_panel_t*
HoneycombCToCppRefCounted<HoneycombPanelCToCpp, HoneycombPanel, honey_panel_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombPanel* c) {
  if (type == WT_WINDOW) {
    return reinterpret_cast<honey_panel_t*>(
        HoneycombWindowCToCpp::Unwrap(reinterpret_cast<HoneycombWindow*>(c)));
  }
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombPanelCToCpp, HoneycombPanel, honey_panel_t>::kWrapperType =
        WT_PANEL;
