// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=e1ed42bb378f9f140e006ec582c0e908f711e7fa$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_VIEWS_WINDOW_DELEGATE_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_VIEWS_WINDOW_DELEGATE_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/views/honey_window_capi.h"
#include "include/capi/views/honey_window_delegate_capi.h"
#include "include/views/honey_window.h"
#include "include/views/honey_window_delegate.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombWindowDelegateCToCpp
    : public HoneycombCToCppRefCounted<HoneycombWindowDelegateCToCpp,
                                 HoneycombWindowDelegate,
                                 honey_window_delegate_t> {
 public:
  HoneycombWindowDelegateCToCpp();
  virtual ~HoneycombWindowDelegateCToCpp();

  // HoneycombWindowDelegate methods.
  void OnWindowCreated(HoneycombRefPtr<HoneycombWindow> window) override;
  void OnWindowClosing(HoneycombRefPtr<HoneycombWindow> window) override;
  void OnWindowDestroyed(HoneycombRefPtr<HoneycombWindow> window) override;
  void OnWindowActivationChanged(HoneycombRefPtr<HoneycombWindow> window,
                                 bool active) override;
  void OnWindowBoundsChanged(HoneycombRefPtr<HoneycombWindow> window,
                             const HoneycombRect& new_bounds) override;
  void OnWindowFullscreenTransition(HoneycombRefPtr<HoneycombWindow> window,
                                    bool is_completed) override;
  HoneycombRefPtr<HoneycombWindow> GetParentWindow(HoneycombRefPtr<HoneycombWindow> window,
                                       bool* is_menu,
                                       bool* can_activate_menu) override;
  bool IsWindowModalDialog(HoneycombRefPtr<HoneycombWindow> window) override;
  HoneycombRect GetInitialBounds(HoneycombRefPtr<HoneycombWindow> window) override;
  honey_show_state_t GetInitialShowState(HoneycombRefPtr<HoneycombWindow> window) override;
  bool IsFrameless(HoneycombRefPtr<HoneycombWindow> window) override;
  bool WithStandardWindowButtons(HoneycombRefPtr<HoneycombWindow> window) override;
  bool GetTitlebarHeight(HoneycombRefPtr<HoneycombWindow> window,
                         float* titlebar_height) override;
  bool CanResize(HoneycombRefPtr<HoneycombWindow> window) override;
  bool CanMaximize(HoneycombRefPtr<HoneycombWindow> window) override;
  bool CanMinimize(HoneycombRefPtr<HoneycombWindow> window) override;
  bool CanClose(HoneycombRefPtr<HoneycombWindow> window) override;
  bool OnAccelerator(HoneycombRefPtr<HoneycombWindow> window, int command_id) override;
  bool OnKeyEvent(HoneycombRefPtr<HoneycombWindow> window,
                  const HoneycombKeyEvent& event) override;

  // HoneycombPanelDelegate methods.

  // HoneycombViewDelegate methods.
  HoneycombSize GetPreferredSize(HoneycombRefPtr<HoneycombView> view) override;
  HoneycombSize GetMinimumSize(HoneycombRefPtr<HoneycombView> view) override;
  HoneycombSize GetMaximumSize(HoneycombRefPtr<HoneycombView> view) override;
  int GetHeightForWidth(HoneycombRefPtr<HoneycombView> view, int width) override;
  void OnParentViewChanged(HoneycombRefPtr<HoneycombView> view,
                           bool added,
                           HoneycombRefPtr<HoneycombView> parent) override;
  void OnChildViewChanged(HoneycombRefPtr<HoneycombView> view,
                          bool added,
                          HoneycombRefPtr<HoneycombView> child) override;
  void OnWindowChanged(HoneycombRefPtr<HoneycombView> view, bool added) override;
  void OnLayoutChanged(HoneycombRefPtr<HoneycombView> view,
                       const HoneycombRect& new_bounds) override;
  void OnFocus(HoneycombRefPtr<HoneycombView> view) override;
  void OnBlur(HoneycombRefPtr<HoneycombView> view) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_VIEWS_WINDOW_DELEGATE_CTOCPP_H_
