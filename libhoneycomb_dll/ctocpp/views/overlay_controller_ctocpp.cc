// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c4c46d19e0b5234bca4f1051d0113af666dc2c09$
//

#include "libhoneycomb_dll/ctocpp/views/overlay_controller_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/view_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/views/window_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombOverlayControllerCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombOverlayControllerCToCpp::IsSame(HoneycombRefPtr<HoneycombOverlayController> that) {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->is_same(_struct, HoneycombOverlayControllerCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombOverlayControllerCToCpp::GetContentsView() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_contents_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_contents_view(_struct);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombWindow> HoneycombOverlayControllerCToCpp::GetWindow() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_window)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_window_t* _retval = _struct->get_window(_struct);

  // Return type: refptr_same
  return HoneycombWindowCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
honey_docking_mode_t HoneycombOverlayControllerCToCpp::GetDockingMode() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_docking_mode)) {
    return HONEYCOMB_DOCKING_MODE_TOP_LEFT;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_docking_mode_t _retval = _struct->get_docking_mode(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombOverlayControllerCToCpp::Destroy() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, destroy)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->destroy(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombOverlayControllerCToCpp::SetBounds(const HoneycombRect& bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_bounds)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_bounds(_struct, &bounds);
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombOverlayControllerCToCpp::GetBounds() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRect HoneycombOverlayControllerCToCpp::GetBoundsInScreen() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds_in_screen)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds_in_screen(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombOverlayControllerCToCpp::SetSize(const HoneycombSize& size) {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_size(_struct, &size);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombOverlayControllerCToCpp::GetSize() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombOverlayControllerCToCpp::SetPosition(const HoneycombPoint& position) {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_position)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_position(_struct, &position);
}

NO_SANITIZE("cfi-icall") HoneycombPoint HoneycombOverlayControllerCToCpp::GetPosition() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_position)) {
    return HoneycombPoint();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_point_t _retval = _struct->get_position(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombOverlayControllerCToCpp::SetInsets(const HoneycombInsets& insets) {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_insets)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_insets(_struct, &insets);
}

NO_SANITIZE("cfi-icall") HoneycombInsets HoneycombOverlayControllerCToCpp::GetInsets() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_insets)) {
    return HoneycombInsets();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_insets_t _retval = _struct->get_insets(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombOverlayControllerCToCpp::SizeToPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, size_to_preferred_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->size_to_preferred_size(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombOverlayControllerCToCpp::SetVisible(bool visible) {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_visible)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_visible(_struct, visible);
}

NO_SANITIZE("cfi-icall") bool HoneycombOverlayControllerCToCpp::IsVisible() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_visible(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombOverlayControllerCToCpp::IsDrawn() {
  shutdown_checker::AssertNotShutdown();

  honey_overlay_controller_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_drawn)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_drawn(_struct);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombOverlayControllerCToCpp::HoneycombOverlayControllerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombOverlayControllerCToCpp::~HoneycombOverlayControllerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_overlay_controller_t* HoneycombCToCppRefCounted<
    HoneycombOverlayControllerCToCpp,
    HoneycombOverlayController,
    honey_overlay_controller_t>::UnwrapDerived(HoneycombWrapperType type,
                                             HoneycombOverlayController* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombOverlayControllerCToCpp,
                                   HoneycombOverlayController,
                                   honey_overlay_controller_t>::kWrapperType =
    WT_OVERLAY_CONTROLLER;
