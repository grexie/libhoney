// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=bb69763a25cd013a50504d762a81c0a4454ce8eb$
//

#include "libhoneycomb_dll/ctocpp/views/window_delegate_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/views/view_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/window_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnWindowCreated(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_created)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return;
  }

  // Execute
  _struct->on_window_created(_struct, HoneycombWindowCppToC::Wrap(window));
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnWindowClosing(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_closing)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return;
  }

  // Execute
  _struct->on_window_closing(_struct, HoneycombWindowCppToC::Wrap(window));
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnWindowDestroyed(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_destroyed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return;
  }

  // Execute
  _struct->on_window_destroyed(_struct, HoneycombWindowCppToC::Wrap(window));
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnWindowActivationChanged(
    HoneycombRefPtr<HoneycombWindow> window,
    bool active) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_activation_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return;
  }

  // Execute
  _struct->on_window_activation_changed(_struct, HoneycombWindowCppToC::Wrap(window),
                                        active);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnWindowBoundsChanged(HoneycombRefPtr<HoneycombWindow> window,
                                                    const HoneycombRect& new_bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_bounds_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return;
  }

  // Execute
  _struct->on_window_bounds_changed(_struct, HoneycombWindowCppToC::Wrap(window),
                                    &new_bounds);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnWindowFullscreenTransition(
    HoneycombRefPtr<HoneycombWindow> window,
    bool is_completed) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_fullscreen_transition)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return;
  }

  // Execute
  _struct->on_window_fullscreen_transition(
      _struct, HoneycombWindowCppToC::Wrap(window), is_completed);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombWindow> HoneycombWindowDelegateCToCpp::GetParentWindow(
    HoneycombRefPtr<HoneycombWindow> window,
    bool* is_menu,
    bool* can_activate_menu) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_parent_window)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return nullptr;
  }
  // Verify param: is_menu; type: bool_byaddr
  DCHECK(is_menu);
  if (!is_menu) {
    return nullptr;
  }
  // Verify param: can_activate_menu; type: bool_byaddr
  DCHECK(can_activate_menu);
  if (!can_activate_menu) {
    return nullptr;
  }

  // Translate param: is_menu; type: bool_byaddr
  int is_menuInt = is_menu ? *is_menu : 0;
  // Translate param: can_activate_menu; type: bool_byaddr
  int can_activate_menuInt = can_activate_menu ? *can_activate_menu : 0;

  // Execute
  honey_window_t* _retval =
      _struct->get_parent_window(_struct, HoneycombWindowCppToC::Wrap(window),
                                 &is_menuInt, &can_activate_menuInt);

  // Restore param:is_menu; type: bool_byaddr
  if (is_menu) {
    *is_menu = is_menuInt ? true : false;
  }
  // Restore param:can_activate_menu; type: bool_byaddr
  if (can_activate_menu) {
    *can_activate_menu = can_activate_menuInt ? true : false;
  }

  // Return type: refptr_diff
  return HoneycombWindowCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::IsWindowModalDialog(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_window_modal_dialog)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->is_window_modal_dialog(_struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRect HoneycombWindowDelegateCToCpp::GetInitialBounds(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_initial_bounds)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval =
      _struct->get_initial_bounds(_struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
honey_show_state_t HoneycombWindowDelegateCToCpp::GetInitialShowState(
    HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_initial_show_state)) {
    return HONEYCOMB_SHOW_STATE_NORMAL;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return HONEYCOMB_SHOW_STATE_NORMAL;
  }

  // Execute
  honey_show_state_t _retval =
      _struct->get_initial_show_state(_struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::IsFrameless(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_frameless)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_frameless(_struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::WithStandardWindowButtons(
    HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, with_standard_window_buttons)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->with_standard_window_buttons(
      _struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::GetTitlebarHeight(HoneycombRefPtr<HoneycombWindow> window,
                                                float* titlebar_height) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_titlebar_height)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }
  // Verify param: titlebar_height; type: simple_byaddr
  DCHECK(titlebar_height);
  if (!titlebar_height) {
    return false;
  }

  // Execute
  int _retval = _struct->get_titlebar_height(
      _struct, HoneycombWindowCppToC::Wrap(window), titlebar_height);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::CanResize(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, can_resize)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->can_resize(_struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::CanMaximize(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, can_maximize)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->can_maximize(_struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::CanMinimize(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, can_minimize)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->can_minimize(_struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::CanClose(HoneycombRefPtr<HoneycombWindow> window) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, can_close)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->can_close(_struct, HoneycombWindowCppToC::Wrap(window));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::OnAccelerator(HoneycombRefPtr<HoneycombWindow> window,
                                            int command_id) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_accelerator)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->on_accelerator(_struct, HoneycombWindowCppToC::Wrap(window),
                                        command_id);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowDelegateCToCpp::OnKeyEvent(HoneycombRefPtr<HoneycombWindow> window,
                                         const HoneycombKeyEvent& event) {
  shutdown_checker::AssertNotShutdown();

  honey_window_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_key_event)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: window; type: refptr_diff
  DCHECK(window.get());
  if (!window.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->on_key_event(_struct, HoneycombWindowCppToC::Wrap(window), &event);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombWindowDelegateCToCpp::GetPreferredSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_preferred_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_preferred_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombWindowDelegateCToCpp::GetMinimumSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_minimum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_minimum_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombWindowDelegateCToCpp::GetMaximumSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_maximum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_maximum_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
int HoneycombWindowDelegateCToCpp::GetHeightForWidth(HoneycombRefPtr<HoneycombView> view,
                                               int width) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_height_for_width)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return 0;
  }

  // Execute
  int _retval =
      _struct->get_height_for_width(_struct, HoneycombViewCppToC::Wrap(view), width);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnParentViewChanged(HoneycombRefPtr<HoneycombView> view,
                                                  bool added,
                                                  HoneycombRefPtr<HoneycombView> parent) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_parent_view_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }
  // Verify param: parent; type: refptr_diff
  DCHECK(parent.get());
  if (!parent.get()) {
    return;
  }

  // Execute
  _struct->on_parent_view_changed(_struct, HoneycombViewCppToC::Wrap(view), added,
                                  HoneycombViewCppToC::Wrap(parent));
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnChildViewChanged(HoneycombRefPtr<HoneycombView> view,
                                                 bool added,
                                                 HoneycombRefPtr<HoneycombView> child) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_child_view_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }
  // Verify param: child; type: refptr_diff
  DCHECK(child.get());
  if (!child.get()) {
    return;
  }

  // Execute
  _struct->on_child_view_changed(_struct, HoneycombViewCppToC::Wrap(view), added,
                                 HoneycombViewCppToC::Wrap(child));
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnWindowChanged(HoneycombRefPtr<HoneycombView> view,
                                              bool added) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_window_changed(_struct, HoneycombViewCppToC::Wrap(view), added);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnLayoutChanged(HoneycombRefPtr<HoneycombView> view,
                                              const HoneycombRect& new_bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_layout_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_layout_changed(_struct, HoneycombViewCppToC::Wrap(view), &new_bounds);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnFocus(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_focus(_struct, HoneycombViewCppToC::Wrap(view));
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowDelegateCToCpp::OnBlur(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_blur)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_blur(_struct, HoneycombViewCppToC::Wrap(view));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombWindowDelegateCToCpp::HoneycombWindowDelegateCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombWindowDelegateCToCpp::~HoneycombWindowDelegateCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_window_delegate_t* HoneycombCToCppRefCounted<
    HoneycombWindowDelegateCToCpp,
    HoneycombWindowDelegate,
    honey_window_delegate_t>::UnwrapDerived(HoneycombWrapperType type,
                                          HoneycombWindowDelegate* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombWindowDelegateCToCpp,
                                   HoneycombWindowDelegate,
                                   honey_window_delegate_t>::kWrapperType =
    WT_WINDOW_DELEGATE;
