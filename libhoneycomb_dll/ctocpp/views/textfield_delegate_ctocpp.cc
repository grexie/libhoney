// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=0554c435e85fb7efb50f22cc7c3e184af48f0ea0$
//

#include "libhoneycomb_dll/ctocpp/views/textfield_delegate_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/views/textfield_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/views/view_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombTextfieldDelegateCToCpp::OnKeyEvent(HoneycombRefPtr<HoneycombTextfield> textfield,
                                            const HoneycombKeyEvent& event) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_key_event)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: textfield; type: refptr_diff
  DCHECK(textfield.get());
  if (!textfield.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->on_key_event(
      _struct, HoneycombTextfieldCppToC::Wrap(textfield), &event);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldDelegateCToCpp::OnAfterUserAction(
    HoneycombRefPtr<HoneycombTextfield> textfield) {
  shutdown_checker::AssertNotShutdown();

  honey_textfield_delegate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_after_user_action)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: textfield; type: refptr_diff
  DCHECK(textfield.get());
  if (!textfield.get()) {
    return;
  }

  // Execute
  _struct->on_after_user_action(_struct, HoneycombTextfieldCppToC::Wrap(textfield));
}

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombTextfieldDelegateCToCpp::GetPreferredSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_preferred_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_preferred_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombTextfieldDelegateCToCpp::GetMinimumSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_minimum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_minimum_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombSize HoneycombTextfieldDelegateCToCpp::GetMaximumSize(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_maximum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      _struct->get_maximum_size(_struct, HoneycombViewCppToC::Wrap(view));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
int HoneycombTextfieldDelegateCToCpp::GetHeightForWidth(HoneycombRefPtr<HoneycombView> view,
                                                  int width) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_height_for_width)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return 0;
  }

  // Execute
  int _retval =
      _struct->get_height_for_width(_struct, HoneycombViewCppToC::Wrap(view), width);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldDelegateCToCpp::OnParentViewChanged(
    HoneycombRefPtr<HoneycombView> view,
    bool added,
    HoneycombRefPtr<HoneycombView> parent) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_parent_view_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }
  // Verify param: parent; type: refptr_diff
  DCHECK(parent.get());
  if (!parent.get()) {
    return;
  }

  // Execute
  _struct->on_parent_view_changed(_struct, HoneycombViewCppToC::Wrap(view), added,
                                  HoneycombViewCppToC::Wrap(parent));
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldDelegateCToCpp::OnChildViewChanged(HoneycombRefPtr<HoneycombView> view,
                                                    bool added,
                                                    HoneycombRefPtr<HoneycombView> child) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_child_view_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }
  // Verify param: child; type: refptr_diff
  DCHECK(child.get());
  if (!child.get()) {
    return;
  }

  // Execute
  _struct->on_child_view_changed(_struct, HoneycombViewCppToC::Wrap(view), added,
                                 HoneycombViewCppToC::Wrap(child));
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldDelegateCToCpp::OnWindowChanged(HoneycombRefPtr<HoneycombView> view,
                                                 bool added) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_window_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_window_changed(_struct, HoneycombViewCppToC::Wrap(view), added);
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldDelegateCToCpp::OnLayoutChanged(HoneycombRefPtr<HoneycombView> view,
                                                 const HoneycombRect& new_bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_layout_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_layout_changed(_struct, HoneycombViewCppToC::Wrap(view), &new_bounds);
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldDelegateCToCpp::OnFocus(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_focus(_struct, HoneycombViewCppToC::Wrap(view));
}

NO_SANITIZE("cfi-icall")
void HoneycombTextfieldDelegateCToCpp::OnBlur(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_view_delegate_t* _struct =
      reinterpret_cast<honey_view_delegate_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_blur)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_diff
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->on_blur(_struct, HoneycombViewCppToC::Wrap(view));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombTextfieldDelegateCToCpp::HoneycombTextfieldDelegateCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombTextfieldDelegateCToCpp::~HoneycombTextfieldDelegateCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_textfield_delegate_t* HoneycombCToCppRefCounted<
    HoneycombTextfieldDelegateCToCpp,
    HoneycombTextfieldDelegate,
    honey_textfield_delegate_t>::UnwrapDerived(HoneycombWrapperType type,
                                             HoneycombTextfieldDelegate* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombTextfieldDelegateCToCpp,
                                   HoneycombTextfieldDelegate,
                                   honey_textfield_delegate_t>::kWrapperType =
    WT_TEXTFIELD_DELEGATE;
