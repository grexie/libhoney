// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=13afe421110fa07e94c1724d21302b018a71a633$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_IMAGE_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_IMAGE_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_image_capi.h"
#include "include/honey_image.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombImageCToCpp
    : public HoneycombCToCppRefCounted<HoneycombImageCToCpp, HoneycombImage, honey_image_t> {
 public:
  HoneycombImageCToCpp();
  virtual ~HoneycombImageCToCpp();

  // HoneycombImage methods.
  bool IsEmpty() override;
  bool IsSame(HoneycombRefPtr<HoneycombImage> that) override;
  bool AddBitmap(float scale_factor,
                 int pixel_width,
                 int pixel_height,
                 honey_color_type_t color_type,
                 honey_alpha_type_t alpha_type,
                 const void* pixel_data,
                 size_t pixel_data_size) override;
  bool AddPNG(float scale_factor,
              const void* png_data,
              size_t png_data_size) override;
  bool AddJPEG(float scale_factor,
               const void* jpeg_data,
               size_t jpeg_data_size) override;
  size_t GetWidth() override;
  size_t GetHeight() override;
  bool HasRepresentation(float scale_factor) override;
  bool RemoveRepresentation(float scale_factor) override;
  bool GetRepresentationInfo(float scale_factor,
                             float& actual_scale_factor,
                             int& pixel_width,
                             int& pixel_height) override;
  HoneycombRefPtr<HoneycombBinaryValue> GetAsBitmap(float scale_factor,
                                        honey_color_type_t color_type,
                                        honey_alpha_type_t alpha_type,
                                        int& pixel_width,
                                        int& pixel_height) override;
  HoneycombRefPtr<HoneycombBinaryValue> GetAsPNG(float scale_factor,
                                     bool with_transparency,
                                     int& pixel_width,
                                     int& pixel_height) override;
  HoneycombRefPtr<HoneycombBinaryValue> GetAsJPEG(float scale_factor,
                                      int quality,
                                      int& pixel_width,
                                      int& pixel_height) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_IMAGE_CTOCPP_H_
