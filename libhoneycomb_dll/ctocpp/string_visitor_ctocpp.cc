// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=a2b53161507c06e907247b24022b7d5d62358fd9$
//

#include "libhoneycomb_dll/ctocpp/string_visitor_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombStringVisitorCToCpp::Visit(const HoneycombString& string) {
  shutdown_checker::AssertNotShutdown();

  honey_string_visitor_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, visit)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: string

  // Execute
  _struct->visit(_struct, string.GetStruct());
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombStringVisitorCToCpp::HoneycombStringVisitorCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombStringVisitorCToCpp::~HoneycombStringVisitorCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_string_visitor_t*
HoneycombCToCppRefCounted<HoneycombStringVisitorCToCpp,
                    HoneycombStringVisitor,
                    honey_string_visitor_t>::UnwrapDerived(HoneycombWrapperType type,
                                                         HoneycombStringVisitor* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombStringVisitorCToCpp,
                                   HoneycombStringVisitor,
                                   honey_string_visitor_t>::kWrapperType =
    WT_STRING_VISITOR;
