// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=199035206a81ce991d025997baf3e64007d74c65$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_SKIP_CALLBACK_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_SKIP_CALLBACK_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_resource_handler_capi.h"
#include "include/honey_resource_handler.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombResourceSkipCallbackCToCpp
    : public HoneycombCToCppRefCounted<HoneycombResourceSkipCallbackCToCpp,
                                 HoneycombResourceSkipCallback,
                                 honey_resource_skip_callback_t> {
 public:
  HoneycombResourceSkipCallbackCToCpp();
  virtual ~HoneycombResourceSkipCallbackCToCpp();

  // HoneycombResourceSkipCallback methods.
  void Continue(int64_t bytes_skipped) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_SKIP_CALLBACK_CTOCPP_H_
