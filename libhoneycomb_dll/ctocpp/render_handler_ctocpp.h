// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=e10b3b9a07b4b6929a4168ad657c0046200c1d75$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RENDER_HANDLER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RENDER_HANDLER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_render_handler_capi.h"
#include "include/honey_render_handler.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombRenderHandlerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombRenderHandlerCToCpp,
                                 HoneycombRenderHandler,
                                 honey_render_handler_t> {
 public:
  HoneycombRenderHandlerCToCpp();
  virtual ~HoneycombRenderHandlerCToCpp();

  // HoneycombRenderHandler methods.
  HoneycombRefPtr<HoneycombAccessibilityHandler> GetAccessibilityHandler() override;
  bool GetRootScreenRect(HoneycombRefPtr<HoneycombBrowser> browser, HoneycombRect& rect) override;
  void GetViewRect(HoneycombRefPtr<HoneycombBrowser> browser, HoneycombRect& rect) override;
  bool GetScreenPoint(HoneycombRefPtr<HoneycombBrowser> browser,
                      int viewX,
                      int viewY,
                      int& screenX,
                      int& screenY) override;
  bool GetScreenInfo(HoneycombRefPtr<HoneycombBrowser> browser,
                     HoneycombScreenInfo& screen_info) override;
  void OnPopupShow(HoneycombRefPtr<HoneycombBrowser> browser, bool show) override;
  void OnPopupSize(HoneycombRefPtr<HoneycombBrowser> browser, const HoneycombRect& rect) override;
  void OnPaint(HoneycombRefPtr<HoneycombBrowser> browser,
               PaintElementType type,
               const RectList& dirtyRects,
               const void* buffer,
               int width,
               int height) override;
  void OnAcceleratedPaint(HoneycombRefPtr<HoneycombBrowser> browser,
                          PaintElementType type,
                          const RectList& dirtyRects,
                          void* shared_handle) override;
  void GetTouchHandleSize(HoneycombRefPtr<HoneycombBrowser> browser,
                          honey_horizontal_alignment_t orientation,
                          HoneycombSize& size) override;
  void OnTouchHandleStateChanged(HoneycombRefPtr<HoneycombBrowser> browser,
                                 const HoneycombTouchHandleState& state) override;
  bool StartDragging(HoneycombRefPtr<HoneycombBrowser> browser,
                     HoneycombRefPtr<HoneycombDragData> drag_data,
                     DragOperationsMask allowed_ops,
                     int x,
                     int y) override;
  void UpdateDragCursor(HoneycombRefPtr<HoneycombBrowser> browser,
                        DragOperation operation) override;
  void OnScrollOffsetChanged(HoneycombRefPtr<HoneycombBrowser> browser,
                             double x,
                             double y) override;
  void OnImeCompositionRangeChanged(HoneycombRefPtr<HoneycombBrowser> browser,
                                    const HoneycombRange& selected_range,
                                    const RectList& character_bounds) override;
  void OnTextSelectionChanged(HoneycombRefPtr<HoneycombBrowser> browser,
                              const HoneycombString& selected_text,
                              const HoneycombRange& selected_range) override;
  void OnVirtualKeyboardRequested(HoneycombRefPtr<HoneycombBrowser> browser,
                                  TextInputMode input_mode) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RENDER_HANDLER_CTOCPP_H_
