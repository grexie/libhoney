// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=26f0b2cca6c62191dcdc1f70e415cd615a66cee5$
//

#include "libhoneycomb_dll/ctocpp/resolve_callback_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"
#include "libhoneycomb_dll/transfer_util.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombResolveCallbackCToCpp::OnResolveCompleted(
    honey_errorcode_t result,
    const std::vector<HoneycombString>& resolved_ips) {
  shutdown_checker::AssertNotShutdown();

  honey_resolve_callback_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_resolve_completed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: resolved_ips

  // Translate param: resolved_ips; type: string_vec_byref_const
  honey_string_list_t resolved_ipsList = honey_string_list_alloc();
  DCHECK(resolved_ipsList);
  if (resolved_ipsList) {
    transfer_string_list_contents(resolved_ips, resolved_ipsList);
  }

  // Execute
  _struct->on_resolve_completed(_struct, result, resolved_ipsList);

  // Restore param:resolved_ips; type: string_vec_byref_const
  if (resolved_ipsList) {
    honey_string_list_free(resolved_ipsList);
  }
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombResolveCallbackCToCpp::HoneycombResolveCallbackCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombResolveCallbackCToCpp::~HoneycombResolveCallbackCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_resolve_callback_t* HoneycombCToCppRefCounted<
    HoneycombResolveCallbackCToCpp,
    HoneycombResolveCallback,
    honey_resolve_callback_t>::UnwrapDerived(HoneycombWrapperType type,
                                           HoneycombResolveCallback* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombResolveCallbackCToCpp,
                                   HoneycombResolveCallback,
                                   honey_resolve_callback_t>::kWrapperType =
    WT_RESOLVE_CALLBACK;
