// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=6ac8a9990cf50850d8f8716096094d1180215be9$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_MENU_MODEL_DELEGATE_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_MENU_MODEL_DELEGATE_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_menu_model_capi.h"
#include "include/capi/honey_menu_model_delegate_capi.h"
#include "include/honey_menu_model.h"
#include "include/honey_menu_model_delegate.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombMenuModelDelegateCToCpp
    : public HoneycombCToCppRefCounted<HoneycombMenuModelDelegateCToCpp,
                                 HoneycombMenuModelDelegate,
                                 honey_menu_model_delegate_t> {
 public:
  HoneycombMenuModelDelegateCToCpp();
  virtual ~HoneycombMenuModelDelegateCToCpp();

  // HoneycombMenuModelDelegate methods.
  void ExecuteCommand(HoneycombRefPtr<HoneycombMenuModel> menu_model,
                      int command_id,
                      honey_event_flags_t event_flags) override;
  void MouseOutsideMenu(HoneycombRefPtr<HoneycombMenuModel> menu_model,
                        const HoneycombPoint& screen_point) override;
  void UnhandledOpenSubmenu(HoneycombRefPtr<HoneycombMenuModel> menu_model,
                            bool is_rtl) override;
  void UnhandledCloseSubmenu(HoneycombRefPtr<HoneycombMenuModel> menu_model,
                             bool is_rtl) override;
  void MenuWillShow(HoneycombRefPtr<HoneycombMenuModel> menu_model) override;
  void MenuClosed(HoneycombRefPtr<HoneycombMenuModel> menu_model) override;
  bool FormatLabel(HoneycombRefPtr<HoneycombMenuModel> menu_model,
                   HoneycombString& label) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_MENU_MODEL_DELEGATE_CTOCPP_H_
