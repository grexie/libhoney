// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=439e6639c3e7a3f99de34d6c499b1c6766dc7fa7$
//

#include "libhoneycomb_dll/ctocpp/shared_process_message_builder_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/process_message_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombSharedProcessMessageBuilder>
HoneycombSharedProcessMessageBuilder::Create(const HoneycombString& name,
                                       size_t byte_size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return nullptr;
  }

  // Execute
  honey_shared_process_message_builder_t* _retval =
      honey_shared_process_message_builder_create(name.GetStruct(), byte_size);

  // Return type: refptr_same
  return HoneycombSharedProcessMessageBuilderCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombSharedProcessMessageBuilderCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_shared_process_message_builder_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") size_t HoneycombSharedProcessMessageBuilderCToCpp::Size() {
  shutdown_checker::AssertNotShutdown();

  honey_shared_process_message_builder_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, size)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void* HoneycombSharedProcessMessageBuilderCToCpp::Memory() {
  shutdown_checker::AssertNotShutdown();

  honey_shared_process_message_builder_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, memory)) {
    return NULL;
  }

  // Execute
  void* _retval = _struct->memory(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombProcessMessage> HoneycombSharedProcessMessageBuilderCToCpp::Build() {
  shutdown_checker::AssertNotShutdown();

  honey_shared_process_message_builder_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, build)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_process_message_t* _retval = _struct->build(_struct);

  // Return type: refptr_same
  return HoneycombProcessMessageCToCpp::Wrap(_retval);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombSharedProcessMessageBuilderCToCpp::HoneycombSharedProcessMessageBuilderCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombSharedProcessMessageBuilderCToCpp::~HoneycombSharedProcessMessageBuilderCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_shared_process_message_builder_t*
HoneycombCToCppRefCounted<HoneycombSharedProcessMessageBuilderCToCpp,
                    HoneycombSharedProcessMessageBuilder,
                    honey_shared_process_message_builder_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombSharedProcessMessageBuilder* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombSharedProcessMessageBuilderCToCpp,
                        HoneycombSharedProcessMessageBuilder,
                        honey_shared_process_message_builder_t>::kWrapperType =
        WT_SHARED_PROCESS_MESSAGE_BUILDER;
