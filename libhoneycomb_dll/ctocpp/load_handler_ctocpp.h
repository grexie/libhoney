// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d05ba1799ed6cc227ab5d314ce8a96187b7a3069$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_LOAD_HANDLER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_LOAD_HANDLER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_load_handler_capi.h"
#include "include/honey_load_handler.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombLoadHandlerCToCpp : public HoneycombCToCppRefCounted<HoneycombLoadHandlerCToCpp,
                                                        HoneycombLoadHandler,
                                                        honey_load_handler_t> {
 public:
  HoneycombLoadHandlerCToCpp();
  virtual ~HoneycombLoadHandlerCToCpp();

  // HoneycombLoadHandler methods.
  void OnLoadingStateChange(HoneycombRefPtr<HoneycombBrowser> browser,
                            bool isLoading,
                            bool canGoBack,
                            bool canGoForward) override;
  void OnLoadStart(HoneycombRefPtr<HoneycombBrowser> browser,
                   HoneycombRefPtr<HoneycombFrame> frame,
                   TransitionType transition_type) override;
  void OnLoadEnd(HoneycombRefPtr<HoneycombBrowser> browser,
                 HoneycombRefPtr<HoneycombFrame> frame,
                 int httpStatusCode) override;
  void OnLoadError(HoneycombRefPtr<HoneycombBrowser> browser,
                   HoneycombRefPtr<HoneycombFrame> frame,
                   ErrorCode errorCode,
                   const HoneycombString& errorText,
                   const HoneycombString& failedUrl) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_LOAD_HANDLER_CTOCPP_H_
