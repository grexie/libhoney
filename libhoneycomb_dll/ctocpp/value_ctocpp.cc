// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=9e6bc91e58ee92cf2c2b855d0eea2a0db0743e4a$
//

#include "libhoneycomb_dll/ctocpp/value_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/binary_value_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/dictionary_value_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/list_value_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombValue> HoneycombValue::Create() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_value_t* _retval = honey_value_create();

  // Return type: refptr_same
  return HoneycombValueCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::IsOwned() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_owned)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_owned(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::IsReadOnly() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::IsSame(HoneycombRefPtr<HoneycombValue> that) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombValueCToCpp::IsEqual(HoneycombRefPtr<HoneycombValue> that) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_equal)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_equal(_struct, HoneycombValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombValue> HoneycombValueCToCpp::Copy() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, copy)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_value_t* _retval = _struct->copy(_struct);

  // Return type: refptr_same
  return HoneycombValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombValueType HoneycombValueCToCpp::GetType() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_type)) {
    return VTYPE_INVALID;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_value_type_t _retval = _struct->get_type(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::GetBool() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_bool(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") int HoneycombValueCToCpp::GetInt() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_int)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_int(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") double HoneycombValueCToCpp::GetDouble() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_double)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_double(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombValueCToCpp::GetString() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_string(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombBinaryValue> HoneycombValueCToCpp::GetBinary() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_binary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval = _struct->get_binary(_struct);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDictionaryValue> HoneycombValueCToCpp::GetDictionary() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_dictionary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_dictionary_value_t* _retval = _struct->get_dictionary(_struct);

  // Return type: refptr_same
  return HoneycombDictionaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombListValue> HoneycombValueCToCpp::GetList() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_list)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_list_value_t* _retval = _struct->get_list(_struct);

  // Return type: refptr_same
  return HoneycombListValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::SetNull() {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_null)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_null(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::SetBool(bool value) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_bool(_struct, value);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::SetInt(int value) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_int)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_int(_struct, value);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombValueCToCpp::SetDouble(double value) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_double)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_double(_struct, value);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombValueCToCpp::SetString(const HoneycombString& value) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_string)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: value

  // Execute
  int _retval = _struct->set_string(_struct, value.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombValueCToCpp::SetBinary(HoneycombRefPtr<HoneycombBinaryValue> value) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_binary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_binary(_struct, HoneycombBinaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombValueCToCpp::SetDictionary(HoneycombRefPtr<HoneycombDictionaryValue> value) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_dictionary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_dictionary(_struct, HoneycombDictionaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombValueCToCpp::SetList(HoneycombRefPtr<HoneycombListValue> value) {
  shutdown_checker::AssertNotShutdown();

  honey_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_list)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_list(_struct, HoneycombListValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombValueCToCpp::HoneycombValueCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombValueCToCpp::~HoneycombValueCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_value_t*
HoneycombCToCppRefCounted<HoneycombValueCToCpp, HoneycombValue, honey_value_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombValue* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombValueCToCpp, HoneycombValue, honey_value_t>::kWrapperType =
        WT_VALUE;
