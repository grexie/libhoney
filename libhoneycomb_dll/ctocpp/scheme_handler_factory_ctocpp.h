// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8553de031f140b9c850e487863fc91b97633314b$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_SCHEME_HANDLER_FACTORY_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_SCHEME_HANDLER_FACTORY_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_scheme_capi.h"
#include "include/honey_scheme.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombSchemeHandlerFactoryCToCpp
    : public HoneycombCToCppRefCounted<HoneycombSchemeHandlerFactoryCToCpp,
                                 HoneycombSchemeHandlerFactory,
                                 honey_scheme_handler_factory_t> {
 public:
  HoneycombSchemeHandlerFactoryCToCpp();
  virtual ~HoneycombSchemeHandlerFactoryCToCpp();

  // HoneycombSchemeHandlerFactory methods.
  HoneycombRefPtr<HoneycombResourceHandler> Create(HoneycombRefPtr<HoneycombBrowser> browser,
                                       HoneycombRefPtr<HoneycombFrame> frame,
                                       const HoneycombString& scheme_name,
                                       HoneycombRefPtr<HoneycombRequest> request) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_SCHEME_HANDLER_FACTORY_CTOCPP_H_
