// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=af200e153fda6b0d33e42d2dfd05346d6e2ae7f4$
//

#include "libhoneycomb_dll/ctocpp/media_router_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/completion_callback_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/media_observer_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/media_route_create_callback_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/media_sink_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/media_source_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/registration_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombMediaRouter> HoneycombMediaRouter::GetGlobalMediaRouter(
    HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  honey_media_router_t* _retval =
      honey_media_router_get_global(HoneycombCompletionCallbackCppToC::Wrap(callback));

  // Return type: refptr_same
  return HoneycombMediaRouterCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombRegistration> HoneycombMediaRouterCToCpp::AddObserver(
    HoneycombRefPtr<HoneycombMediaObserver> observer) {
  shutdown_checker::AssertNotShutdown();

  honey_media_router_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_observer)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: observer; type: refptr_diff
  DCHECK(observer.get());
  if (!observer.get()) {
    return nullptr;
  }

  // Execute
  honey_registration_t* _retval =
      _struct->add_observer(_struct, HoneycombMediaObserverCppToC::Wrap(observer));

  // Return type: refptr_same
  return HoneycombRegistrationCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombMediaSource> HoneycombMediaRouterCToCpp::GetSource(
    const HoneycombString& urn) {
  shutdown_checker::AssertNotShutdown();

  honey_media_router_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_source)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: urn; type: string_byref_const
  DCHECK(!urn.empty());
  if (urn.empty()) {
    return nullptr;
  }

  // Execute
  honey_media_source_t* _retval = _struct->get_source(_struct, urn.GetStruct());

  // Return type: refptr_same
  return HoneycombMediaSourceCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") void HoneycombMediaRouterCToCpp::NotifyCurrentSinks() {
  shutdown_checker::AssertNotShutdown();

  honey_media_router_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, notify_current_sinks)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->notify_current_sinks(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombMediaRouterCToCpp::CreateRoute(
    HoneycombRefPtr<HoneycombMediaSource> source,
    HoneycombRefPtr<HoneycombMediaSink> sink,
    HoneycombRefPtr<HoneycombMediaRouteCreateCallback> callback) {
  shutdown_checker::AssertNotShutdown();

  honey_media_router_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, create_route)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: source; type: refptr_same
  DCHECK(source.get());
  if (!source.get()) {
    return;
  }
  // Verify param: sink; type: refptr_same
  DCHECK(sink.get());
  if (!sink.get()) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback.get());
  if (!callback.get()) {
    return;
  }

  // Execute
  _struct->create_route(_struct, HoneycombMediaSourceCToCpp::Unwrap(source),
                        HoneycombMediaSinkCToCpp::Unwrap(sink),
                        HoneycombMediaRouteCreateCallbackCppToC::Wrap(callback));
}

NO_SANITIZE("cfi-icall") void HoneycombMediaRouterCToCpp::NotifyCurrentRoutes() {
  shutdown_checker::AssertNotShutdown();

  honey_media_router_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, notify_current_routes)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->notify_current_routes(_struct);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombMediaRouterCToCpp::HoneycombMediaRouterCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombMediaRouterCToCpp::~HoneycombMediaRouterCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_media_router_t*
HoneycombCToCppRefCounted<HoneycombMediaRouterCToCpp, HoneycombMediaRouter, honey_media_router_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombMediaRouter* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombMediaRouterCToCpp,
                                   HoneycombMediaRouter,
                                   honey_media_router_t>::kWrapperType =
    WT_MEDIA_ROUTER;
