// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=3ec4c709bcd18d24997d554134b1b01e17bbd0fb$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESPONSE_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESPONSE_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_response_capi.h"
#include "include/honey_response.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombResponseCToCpp : public HoneycombCToCppRefCounted<HoneycombResponseCToCpp,
                                                     HoneycombResponse,
                                                     honey_response_t> {
 public:
  HoneycombResponseCToCpp();
  virtual ~HoneycombResponseCToCpp();

  // HoneycombResponse methods.
  bool IsReadOnly() override;
  honey_errorcode_t GetError() override;
  void SetError(honey_errorcode_t error) override;
  int GetStatus() override;
  void SetStatus(int status) override;
  HoneycombString GetStatusText() override;
  void SetStatusText(const HoneycombString& statusText) override;
  HoneycombString GetMimeType() override;
  void SetMimeType(const HoneycombString& mimeType) override;
  HoneycombString GetCharset() override;
  void SetCharset(const HoneycombString& charset) override;
  HoneycombString GetHeaderByName(const HoneycombString& name) override;
  void SetHeaderByName(const HoneycombString& name,
                       const HoneycombString& value,
                       bool overwrite) override;
  void GetHeaderMap(HeaderMap& headerMap) override;
  void SetHeaderMap(const HeaderMap& headerMap) override;
  HoneycombString GetURL() override;
  void SetURL(const HoneycombString& url) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESPONSE_CTOCPP_H_
