// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=614f17d01c97522a373ef4a4710202bbe6b76d11$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_TASK_RUNNER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_TASK_RUNNER_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_task_capi.h"
#include "include/honey_task.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombTaskRunnerCToCpp : public HoneycombCToCppRefCounted<HoneycombTaskRunnerCToCpp,
                                                       HoneycombTaskRunner,
                                                       honey_task_runner_t> {
 public:
  HoneycombTaskRunnerCToCpp();
  virtual ~HoneycombTaskRunnerCToCpp();

  // HoneycombTaskRunner methods.
  bool IsSame(HoneycombRefPtr<HoneycombTaskRunner> that) override;
  bool BelongsToCurrentThread() override;
  bool BelongsToThread(HoneycombThreadId threadId) override;
  bool PostTask(HoneycombRefPtr<HoneycombTask> task) override;
  bool PostDelayedTask(HoneycombRefPtr<HoneycombTask> task, int64_t delay_ms) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_TASK_RUNNER_CTOCPP_H_
