// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=7556f5356f91f554c88cadd534f2260081b23e39$
//

#include "libhoneycomb_dll/ctocpp/frame_handler_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/browser_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/frame_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombFrameHandlerCToCpp::OnFrameCreated(HoneycombRefPtr<HoneycombBrowser> browser,
                                           HoneycombRefPtr<HoneycombFrame> frame) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_frame_created)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get()) {
    return;
  }

  // Execute
  _struct->on_frame_created(_struct, HoneycombBrowserCppToC::Wrap(browser),
                            HoneycombFrameCppToC::Wrap(frame));
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameHandlerCToCpp::OnFrameAttached(HoneycombRefPtr<HoneycombBrowser> browser,
                                            HoneycombRefPtr<HoneycombFrame> frame,
                                            bool reattached) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_frame_attached)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get()) {
    return;
  }

  // Execute
  _struct->on_frame_attached(_struct, HoneycombBrowserCppToC::Wrap(browser),
                             HoneycombFrameCppToC::Wrap(frame), reattached);
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameHandlerCToCpp::OnFrameDetached(HoneycombRefPtr<HoneycombBrowser> browser,
                                            HoneycombRefPtr<HoneycombFrame> frame) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_frame_detached)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get()) {
    return;
  }

  // Execute
  _struct->on_frame_detached(_struct, HoneycombBrowserCppToC::Wrap(browser),
                             HoneycombFrameCppToC::Wrap(frame));
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameHandlerCToCpp::OnMainFrameChanged(HoneycombRefPtr<HoneycombBrowser> browser,
                                               HoneycombRefPtr<HoneycombFrame> old_frame,
                                               HoneycombRefPtr<HoneycombFrame> new_frame) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_main_frame_changed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }
  // Unverified params: old_frame, new_frame

  // Execute
  _struct->on_main_frame_changed(_struct, HoneycombBrowserCppToC::Wrap(browser),
                                 HoneycombFrameCppToC::Wrap(old_frame),
                                 HoneycombFrameCppToC::Wrap(new_frame));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombFrameHandlerCToCpp::HoneycombFrameHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombFrameHandlerCToCpp::~HoneycombFrameHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_frame_handler_t*
HoneycombCToCppRefCounted<HoneycombFrameHandlerCToCpp,
                    HoneycombFrameHandler,
                    honey_frame_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                                        HoneycombFrameHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombFrameHandlerCToCpp,
                                   HoneycombFrameHandler,
                                   honey_frame_handler_t>::kWrapperType =
    WT_FRAME_HANDLER;
