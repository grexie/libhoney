// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c91f76be5a60016fa78afe2813b0d4df3bb422e7$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_COMMAND_LINE_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_COMMAND_LINE_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include <vector>
#include "include/capi/honey_command_line_capi.h"
#include "include/honey_command_line.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombCommandLineCToCpp : public HoneycombCToCppRefCounted<HoneycombCommandLineCToCpp,
                                                        HoneycombCommandLine,
                                                        honey_command_line_t> {
 public:
  HoneycombCommandLineCToCpp();
  virtual ~HoneycombCommandLineCToCpp();

  // HoneycombCommandLine methods.
  bool IsValid() override;
  bool IsReadOnly() override;
  HoneycombRefPtr<HoneycombCommandLine> Copy() override;
  void InitFromArgv(int argc, const char* const* argv) override;
  void InitFromString(const HoneycombString& command_line) override;
  void Reset() override;
  void GetArgv(std::vector<HoneycombString>& argv) override;
  HoneycombString GetCommandLineString() override;
  HoneycombString GetProgram() override;
  void SetProgram(const HoneycombString& program) override;
  bool HasSwitches() override;
  bool HasSwitch(const HoneycombString& name) override;
  HoneycombString GetSwitchValue(const HoneycombString& name) override;
  void GetSwitches(SwitchMap& switches) override;
  void AppendSwitch(const HoneycombString& name) override;
  void AppendSwitchWithValue(const HoneycombString& name,
                             const HoneycombString& value) override;
  bool HasArguments() override;
  void GetArguments(ArgumentList& arguments) override;
  void AppendArgument(const HoneycombString& argument) override;
  void PrependWrapper(const HoneycombString& wrapper) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_COMMAND_LINE_CTOCPP_H_
