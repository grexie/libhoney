// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=5fee76af45a3305b58bd6a58455fb3e834368077$
//

#include "libhoneycomb_dll/ctocpp/before_download_callback_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombBeforeDownloadCallbackCToCpp::Continue(const HoneycombString& download_path,
                                               bool show_dialog) {
  shutdown_checker::AssertNotShutdown();

  honey_before_download_callback_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, cont)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: download_path

  // Execute
  _struct->cont(_struct, download_path.GetStruct(), show_dialog);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombBeforeDownloadCallbackCToCpp::HoneycombBeforeDownloadCallbackCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombBeforeDownloadCallbackCToCpp::~HoneycombBeforeDownloadCallbackCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_before_download_callback_t* HoneycombCToCppRefCounted<
    HoneycombBeforeDownloadCallbackCToCpp,
    HoneycombBeforeDownloadCallback,
    honey_before_download_callback_t>::UnwrapDerived(HoneycombWrapperType type,
                                                   HoneycombBeforeDownloadCallback*
                                                       c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombBeforeDownloadCallbackCToCpp,
                        HoneycombBeforeDownloadCallback,
                        honey_before_download_callback_t>::kWrapperType =
        WT_BEFORE_DOWNLOAD_CALLBACK;
