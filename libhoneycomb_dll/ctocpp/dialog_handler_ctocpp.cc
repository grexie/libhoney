// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=51a99f5889f00d4074a7e975ec95b889f1bd55d8$
//

#include "libhoneycomb_dll/ctocpp/dialog_handler_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/browser_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/file_dialog_callback_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"
#include "libhoneycomb_dll/transfer_util.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombDialogHandlerCToCpp::OnFileDialog(
    HoneycombRefPtr<HoneycombBrowser> browser,
    FileDialogMode mode,
    const HoneycombString& title,
    const HoneycombString& default_file_path,
    const std::vector<HoneycombString>& accept_filters,
    HoneycombRefPtr<HoneycombFileDialogCallback> callback) {
  shutdown_checker::AssertNotShutdown();

  honey_dialog_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_file_dialog)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback.get());
  if (!callback.get()) {
    return false;
  }
  // Unverified params: title, default_file_path, accept_filters

  // Translate param: accept_filters; type: string_vec_byref_const
  honey_string_list_t accept_filtersList = honey_string_list_alloc();
  DCHECK(accept_filtersList);
  if (accept_filtersList) {
    transfer_string_list_contents(accept_filters, accept_filtersList);
  }

  // Execute
  int _retval = _struct->on_file_dialog(
      _struct, HoneycombBrowserCppToC::Wrap(browser), mode, title.GetStruct(),
      default_file_path.GetStruct(), accept_filtersList,
      HoneycombFileDialogCallbackCppToC::Wrap(callback));

  // Restore param:accept_filters; type: string_vec_byref_const
  if (accept_filtersList) {
    honey_string_list_free(accept_filtersList);
  }

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombDialogHandlerCToCpp::HoneycombDialogHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombDialogHandlerCToCpp::~HoneycombDialogHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_dialog_handler_t*
HoneycombCToCppRefCounted<HoneycombDialogHandlerCToCpp,
                    HoneycombDialogHandler,
                    honey_dialog_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                                         HoneycombDialogHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombDialogHandlerCToCpp,
                                   HoneycombDialogHandler,
                                   honey_dialog_handler_t>::kWrapperType =
    WT_DIALOG_HANDLER;
