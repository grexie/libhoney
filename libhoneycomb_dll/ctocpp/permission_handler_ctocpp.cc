// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=2461a078bc8ccb378b66d02981ca0dbe0f631452$
//

#include "libhoneycomb_dll/ctocpp/permission_handler_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/browser_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/frame_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/media_access_callback_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/permission_prompt_callback_cpptoc.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombPermissionHandlerCToCpp::OnRequestMediaAccessPermission(
    HoneycombRefPtr<HoneycombBrowser> browser,
    HoneycombRefPtr<HoneycombFrame> frame,
    const HoneycombString& requesting_origin,
    uint32_t requested_permissions,
    HoneycombRefPtr<HoneycombMediaAccessCallback> callback) {
  shutdown_checker::AssertNotShutdown();

  honey_permission_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_request_media_access_permission)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get()) {
    return false;
  }
  // Verify param: requesting_origin; type: string_byref_const
  DCHECK(!requesting_origin.empty());
  if (requesting_origin.empty()) {
    return false;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback.get());
  if (!callback.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->on_request_media_access_permission(
      _struct, HoneycombBrowserCppToC::Wrap(browser), HoneycombFrameCppToC::Wrap(frame),
      requesting_origin.GetStruct(), requested_permissions,
      HoneycombMediaAccessCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombPermissionHandlerCToCpp::OnShowPermissionPrompt(
    HoneycombRefPtr<HoneycombBrowser> browser,
    uint64_t prompt_id,
    const HoneycombString& requesting_origin,
    uint32_t requested_permissions,
    HoneycombRefPtr<HoneycombPermissionPromptCallback> callback) {
  shutdown_checker::AssertNotShutdown();

  honey_permission_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_show_permission_prompt)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }
  // Verify param: requesting_origin; type: string_byref_const
  DCHECK(!requesting_origin.empty());
  if (requesting_origin.empty()) {
    return false;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback.get());
  if (!callback.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->on_show_permission_prompt(
      _struct, HoneycombBrowserCppToC::Wrap(browser), prompt_id,
      requesting_origin.GetStruct(), requested_permissions,
      HoneycombPermissionPromptCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombPermissionHandlerCToCpp::OnDismissPermissionPrompt(
    HoneycombRefPtr<HoneycombBrowser> browser,
    uint64_t prompt_id,
    honey_permission_request_result_t result) {
  shutdown_checker::AssertNotShutdown();

  honey_permission_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_dismiss_permission_prompt)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }

  // Execute
  _struct->on_dismiss_permission_prompt(
      _struct, HoneycombBrowserCppToC::Wrap(browser), prompt_id, result);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombPermissionHandlerCToCpp::HoneycombPermissionHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombPermissionHandlerCToCpp::~HoneycombPermissionHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_permission_handler_t* HoneycombCToCppRefCounted<
    HoneycombPermissionHandlerCToCpp,
    HoneycombPermissionHandler,
    honey_permission_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                             HoneycombPermissionHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombPermissionHandlerCToCpp,
                                   HoneycombPermissionHandler,
                                   honey_permission_handler_t>::kWrapperType =
    WT_PERMISSION_HANDLER;
