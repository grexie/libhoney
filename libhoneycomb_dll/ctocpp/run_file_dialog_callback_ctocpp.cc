// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=88c6cc75c33fd04ded84b3a8f99bcb537d462a0d$
//

#include "libhoneycomb_dll/ctocpp/run_file_dialog_callback_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"
#include "libhoneycomb_dll/transfer_util.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombRunFileDialogCallbackCToCpp::OnFileDialogDismissed(
    const std::vector<HoneycombString>& file_paths) {
  shutdown_checker::AssertNotShutdown();

  honey_run_file_dialog_callback_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_file_dialog_dismissed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: file_paths

  // Translate param: file_paths; type: string_vec_byref_const
  honey_string_list_t file_pathsList = honey_string_list_alloc();
  DCHECK(file_pathsList);
  if (file_pathsList) {
    transfer_string_list_contents(file_paths, file_pathsList);
  }

  // Execute
  _struct->on_file_dialog_dismissed(_struct, file_pathsList);

  // Restore param:file_paths; type: string_vec_byref_const
  if (file_pathsList) {
    honey_string_list_free(file_pathsList);
  }
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombRunFileDialogCallbackCToCpp::HoneycombRunFileDialogCallbackCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombRunFileDialogCallbackCToCpp::~HoneycombRunFileDialogCallbackCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_run_file_dialog_callback_t* HoneycombCToCppRefCounted<
    HoneycombRunFileDialogCallbackCToCpp,
    HoneycombRunFileDialogCallback,
    honey_run_file_dialog_callback_t>::UnwrapDerived(HoneycombWrapperType type,
                                                   HoneycombRunFileDialogCallback*
                                                       c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombRunFileDialogCallbackCToCpp,
                        HoneycombRunFileDialogCallback,
                        honey_run_file_dialog_callback_t>::kWrapperType =
        WT_RUN_FILE_DIALOG_CALLBACK;
