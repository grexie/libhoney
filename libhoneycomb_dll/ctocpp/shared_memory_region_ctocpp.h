// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=a81ba6b7aca8e1f7e6e6ef41e727ddcffc06f204$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_SHARED_MEMORY_REGION_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_SHARED_MEMORY_REGION_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_shared_memory_region_capi.h"
#include "include/honey_shared_memory_region.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombSharedMemoryRegionCToCpp
    : public HoneycombCToCppRefCounted<HoneycombSharedMemoryRegionCToCpp,
                                 HoneycombSharedMemoryRegion,
                                 honey_shared_memory_region_t> {
 public:
  HoneycombSharedMemoryRegionCToCpp();
  virtual ~HoneycombSharedMemoryRegionCToCpp();

  // HoneycombSharedMemoryRegion methods.
  bool IsValid() override;
  size_t Size() override;
  void* Memory() override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_SHARED_MEMORY_REGION_CTOCPP_H_
