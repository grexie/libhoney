// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=68a7aff9f01e57edaeaa53bfbbc4c6121ebb3a1b$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_DICTIONARY_VALUE_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_DICTIONARY_VALUE_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_values_capi.h"
#include "include/honey_values.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombDictionaryValueCToCpp
    : public HoneycombCToCppRefCounted<HoneycombDictionaryValueCToCpp,
                                 HoneycombDictionaryValue,
                                 honey_dictionary_value_t> {
 public:
  HoneycombDictionaryValueCToCpp();
  virtual ~HoneycombDictionaryValueCToCpp();

  // HoneycombDictionaryValue methods.
  bool IsValid() override;
  bool IsOwned() override;
  bool IsReadOnly() override;
  bool IsSame(HoneycombRefPtr<HoneycombDictionaryValue> that) override;
  bool IsEqual(HoneycombRefPtr<HoneycombDictionaryValue> that) override;
  HoneycombRefPtr<HoneycombDictionaryValue> Copy(bool exclude_empty_children) override;
  size_t GetSize() override;
  bool Clear() override;
  bool HasKey(const HoneycombString& key) override;
  bool GetKeys(KeyList& keys) override;
  bool Remove(const HoneycombString& key) override;
  HoneycombValueType GetType(const HoneycombString& key) override;
  HoneycombRefPtr<HoneycombValue> GetValue(const HoneycombString& key) override;
  bool GetBool(const HoneycombString& key) override;
  int GetInt(const HoneycombString& key) override;
  double GetDouble(const HoneycombString& key) override;
  HoneycombString GetString(const HoneycombString& key) override;
  HoneycombRefPtr<HoneycombBinaryValue> GetBinary(const HoneycombString& key) override;
  HoneycombRefPtr<HoneycombDictionaryValue> GetDictionary(const HoneycombString& key) override;
  HoneycombRefPtr<HoneycombListValue> GetList(const HoneycombString& key) override;
  bool SetValue(const HoneycombString& key, HoneycombRefPtr<HoneycombValue> value) override;
  bool SetNull(const HoneycombString& key) override;
  bool SetBool(const HoneycombString& key, bool value) override;
  bool SetInt(const HoneycombString& key, int value) override;
  bool SetDouble(const HoneycombString& key, double value) override;
  bool SetString(const HoneycombString& key, const HoneycombString& value) override;
  bool SetBinary(const HoneycombString& key,
                 HoneycombRefPtr<HoneycombBinaryValue> value) override;
  bool SetDictionary(const HoneycombString& key,
                     HoneycombRefPtr<HoneycombDictionaryValue> value) override;
  bool SetList(const HoneycombString& key, HoneycombRefPtr<HoneycombListValue> value) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_DICTIONARY_VALUE_CTOCPP_H_
