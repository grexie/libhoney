// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=52b1821c0ed82e859eddbb113d4a73ba2b178548$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_BUNDLE_HANDLER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_BUNDLE_HANDLER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_resource_bundle_handler_capi.h"
#include "include/honey_resource_bundle_handler.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombResourceBundleHandlerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombResourceBundleHandlerCToCpp,
                                 HoneycombResourceBundleHandler,
                                 honey_resource_bundle_handler_t> {
 public:
  HoneycombResourceBundleHandlerCToCpp();
  virtual ~HoneycombResourceBundleHandlerCToCpp();

  // HoneycombResourceBundleHandler methods.
  bool GetLocalizedString(int string_id, HoneycombString& string) override;
  bool GetDataResource(int resource_id,
                       void*& data,
                       size_t& data_size) override;
  bool GetDataResourceForScale(int resource_id,
                               ScaleFactor scale_factor,
                               void*& data,
                               size_t& data_size) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_BUNDLE_HANDLER_CTOCPP_H_
