// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=7d93191b6f6cc58914df4909e3170d11fc826452$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_REQUEST_HANDLER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_REQUEST_HANDLER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_resource_request_handler_capi.h"
#include "include/honey_resource_request_handler.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombResourceRequestHandlerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombResourceRequestHandlerCToCpp,
                                 HoneycombResourceRequestHandler,
                                 honey_resource_request_handler_t> {
 public:
  HoneycombResourceRequestHandlerCToCpp();
  virtual ~HoneycombResourceRequestHandlerCToCpp();

  // HoneycombResourceRequestHandler methods.
  HoneycombRefPtr<HoneycombCookieAccessFilter> GetCookieAccessFilter(
      HoneycombRefPtr<HoneycombBrowser> browser,
      HoneycombRefPtr<HoneycombFrame> frame,
      HoneycombRefPtr<HoneycombRequest> request) override;
  ReturnValue OnBeforeResourceLoad(HoneycombRefPtr<HoneycombBrowser> browser,
                                   HoneycombRefPtr<HoneycombFrame> frame,
                                   HoneycombRefPtr<HoneycombRequest> request,
                                   HoneycombRefPtr<HoneycombCallback> callback) override;
  HoneycombRefPtr<HoneycombResourceHandler> GetResourceHandler(
      HoneycombRefPtr<HoneycombBrowser> browser,
      HoneycombRefPtr<HoneycombFrame> frame,
      HoneycombRefPtr<HoneycombRequest> request) override;
  void OnResourceRedirect(HoneycombRefPtr<HoneycombBrowser> browser,
                          HoneycombRefPtr<HoneycombFrame> frame,
                          HoneycombRefPtr<HoneycombRequest> request,
                          HoneycombRefPtr<HoneycombResponse> response,
                          HoneycombString& new_url) override;
  bool OnResourceResponse(HoneycombRefPtr<HoneycombBrowser> browser,
                          HoneycombRefPtr<HoneycombFrame> frame,
                          HoneycombRefPtr<HoneycombRequest> request,
                          HoneycombRefPtr<HoneycombResponse> response) override;
  HoneycombRefPtr<HoneycombResponseFilter> GetResourceResponseFilter(
      HoneycombRefPtr<HoneycombBrowser> browser,
      HoneycombRefPtr<HoneycombFrame> frame,
      HoneycombRefPtr<HoneycombRequest> request,
      HoneycombRefPtr<HoneycombResponse> response) override;
  void OnResourceLoadComplete(HoneycombRefPtr<HoneycombBrowser> browser,
                              HoneycombRefPtr<HoneycombFrame> frame,
                              HoneycombRefPtr<HoneycombRequest> request,
                              HoneycombRefPtr<HoneycombResponse> response,
                              URLRequestStatus status,
                              int64_t received_content_length) override;
  void OnProtocolExecution(HoneycombRefPtr<HoneycombBrowser> browser,
                           HoneycombRefPtr<HoneycombFrame> frame,
                           HoneycombRefPtr<HoneycombRequest> request,
                           bool& allow_os_execution) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_REQUEST_HANDLER_CTOCPP_H_
