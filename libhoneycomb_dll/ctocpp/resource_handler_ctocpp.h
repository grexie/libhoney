// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8fb252b18d67a1b189bd8eafeabde08bf28f0904$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_HANDLER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_HANDLER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_resource_handler_capi.h"
#include "include/honey_resource_handler.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombResourceHandlerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombResourceHandlerCToCpp,
                                 HoneycombResourceHandler,
                                 honey_resource_handler_t> {
 public:
  HoneycombResourceHandlerCToCpp();
  virtual ~HoneycombResourceHandlerCToCpp();

  // HoneycombResourceHandler methods.
  bool Open(HoneycombRefPtr<HoneycombRequest> request,
            bool& handle_request,
            HoneycombRefPtr<HoneycombCallback> callback) override;
  bool ProcessRequest(HoneycombRefPtr<HoneycombRequest> request,
                      HoneycombRefPtr<HoneycombCallback> callback) override;
  void GetResponseHeaders(HoneycombRefPtr<HoneycombResponse> response,
                          int64_t& response_length,
                          HoneycombString& redirectUrl) override;
  bool Skip(int64_t bytes_to_skip,
            int64_t& bytes_skipped,
            HoneycombRefPtr<HoneycombResourceSkipCallback> callback) override;
  bool Read(void* data_out,
            int bytes_to_read,
            int& bytes_read,
            HoneycombRefPtr<HoneycombResourceReadCallback> callback) override;
  bool ReadResponse(void* data_out,
                    int bytes_to_read,
                    int& bytes_read,
                    HoneycombRefPtr<HoneycombCallback> callback) override;
  void Cancel() override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_HANDLER_CTOCPP_H_
