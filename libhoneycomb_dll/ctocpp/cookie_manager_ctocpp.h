// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=47bcf17fac9734852100b8e44bbead84b4ef78dc$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_COOKIE_MANAGER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_COOKIE_MANAGER_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_cookie_capi.h"
#include "include/honey_cookie.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombCookieManagerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombCookieManagerCToCpp,
                                 HoneycombCookieManager,
                                 honey_cookie_manager_t> {
 public:
  HoneycombCookieManagerCToCpp();
  virtual ~HoneycombCookieManagerCToCpp();

  // HoneycombCookieManager methods.
  bool VisitAllCookies(HoneycombRefPtr<HoneycombCookieVisitor> visitor) override;
  bool VisitUrlCookies(const HoneycombString& url,
                       bool includeHttpOnly,
                       HoneycombRefPtr<HoneycombCookieVisitor> visitor) override;
  bool SetCookie(const HoneycombString& url,
                 const HoneycombCookie& cookie,
                 HoneycombRefPtr<HoneycombSetCookieCallback> callback) override;
  bool DeleteCookies(const HoneycombString& url,
                     const HoneycombString& cookie_name,
                     HoneycombRefPtr<HoneycombDeleteCookiesCallback> callback) override;
  bool FlushStore(HoneycombRefPtr<HoneycombCompletionCallback> callback) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_COOKIE_MANAGER_CTOCPP_H_
