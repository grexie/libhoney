// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=a55c1986eac8be1d5d3c9f1fd3b2883bf8957449$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_BROWSER_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_BROWSER_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include <vector>
#include "include/capi/honey_browser_capi.h"
#include "include/capi/honey_client_capi.h"
#include "include/honey_browser.h"
#include "include/honey_client.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombBrowserCToCpp
    : public HoneycombCToCppRefCounted<HoneycombBrowserCToCpp, HoneycombBrowser, honey_browser_t> {
 public:
  HoneycombBrowserCToCpp();
  virtual ~HoneycombBrowserCToCpp();

  // HoneycombBrowser methods.
  bool IsValid() override;
  HoneycombRefPtr<HoneycombBrowserHost> GetHost() override;
  bool CanGoBack() override;
  void GoBack() override;
  bool CanGoForward() override;
  void GoForward() override;
  bool IsLoading() override;
  void Reload() override;
  void ReloadIgnoreCache() override;
  void StopLoad() override;
  int GetIdentifier() override;
  bool IsSame(HoneycombRefPtr<HoneycombBrowser> that) override;
  bool IsPopup() override;
  bool HasDocument() override;
  HoneycombRefPtr<HoneycombFrame> GetMainFrame() override;
  HoneycombRefPtr<HoneycombFrame> GetFocusedFrame() override;
  HoneycombRefPtr<HoneycombFrame> GetFrame(int64_t identifier) override;
  HoneycombRefPtr<HoneycombFrame> GetFrame(const HoneycombString& name) override;
  size_t GetFrameCount() override;
  void GetFrameIdentifiers(std::vector<int64_t>& identifiers) override;
  void GetFrameNames(std::vector<HoneycombString>& names) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_BROWSER_CTOCPP_H_
