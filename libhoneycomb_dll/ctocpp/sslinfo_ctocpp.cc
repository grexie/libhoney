// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=0390ebb66bafe64b20f8c55f156a5c118035e5fc$
//

#include "libhoneycomb_dll/ctocpp/sslinfo_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/x509certificate_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") honey_cert_status_t HoneycombSSLInfoCToCpp::GetCertStatus() {
  shutdown_checker::AssertNotShutdown();

  honey_sslinfo_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_cert_status)) {
    return CERT_STATUS_NONE;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_cert_status_t _retval = _struct->get_cert_status(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombX509Certificate> HoneycombSSLInfoCToCpp::GetX509Certificate() {
  shutdown_checker::AssertNotShutdown();

  honey_sslinfo_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_x509certificate)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_x509certificate_t* _retval = _struct->get_x509certificate(_struct);

  // Return type: refptr_same
  return HoneycombX509CertificateCToCpp::Wrap(_retval);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombSSLInfoCToCpp::HoneycombSSLInfoCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombSSLInfoCToCpp::~HoneycombSSLInfoCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_sslinfo_t*
HoneycombCToCppRefCounted<HoneycombSSLInfoCToCpp, HoneycombSSLInfo, honey_sslinfo_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombSSLInfo* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombSSLInfoCToCpp,
                                   HoneycombSSLInfo,
                                   honey_sslinfo_t>::kWrapperType = WT_SSLINFO;
