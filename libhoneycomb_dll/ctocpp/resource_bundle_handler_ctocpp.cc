// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=a89889b633cfe23052e084a41e2bd6dc3abaca78$
//

#include "libhoneycomb_dll/ctocpp/resource_bundle_handler_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombResourceBundleHandlerCToCpp::GetLocalizedString(int string_id,
                                                        HoneycombString& string) {
  shutdown_checker::AssertNotShutdown();

  honey_resource_bundle_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_localized_string)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_localized_string(_struct, string_id,
                                              string.GetWritableStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombResourceBundleHandlerCToCpp::GetDataResource(int resource_id,
                                                     void*& data,
                                                     size_t& data_size) {
  shutdown_checker::AssertNotShutdown();

  honey_resource_bundle_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_data_resource)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval =
      _struct->get_data_resource(_struct, resource_id, &data, &data_size);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombResourceBundleHandlerCToCpp::GetDataResourceForScale(
    int resource_id,
    ScaleFactor scale_factor,
    void*& data,
    size_t& data_size) {
  shutdown_checker::AssertNotShutdown();

  honey_resource_bundle_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_data_resource_for_scale)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_data_resource_for_scale(
      _struct, resource_id, scale_factor, &data, &data_size);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombResourceBundleHandlerCToCpp::HoneycombResourceBundleHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombResourceBundleHandlerCToCpp::~HoneycombResourceBundleHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_resource_bundle_handler_t* HoneycombCToCppRefCounted<
    HoneycombResourceBundleHandlerCToCpp,
    HoneycombResourceBundleHandler,
    honey_resource_bundle_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                                  HoneycombResourceBundleHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombResourceBundleHandlerCToCpp,
                        HoneycombResourceBundleHandler,
                        honey_resource_bundle_handler_t>::kWrapperType =
        WT_RESOURCE_BUNDLE_HANDLER;
