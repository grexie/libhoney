// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8baec3ed7625e735ebfb911bd92dacecbebe9cb4$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_X509CERT_PRINCIPAL_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_X509CERT_PRINCIPAL_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include <vector>
#include "include/capi/honey_x509_certificate_capi.h"
#include "include/honey_x509_certificate.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombX509CertPrincipalCToCpp
    : public HoneycombCToCppRefCounted<HoneycombX509CertPrincipalCToCpp,
                                 HoneycombX509CertPrincipal,
                                 honey_x509cert_principal_t> {
 public:
  HoneycombX509CertPrincipalCToCpp();
  virtual ~HoneycombX509CertPrincipalCToCpp();

  // HoneycombX509CertPrincipal methods.
  HoneycombString GetDisplayName() override;
  HoneycombString GetCommonName() override;
  HoneycombString GetLocalityName() override;
  HoneycombString GetStateOrProvinceName() override;
  HoneycombString GetCountryName() override;
  void GetOrganizationNames(std::vector<HoneycombString>& names) override;
  void GetOrganizationUnitNames(std::vector<HoneycombString>& names) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_X509CERT_PRINCIPAL_CTOCPP_H_
