// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=b55016db9d45bab1e3716e790257f5bed768c66e$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_REQUEST_CONTEXT_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_REQUEST_CONTEXT_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include <vector>
#include "include/capi/honey_request_context_capi.h"
#include "include/capi/honey_request_context_handler_capi.h"
#include "include/capi/honey_scheme_capi.h"
#include "include/honey_request_context.h"
#include "include/honey_request_context_handler.h"
#include "include/honey_scheme.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombRequestContextCToCpp
    : public HoneycombCToCppRefCounted<HoneycombRequestContextCToCpp,
                                 HoneycombRequestContext,
                                 honey_request_context_t> {
 public:
  HoneycombRequestContextCToCpp();
  virtual ~HoneycombRequestContextCToCpp();

  // HoneycombRequestContext methods.
  bool IsSame(HoneycombRefPtr<HoneycombRequestContext> other) override;
  bool IsSharingWith(HoneycombRefPtr<HoneycombRequestContext> other) override;
  bool IsGlobal() override;
  HoneycombRefPtr<HoneycombRequestContextHandler> GetHandler() override;
  HoneycombString GetCachePath() override;
  HoneycombRefPtr<HoneycombCookieManager> GetCookieManager(
      HoneycombRefPtr<HoneycombCompletionCallback> callback) override;
  bool RegisterSchemeHandlerFactory(
      const HoneycombString& scheme_name,
      const HoneycombString& domain_name,
      HoneycombRefPtr<HoneycombSchemeHandlerFactory> factory) override;
  bool ClearSchemeHandlerFactories() override;
  void ClearCertificateExceptions(
      HoneycombRefPtr<HoneycombCompletionCallback> callback) override;
  void ClearHttpAuthCredentials(
      HoneycombRefPtr<HoneycombCompletionCallback> callback) override;
  void CloseAllConnections(HoneycombRefPtr<HoneycombCompletionCallback> callback) override;
  void ResolveHost(const HoneycombString& origin,
                   HoneycombRefPtr<HoneycombResolveCallback> callback) override;
  void LoadExtension(const HoneycombString& root_directory,
                     HoneycombRefPtr<HoneycombDictionaryValue> manifest,
                     HoneycombRefPtr<HoneycombExtensionHandler> handler) override;
  bool DidLoadExtension(const HoneycombString& extension_id) override;
  bool HasExtension(const HoneycombString& extension_id) override;
  bool GetExtensions(std::vector<HoneycombString>& extension_ids) override;
  HoneycombRefPtr<HoneycombExtension> GetExtension(const HoneycombString& extension_id) override;
  HoneycombRefPtr<HoneycombMediaRouter> GetMediaRouter(
      HoneycombRefPtr<HoneycombCompletionCallback> callback) override;
  HoneycombRefPtr<HoneycombValue> GetWebsiteSetting(
      const HoneycombString& requesting_url,
      const HoneycombString& top_level_url,
      honey_content_setting_types_t content_type) override;
  void SetWebsiteSetting(const HoneycombString& requesting_url,
                         const HoneycombString& top_level_url,
                         honey_content_setting_types_t content_type,
                         HoneycombRefPtr<HoneycombValue> value) override;
  honey_content_setting_values_t GetContentSetting(
      const HoneycombString& requesting_url,
      const HoneycombString& top_level_url,
      honey_content_setting_types_t content_type) override;
  void SetContentSetting(const HoneycombString& requesting_url,
                         const HoneycombString& top_level_url,
                         honey_content_setting_types_t content_type,
                         honey_content_setting_values_t value) override;

  // HoneycombPreferenceManager methods.
  bool HasPreference(const HoneycombString& name) override;
  HoneycombRefPtr<HoneycombValue> GetPreference(const HoneycombString& name) override;
  HoneycombRefPtr<HoneycombDictionaryValue> GetAllPreferences(
      bool include_defaults) override;
  bool CanSetPreference(const HoneycombString& name) override;
  bool SetPreference(const HoneycombString& name,
                     HoneycombRefPtr<HoneycombValue> value,
                     HoneycombString& error) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_REQUEST_CONTEXT_CTOCPP_H_
