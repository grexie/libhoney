// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=52b39b5e284097cb9f674258a89680ca23adb2bb$
//

#include "libhoneycomb_dll/ctocpp/frame_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/domvisitor_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/string_visitor_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/urlrequest_client_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/browser_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/process_message_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/request_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/urlrequest_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/v8context_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombFrameCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::Undo() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, undo)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->undo(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::Redo() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, redo)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->redo(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::Cut() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, cut)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->cut(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::Copy() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, copy)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->copy(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::Paste() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, paste)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->paste(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::Delete() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, del)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->del(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::SelectAll() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, select_all)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->select_all(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::ViewSource() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, view_source)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->view_source(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameCToCpp::GetSource(HoneycombRefPtr<HoneycombStringVisitor> visitor) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_source)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get()) {
    return;
  }

  // Execute
  _struct->get_source(_struct, HoneycombStringVisitorCppToC::Wrap(visitor));
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameCToCpp::GetText(HoneycombRefPtr<HoneycombStringVisitor> visitor) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get()) {
    return;
  }

  // Execute
  _struct->get_text(_struct, HoneycombStringVisitorCppToC::Wrap(visitor));
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameCToCpp::LoadRequest(HoneycombRefPtr<HoneycombRequest> request) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, load_request)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: request; type: refptr_same
  DCHECK(request.get());
  if (!request.get()) {
    return;
  }

  // Execute
  _struct->load_request(_struct, HoneycombRequestCToCpp::Unwrap(request));
}

NO_SANITIZE("cfi-icall") void HoneycombFrameCToCpp::LoadURL(const HoneycombString& url) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, load_url)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty()) {
    return;
  }

  // Execute
  _struct->load_url(_struct, url.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameCToCpp::ExecuteJavaScript(const HoneycombString& code,
                                       const HoneycombString& script_url,
                                       int start_line) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, execute_java_script)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: code; type: string_byref_const
  DCHECK(!code.empty());
  if (code.empty()) {
    return;
  }
  // Unverified params: script_url

  // Execute
  _struct->execute_java_script(_struct, code.GetStruct(),
                               script_url.GetStruct(), start_line);
}

NO_SANITIZE("cfi-icall") bool HoneycombFrameCToCpp::IsMain() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_main)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_main(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombFrameCToCpp::IsFocused() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_focused)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_focused(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombFrameCToCpp::GetName() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_name)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_name(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") int64_t HoneycombFrameCToCpp::GetIdentifier() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_identifier)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int64_t _retval = _struct->get_identifier(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombFrame> HoneycombFrameCToCpp::GetParent() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_parent)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_frame_t* _retval = _struct->get_parent(_struct);

  // Return type: refptr_same
  return HoneycombFrameCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombFrameCToCpp::GetURL() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_url)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_url(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombBrowser> HoneycombFrameCToCpp::GetBrowser() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_browser)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_browser_t* _retval = _struct->get_browser(_struct);

  // Return type: refptr_same
  return HoneycombBrowserCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Context> HoneycombFrameCToCpp::GetV8Context() {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_v8context)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8context_t* _retval = _struct->get_v8context(_struct);

  // Return type: refptr_same
  return HoneycombV8ContextCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameCToCpp::VisitDOM(HoneycombRefPtr<HoneycombDOMVisitor> visitor) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, visit_dom)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get()) {
    return;
  }

  // Execute
  _struct->visit_dom(_struct, HoneycombDOMVisitorCppToC::Wrap(visitor));
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombURLRequest> HoneycombFrameCToCpp::CreateURLRequest(
    HoneycombRefPtr<HoneycombRequest> request,
    HoneycombRefPtr<HoneycombURLRequestClient> client) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, create_urlrequest)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: request; type: refptr_same
  DCHECK(request.get());
  if (!request.get()) {
    return nullptr;
  }
  // Verify param: client; type: refptr_diff
  DCHECK(client.get());
  if (!client.get()) {
    return nullptr;
  }

  // Execute
  honey_urlrequest_t* _retval =
      _struct->create_urlrequest(_struct, HoneycombRequestCToCpp::Unwrap(request),
                                 HoneycombURLRequestClientCppToC::Wrap(client));

  // Return type: refptr_same
  return HoneycombURLRequestCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombFrameCToCpp::SendProcessMessage(HoneycombProcessId target_process,
                                        HoneycombRefPtr<HoneycombProcessMessage> message) {
  shutdown_checker::AssertNotShutdown();

  honey_frame_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, send_process_message)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: message; type: refptr_same
  DCHECK(message.get());
  if (!message.get()) {
    return;
  }

  // Execute
  _struct->send_process_message(_struct, target_process,
                                HoneycombProcessMessageCToCpp::Unwrap(message));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombFrameCToCpp::HoneycombFrameCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombFrameCToCpp::~HoneycombFrameCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_frame_t*
HoneycombCToCppRefCounted<HoneycombFrameCToCpp, HoneycombFrame, honey_frame_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombFrame* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombFrameCToCpp, HoneycombFrame, honey_frame_t>::kWrapperType =
        WT_FRAME;
