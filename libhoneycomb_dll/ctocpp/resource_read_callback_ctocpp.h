// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=aeb2eaecc30bb2498b709af0ec45dd6b5dc9b392$
//

#ifndef HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_READ_CALLBACK_CTOCPP_H_
#define HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_READ_CALLBACK_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_resource_handler_capi.h"
#include "include/honey_resource_handler.h"
#include "libhoneycomb_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombResourceReadCallbackCToCpp
    : public HoneycombCToCppRefCounted<HoneycombResourceReadCallbackCToCpp,
                                 HoneycombResourceReadCallback,
                                 honey_resource_read_callback_t> {
 public:
  HoneycombResourceReadCallbackCToCpp();
  virtual ~HoneycombResourceReadCallbackCToCpp();

  // HoneycombResourceReadCallback methods.
  void Continue(int bytes_read) override;
};

#endif  // HONEYCOMB_LIBHONEYCOMB_DLL_CTOCPP_RESOURCE_READ_CALLBACK_CTOCPP_H_
