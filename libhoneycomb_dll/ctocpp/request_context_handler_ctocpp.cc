// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=85cfe06a67d84dde8c980d3c888f88eb382a9f55$
//

#include "libhoneycomb_dll/ctocpp/request_context_handler_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/browser_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/frame_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/request_context_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/request_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/resource_request_handler_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombRequestContextHandlerCToCpp::OnRequestContextInitialized(
    HoneycombRefPtr<HoneycombRequestContext> request_context) {
  honey_request_context_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_request_context_initialized)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: request_context; type: refptr_diff
  DCHECK(request_context.get());
  if (!request_context.get()) {
    return;
  }

  // Execute
  _struct->on_request_context_initialized(
      _struct, HoneycombRequestContextCppToC::Wrap(request_context));
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombResourceRequestHandler>
HoneycombRequestContextHandlerCToCpp::GetResourceRequestHandler(
    HoneycombRefPtr<HoneycombBrowser> browser,
    HoneycombRefPtr<HoneycombFrame> frame,
    HoneycombRefPtr<HoneycombRequest> request,
    bool is_navigation,
    bool is_download,
    const HoneycombString& request_initiator,
    bool& disable_default_handling) {
  honey_request_context_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_resource_request_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: request; type: refptr_diff
  DCHECK(request.get());
  if (!request.get()) {
    return nullptr;
  }
  // Unverified params: browser, frame, request_initiator

  // Translate param: disable_default_handling; type: bool_byref
  int disable_default_handlingInt = disable_default_handling;

  // Execute
  honey_resource_request_handler_t* _retval =
      _struct->get_resource_request_handler(
          _struct, HoneycombBrowserCppToC::Wrap(browser), HoneycombFrameCppToC::Wrap(frame),
          HoneycombRequestCppToC::Wrap(request), is_navigation, is_download,
          request_initiator.GetStruct(), &disable_default_handlingInt);

  // Restore param:disable_default_handling; type: bool_byref
  disable_default_handling = disable_default_handlingInt ? true : false;

  // Return type: refptr_same
  return HoneycombResourceRequestHandlerCToCpp::Wrap(_retval);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombRequestContextHandlerCToCpp::HoneycombRequestContextHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombRequestContextHandlerCToCpp::~HoneycombRequestContextHandlerCToCpp() {}

template <>
honey_request_context_handler_t* HoneycombCToCppRefCounted<
    HoneycombRequestContextHandlerCToCpp,
    HoneycombRequestContextHandler,
    honey_request_context_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                                  HoneycombRequestContextHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombRequestContextHandlerCToCpp,
                        HoneycombRequestContextHandler,
                        honey_request_context_handler_t>::kWrapperType =
        WT_REQUEST_CONTEXT_HANDLER;
