// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=b1961c4ff6c203edef2f48bdbb5ac773815a15c7$
//

#include "libhoneycomb_dll/ctocpp/extension_handler_ctocpp.h"
#include "libhoneycomb_dll/cpptoc/browser_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/extension_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/get_extension_resource_callback_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/client_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombExtensionHandlerCToCpp::OnExtensionLoadFailed(honey_errorcode_t result) {
  shutdown_checker::AssertNotShutdown();

  honey_extension_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_extension_load_failed)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->on_extension_load_failed(_struct, result);
}

NO_SANITIZE("cfi-icall")
void HoneycombExtensionHandlerCToCpp::OnExtensionLoaded(
    HoneycombRefPtr<HoneycombExtension> extension) {
  shutdown_checker::AssertNotShutdown();

  honey_extension_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_extension_loaded)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension; type: refptr_diff
  DCHECK(extension.get());
  if (!extension.get()) {
    return;
  }

  // Execute
  _struct->on_extension_loaded(_struct, HoneycombExtensionCppToC::Wrap(extension));
}

NO_SANITIZE("cfi-icall")
void HoneycombExtensionHandlerCToCpp::OnExtensionUnloaded(
    HoneycombRefPtr<HoneycombExtension> extension) {
  shutdown_checker::AssertNotShutdown();

  honey_extension_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_extension_unloaded)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension; type: refptr_diff
  DCHECK(extension.get());
  if (!extension.get()) {
    return;
  }

  // Execute
  _struct->on_extension_unloaded(_struct, HoneycombExtensionCppToC::Wrap(extension));
}

NO_SANITIZE("cfi-icall")
bool HoneycombExtensionHandlerCToCpp::OnBeforeBackgroundBrowser(
    HoneycombRefPtr<HoneycombExtension> extension,
    const HoneycombString& url,
    HoneycombRefPtr<HoneycombClient>& client,
    HoneycombBrowserSettings& settings) {
  shutdown_checker::AssertNotShutdown();

  honey_extension_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_before_background_browser)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension; type: refptr_diff
  DCHECK(extension.get());
  if (!extension.get()) {
    return false;
  }
  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty()) {
    return false;
  }

  // Translate param: client; type: refptr_same_byref
  honey_client_t* clientStruct = NULL;
  if (client.get()) {
    clientStruct = HoneycombClientCToCpp::Unwrap(client);
  }
  honey_client_t* clientOrig = clientStruct;

  // Execute
  int _retval = _struct->on_before_background_browser(
      _struct, HoneycombExtensionCppToC::Wrap(extension), url.GetStruct(),
      &clientStruct, &settings);

  // Restore param:client; type: refptr_same_byref
  if (clientStruct) {
    if (clientStruct != clientOrig) {
      client = HoneycombClientCToCpp::Wrap(clientStruct);
    }
  } else {
    client = nullptr;
  }

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombExtensionHandlerCToCpp::OnBeforeBrowser(
    HoneycombRefPtr<HoneycombExtension> extension,
    HoneycombRefPtr<HoneycombBrowser> browser,
    HoneycombRefPtr<HoneycombBrowser> active_browser,
    int index,
    const HoneycombString& url,
    bool active,
    HoneycombWindowInfo& windowInfo,
    HoneycombRefPtr<HoneycombClient>& client,
    HoneycombBrowserSettings& settings) {
  shutdown_checker::AssertNotShutdown();

  honey_extension_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_before_browser)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension; type: refptr_diff
  DCHECK(extension.get());
  if (!extension.get()) {
    return false;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }
  // Verify param: active_browser; type: refptr_diff
  DCHECK(active_browser.get());
  if (!active_browser.get()) {
    return false;
  }
  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty()) {
    return false;
  }

  // Translate param: client; type: refptr_same_byref
  honey_client_t* clientStruct = NULL;
  if (client.get()) {
    clientStruct = HoneycombClientCToCpp::Unwrap(client);
  }
  honey_client_t* clientOrig = clientStruct;

  // Execute
  int _retval = _struct->on_before_browser(
      _struct, HoneycombExtensionCppToC::Wrap(extension),
      HoneycombBrowserCppToC::Wrap(browser), HoneycombBrowserCppToC::Wrap(active_browser),
      index, url.GetStruct(), active, &windowInfo, &clientStruct, &settings);

  // Restore param:client; type: refptr_same_byref
  if (clientStruct) {
    if (clientStruct != clientOrig) {
      client = HoneycombClientCToCpp::Wrap(clientStruct);
    }
  } else {
    client = nullptr;
  }

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBrowser> HoneycombExtensionHandlerCToCpp::GetActiveBrowser(
    HoneycombRefPtr<HoneycombExtension> extension,
    HoneycombRefPtr<HoneycombBrowser> browser,
    bool include_incognito) {
  shutdown_checker::AssertNotShutdown();

  honey_extension_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_active_browser)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension; type: refptr_diff
  DCHECK(extension.get());
  if (!extension.get()) {
    return nullptr;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return nullptr;
  }

  // Execute
  honey_browser_t* _retval = _struct->get_active_browser(
      _struct, HoneycombExtensionCppToC::Wrap(extension),
      HoneycombBrowserCppToC::Wrap(browser), include_incognito);

  // Return type: refptr_diff
  return HoneycombBrowserCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall")
bool HoneycombExtensionHandlerCToCpp::CanAccessBrowser(
    HoneycombRefPtr<HoneycombExtension> extension,
    HoneycombRefPtr<HoneycombBrowser> browser,
    bool include_incognito,
    HoneycombRefPtr<HoneycombBrowser> target_browser) {
  shutdown_checker::AssertNotShutdown();

  honey_extension_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, can_access_browser)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension; type: refptr_diff
  DCHECK(extension.get());
  if (!extension.get()) {
    return false;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }
  // Verify param: target_browser; type: refptr_diff
  DCHECK(target_browser.get());
  if (!target_browser.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->can_access_browser(
      _struct, HoneycombExtensionCppToC::Wrap(extension),
      HoneycombBrowserCppToC::Wrap(browser), include_incognito,
      HoneycombBrowserCppToC::Wrap(target_browser));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombExtensionHandlerCToCpp::GetExtensionResource(
    HoneycombRefPtr<HoneycombExtension> extension,
    HoneycombRefPtr<HoneycombBrowser> browser,
    const HoneycombString& file,
    HoneycombRefPtr<HoneycombGetExtensionResourceCallback> callback) {
  shutdown_checker::AssertNotShutdown();

  honey_extension_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_extension_resource)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension; type: refptr_diff
  DCHECK(extension.get());
  if (!extension.get()) {
    return false;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }
  // Verify param: file; type: string_byref_const
  DCHECK(!file.empty());
  if (file.empty()) {
    return false;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback.get());
  if (!callback.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->get_extension_resource(
      _struct, HoneycombExtensionCppToC::Wrap(extension),
      HoneycombBrowserCppToC::Wrap(browser), file.GetStruct(),
      HoneycombGetExtensionResourceCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombExtensionHandlerCToCpp::HoneycombExtensionHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombExtensionHandlerCToCpp::~HoneycombExtensionHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_extension_handler_t* HoneycombCToCppRefCounted<
    HoneycombExtensionHandlerCToCpp,
    HoneycombExtensionHandler,
    honey_extension_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                            HoneycombExtensionHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombExtensionHandlerCToCpp,
                                   HoneycombExtensionHandler,
                                   honey_extension_handler_t>::kWrapperType =
    WT_EXTENSION_HANDLER;
