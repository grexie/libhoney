// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=bcad216e5fef8b9c10a895524f8b1201608138f9$
//

#include <dlfcn.h>
#include <stdio.h>

#include "include/base/honey_compiler_specific.h"
#include "include/capi/honey_app_capi.h"
#include "include/capi/honey_browser_capi.h"
#include "include/capi/honey_command_line_capi.h"
#include "include/capi/honey_cookie_capi.h"
#include "include/capi/honey_crash_util_capi.h"
#include "include/capi/honey_drag_data_capi.h"
#include "include/capi/honey_file_util_capi.h"
#include "include/capi/honey_i18n_util_capi.h"
#include "include/capi/honey_image_capi.h"
#include "include/capi/honey_media_router_capi.h"
#include "include/capi/honey_menu_model_capi.h"
#include "include/capi/honey_origin_whitelist_capi.h"
#include "include/capi/honey_parser_capi.h"
#include "include/capi/honey_path_util_capi.h"
#include "include/capi/honey_preference_capi.h"
#include "include/capi/honey_print_settings_capi.h"
#include "include/capi/honey_process_message_capi.h"
#include "include/capi/honey_process_util_capi.h"
#include "include/capi/honey_request_capi.h"
#include "include/capi/honey_request_context_capi.h"
#include "include/capi/honey_resource_bundle_capi.h"
#include "include/capi/honey_response_capi.h"
#include "include/capi/honey_scheme_capi.h"
#include "include/capi/honey_server_capi.h"
#include "include/capi/honey_shared_process_message_builder_capi.h"
#include "include/capi/honey_ssl_info_capi.h"
#include "include/capi/honey_stream_capi.h"
#include "include/capi/honey_task_capi.h"
#include "include/capi/honey_thread_capi.h"
#include "include/capi/honey_trace_capi.h"
#include "include/capi/honey_urlrequest_capi.h"
#include "include/capi/honey_v8_capi.h"
#include "include/capi/honey_values_capi.h"
#include "include/capi/honey_waitable_event_capi.h"
#include "include/capi/honey_xml_reader_capi.h"
#include "include/capi/honey_zip_reader_capi.h"
#include "include/capi/test/honey_test_helpers_capi.h"
#include "include/capi/test/honey_test_server_capi.h"
#include "include/capi/test/honey_translator_test_capi.h"
#include "include/capi/views/honey_browser_view_capi.h"
#include "include/capi/views/honey_display_capi.h"
#include "include/capi/views/honey_label_button_capi.h"
#include "include/capi/views/honey_menu_button_capi.h"
#include "include/capi/views/honey_panel_capi.h"
#include "include/capi/views/honey_scroll_view_capi.h"
#include "include/capi/views/honey_textfield_capi.h"
#include "include/capi/views/honey_window_capi.h"
#include "include/honey_api_hash.h"
#include "include/honey_version.h"
#include "include/internal/honey_logging_internal.h"
#include "include/internal/honey_string_list.h"
#include "include/internal/honey_string_map.h"
#include "include/internal/honey_string_multimap.h"
#include "include/internal/honey_string_types.h"
#include "include/internal/honey_thread_internal.h"
#include "include/internal/honey_time.h"
#include "include/internal/honey_trace_event_internal.h"
#include "include/wrapper/honey_library_loader.h"

// GLOBAL WRAPPER FUNCTIONS - Do not edit by hand.

namespace {

void* g_libhoneycomb_handle = nullptr;

void* libhoneycomb_get_ptr(const char* path, const char* name) {
  void* ptr = dlsym(g_libhoneycomb_handle, name);
  if (!ptr) {
    fprintf(stderr, "dlsym %s: %s\n", path, dlerror());
  }
  return ptr;
}

struct libhoneycomb_pointers {
  decltype(&honey_execute_process) honey_execute_process;
  decltype(&honey_initialize) honey_initialize;
  decltype(&honey_shutdown) honey_shutdown;
  decltype(&honey_do_message_loop_work) honey_do_message_loop_work;
  decltype(&honey_run_message_loop) honey_run_message_loop;
  decltype(&honey_quit_message_loop) honey_quit_message_loop;
  decltype(&honey_crash_reporting_enabled) honey_crash_reporting_enabled;
  decltype(&honey_set_crash_key_value) honey_set_crash_key_value;
  decltype(&honey_create_directory) honey_create_directory;
  decltype(&honey_get_temp_directory) honey_get_temp_directory;
  decltype(&honey_create_new_temp_directory) honey_create_new_temp_directory;
  decltype(&honey_create_temp_directory_in_directory)
      honey_create_temp_directory_in_directory;
  decltype(&honey_directory_exists) honey_directory_exists;
  decltype(&honey_delete_file) honey_delete_file;
  decltype(&honey_zip_directory) honey_zip_directory;
  decltype(&honey_load_crlsets_file) honey_load_crlsets_file;
  decltype(&honey_is_rtl) honey_is_rtl;
  decltype(&honey_add_cross_origin_whitelist_entry)
      honey_add_cross_origin_whitelist_entry;
  decltype(&honey_remove_cross_origin_whitelist_entry)
      honey_remove_cross_origin_whitelist_entry;
  decltype(&honey_clear_cross_origin_whitelist) honey_clear_cross_origin_whitelist;
  decltype(&honey_resolve_url) honey_resolve_url;
  decltype(&honey_parse_url) honey_parse_url;
  decltype(&honey_create_url) honey_create_url;
  decltype(&honey_format_url_for_security_display)
      honey_format_url_for_security_display;
  decltype(&honey_get_mime_type) honey_get_mime_type;
  decltype(&honey_get_extensions_for_mime_type) honey_get_extensions_for_mime_type;
  decltype(&honey_base64encode) honey_base64encode;
  decltype(&honey_base64decode) honey_base64decode;
  decltype(&honey_uriencode) honey_uriencode;
  decltype(&honey_uridecode) honey_uridecode;
  decltype(&honey_parse_json) honey_parse_json;
  decltype(&honey_parse_json_buffer) honey_parse_json_buffer;
  decltype(&honey_parse_jsonand_return_error) honey_parse_jsonand_return_error;
  decltype(&honey_write_json) honey_write_json;
  decltype(&honey_get_path) honey_get_path;
  decltype(&honey_launch_process) honey_launch_process;
  decltype(&honey_register_scheme_handler_factory)
      honey_register_scheme_handler_factory;
  decltype(&honey_clear_scheme_handler_factories)
      honey_clear_scheme_handler_factories;
  decltype(&honey_is_cert_status_error) honey_is_cert_status_error;
  decltype(&honey_currently_on) honey_currently_on;
  decltype(&honey_post_task) honey_post_task;
  decltype(&honey_post_delayed_task) honey_post_delayed_task;
  decltype(&honey_begin_tracing) honey_begin_tracing;
  decltype(&honey_end_tracing) honey_end_tracing;
  decltype(&honey_now_from_system_trace_time) honey_now_from_system_trace_time;
  decltype(&honey_register_extension) honey_register_extension;
  decltype(&honey_execute_java_script_with_user_gesture_for_tests)
      honey_execute_java_script_with_user_gesture_for_tests;
  decltype(&honey_set_data_directory_for_tests) honey_set_data_directory_for_tests;
  decltype(&honey_browser_host_create_browser) honey_browser_host_create_browser;
  decltype(&honey_browser_host_create_browser_sync)
      honey_browser_host_create_browser_sync;
  decltype(&honey_command_line_create) honey_command_line_create;
  decltype(&honey_command_line_get_global) honey_command_line_get_global;
  decltype(&honey_cookie_manager_get_global_manager)
      honey_cookie_manager_get_global_manager;
  decltype(&honey_drag_data_create) honey_drag_data_create;
  decltype(&honey_image_create) honey_image_create;
  decltype(&honey_media_router_get_global) honey_media_router_get_global;
  decltype(&honey_menu_model_create) honey_menu_model_create;
  decltype(&honey_preference_manager_get_global)
      honey_preference_manager_get_global;
  decltype(&honey_print_settings_create) honey_print_settings_create;
  decltype(&honey_process_message_create) honey_process_message_create;
  decltype(&honey_request_create) honey_request_create;
  decltype(&honey_post_data_create) honey_post_data_create;
  decltype(&honey_post_data_element_create) honey_post_data_element_create;
  decltype(&honey_request_context_get_global_context)
      honey_request_context_get_global_context;
  decltype(&honey_request_context_create_context)
      honey_request_context_create_context;
  decltype(&honey_create_context_shared) honey_create_context_shared;
  decltype(&honey_resource_bundle_get_global) honey_resource_bundle_get_global;
  decltype(&honey_response_create) honey_response_create;
  decltype(&honey_server_create) honey_server_create;
  decltype(&honey_shared_process_message_builder_create)
      honey_shared_process_message_builder_create;
  decltype(&honey_stream_reader_create_for_file)
      honey_stream_reader_create_for_file;
  decltype(&honey_stream_reader_create_for_data)
      honey_stream_reader_create_for_data;
  decltype(&honey_stream_reader_create_for_handler)
      honey_stream_reader_create_for_handler;
  decltype(&honey_stream_writer_create_for_file)
      honey_stream_writer_create_for_file;
  decltype(&honey_stream_writer_create_for_handler)
      honey_stream_writer_create_for_handler;
  decltype(&honey_task_runner_get_for_current_thread)
      honey_task_runner_get_for_current_thread;
  decltype(&honey_task_runner_get_for_thread) honey_task_runner_get_for_thread;
  decltype(&honey_thread_create) honey_thread_create;
  decltype(&honey_urlrequest_create) honey_urlrequest_create;
  decltype(&honey_v8context_get_current_context)
      honey_v8context_get_current_context;
  decltype(&honey_v8context_get_entered_context)
      honey_v8context_get_entered_context;
  decltype(&honey_v8context_in_context) honey_v8context_in_context;
  decltype(&honey_v8value_create_undefined) honey_v8value_create_undefined;
  decltype(&honey_v8value_create_null) honey_v8value_create_null;
  decltype(&honey_v8value_create_bool) honey_v8value_create_bool;
  decltype(&honey_v8value_create_int) honey_v8value_create_int;
  decltype(&honey_v8value_create_uint) honey_v8value_create_uint;
  decltype(&honey_v8value_create_double) honey_v8value_create_double;
  decltype(&honey_v8value_create_date) honey_v8value_create_date;
  decltype(&honey_v8value_create_string) honey_v8value_create_string;
  decltype(&honey_v8value_create_object) honey_v8value_create_object;
  decltype(&honey_v8value_create_array) honey_v8value_create_array;
  decltype(&honey_v8value_create_array_buffer) honey_v8value_create_array_buffer;
  decltype(&honey_v8value_create_function) honey_v8value_create_function;
  decltype(&honey_v8value_create_promise) honey_v8value_create_promise;
  decltype(&honey_v8stack_trace_get_current) honey_v8stack_trace_get_current;
  decltype(&honey_value_create) honey_value_create;
  decltype(&honey_binary_value_create) honey_binary_value_create;
  decltype(&honey_dictionary_value_create) honey_dictionary_value_create;
  decltype(&honey_list_value_create) honey_list_value_create;
  decltype(&honey_waitable_event_create) honey_waitable_event_create;
  decltype(&honey_xml_reader_create) honey_xml_reader_create;
  decltype(&honey_zip_reader_create) honey_zip_reader_create;
  decltype(&honey_test_server_create_and_start) honey_test_server_create_and_start;
  decltype(&honey_translator_test_create) honey_translator_test_create;
  decltype(&honey_translator_test_ref_ptr_library_create)
      honey_translator_test_ref_ptr_library_create;
  decltype(&honey_translator_test_ref_ptr_library_child_create)
      honey_translator_test_ref_ptr_library_child_create;
  decltype(&honey_translator_test_ref_ptr_library_child_child_create)
      honey_translator_test_ref_ptr_library_child_child_create;
  decltype(&honey_translator_test_scoped_library_create)
      honey_translator_test_scoped_library_create;
  decltype(&honey_translator_test_scoped_library_child_create)
      honey_translator_test_scoped_library_child_create;
  decltype(&honey_translator_test_scoped_library_child_child_create)
      honey_translator_test_scoped_library_child_child_create;
  decltype(&honey_browser_view_create) honey_browser_view_create;
  decltype(&honey_browser_view_get_for_browser) honey_browser_view_get_for_browser;
  decltype(&honey_display_get_primary) honey_display_get_primary;
  decltype(&honey_display_get_nearest_point) honey_display_get_nearest_point;
  decltype(&honey_display_get_matching_bounds) honey_display_get_matching_bounds;
  decltype(&honey_display_get_count) honey_display_get_count;
  decltype(&honey_display_get_alls) honey_display_get_alls;
  decltype(&honey_display_convert_screen_point_to_pixels)
      honey_display_convert_screen_point_to_pixels;
  decltype(&honey_display_convert_screen_point_from_pixels)
      honey_display_convert_screen_point_from_pixels;
  decltype(&honey_display_convert_screen_rect_to_pixels)
      honey_display_convert_screen_rect_to_pixels;
  decltype(&honey_display_convert_screen_rect_from_pixels)
      honey_display_convert_screen_rect_from_pixels;
  decltype(&honey_label_button_create) honey_label_button_create;
  decltype(&honey_menu_button_create) honey_menu_button_create;
  decltype(&honey_panel_create) honey_panel_create;
  decltype(&honey_scroll_view_create) honey_scroll_view_create;
  decltype(&honey_textfield_create) honey_textfield_create;
  decltype(&honey_window_create_top_level) honey_window_create_top_level;
  decltype(&honey_api_hash) honey_api_hash;
  decltype(&honey_version_info) honey_version_info;
  decltype(&honey_get_min_log_level) honey_get_min_log_level;
  decltype(&honey_get_vlog_level) honey_get_vlog_level;
  decltype(&honey_log) honey_log;
  decltype(&honey_string_list_alloc) honey_string_list_alloc;
  decltype(&honey_string_list_size) honey_string_list_size;
  decltype(&honey_string_list_value) honey_string_list_value;
  decltype(&honey_string_list_append) honey_string_list_append;
  decltype(&honey_string_list_clear) honey_string_list_clear;
  decltype(&honey_string_list_free) honey_string_list_free;
  decltype(&honey_string_list_copy) honey_string_list_copy;
  decltype(&honey_string_map_alloc) honey_string_map_alloc;
  decltype(&honey_string_map_size) honey_string_map_size;
  decltype(&honey_string_map_find) honey_string_map_find;
  decltype(&honey_string_map_key) honey_string_map_key;
  decltype(&honey_string_map_value) honey_string_map_value;
  decltype(&honey_string_map_append) honey_string_map_append;
  decltype(&honey_string_map_clear) honey_string_map_clear;
  decltype(&honey_string_map_free) honey_string_map_free;
  decltype(&honey_string_multimap_alloc) honey_string_multimap_alloc;
  decltype(&honey_string_multimap_size) honey_string_multimap_size;
  decltype(&honey_string_multimap_find_count) honey_string_multimap_find_count;
  decltype(&honey_string_multimap_enumerate) honey_string_multimap_enumerate;
  decltype(&honey_string_multimap_key) honey_string_multimap_key;
  decltype(&honey_string_multimap_value) honey_string_multimap_value;
  decltype(&honey_string_multimap_append) honey_string_multimap_append;
  decltype(&honey_string_multimap_clear) honey_string_multimap_clear;
  decltype(&honey_string_multimap_free) honey_string_multimap_free;
  decltype(&honey_string_wide_set) honey_string_wide_set;
  decltype(&honey_string_utf8_set) honey_string_utf8_set;
  decltype(&honey_string_utf16_set) honey_string_utf16_set;
  decltype(&honey_string_wide_clear) honey_string_wide_clear;
  decltype(&honey_string_utf8_clear) honey_string_utf8_clear;
  decltype(&honey_string_utf16_clear) honey_string_utf16_clear;
  decltype(&honey_string_wide_cmp) honey_string_wide_cmp;
  decltype(&honey_string_utf8_cmp) honey_string_utf8_cmp;
  decltype(&honey_string_utf16_cmp) honey_string_utf16_cmp;
  decltype(&honey_string_wide_to_utf8) honey_string_wide_to_utf8;
  decltype(&honey_string_utf8_to_wide) honey_string_utf8_to_wide;
  decltype(&honey_string_wide_to_utf16) honey_string_wide_to_utf16;
  decltype(&honey_string_utf16_to_wide) honey_string_utf16_to_wide;
  decltype(&honey_string_utf8_to_utf16) honey_string_utf8_to_utf16;
  decltype(&honey_string_utf16_to_utf8) honey_string_utf16_to_utf8;
  decltype(&honey_string_ascii_to_wide) honey_string_ascii_to_wide;
  decltype(&honey_string_ascii_to_utf16) honey_string_ascii_to_utf16;
  decltype(&honey_string_userfree_wide_alloc) honey_string_userfree_wide_alloc;
  decltype(&honey_string_userfree_utf8_alloc) honey_string_userfree_utf8_alloc;
  decltype(&honey_string_userfree_utf16_alloc) honey_string_userfree_utf16_alloc;
  decltype(&honey_string_userfree_wide_free) honey_string_userfree_wide_free;
  decltype(&honey_string_userfree_utf8_free) honey_string_userfree_utf8_free;
  decltype(&honey_string_userfree_utf16_free) honey_string_userfree_utf16_free;
  decltype(&honey_string_utf16_to_lower) honey_string_utf16_to_lower;
  decltype(&honey_string_utf16_to_upper) honey_string_utf16_to_upper;
  decltype(&honey_get_current_platform_thread_id)
      honey_get_current_platform_thread_id;
  decltype(&honey_get_current_platform_thread_handle)
      honey_get_current_platform_thread_handle;
  decltype(&honey_time_to_timet) honey_time_to_timet;
  decltype(&honey_time_from_timet) honey_time_from_timet;
  decltype(&honey_time_to_doublet) honey_time_to_doublet;
  decltype(&honey_time_from_doublet) honey_time_from_doublet;
  decltype(&honey_time_now) honey_time_now;
  decltype(&honey_basetime_now) honey_basetime_now;
  decltype(&honey_time_delta) honey_time_delta;
  decltype(&honey_time_to_basetime) honey_time_to_basetime;
  decltype(&honey_time_from_basetime) honey_time_from_basetime;
  decltype(&honey_trace_event_instant) honey_trace_event_instant;
  decltype(&honey_trace_event_begin) honey_trace_event_begin;
  decltype(&honey_trace_event_end) honey_trace_event_end;
  decltype(&honey_trace_counter) honey_trace_counter;
  decltype(&honey_trace_counter_id) honey_trace_counter_id;
  decltype(&honey_trace_event_async_begin) honey_trace_event_async_begin;
  decltype(&honey_trace_event_async_step_into) honey_trace_event_async_step_into;
  decltype(&honey_trace_event_async_step_past) honey_trace_event_async_step_past;
  decltype(&honey_trace_event_async_end) honey_trace_event_async_end;

} g_libhoneycomb_pointers = {0};

#define INIT_ENTRY(name)                                                 \
  g_libhoneycomb_pointers.name = (decltype(&name))libhoneycomb_get_ptr(path, #name); \
  if (!g_libhoneycomb_pointers.name) {                                         \
    return 0;                                                            \
  }

int libhoneycomb_init_pointers(const char* path) {
  INIT_ENTRY(honey_execute_process);
  INIT_ENTRY(honey_initialize);
  INIT_ENTRY(honey_shutdown);
  INIT_ENTRY(honey_do_message_loop_work);
  INIT_ENTRY(honey_run_message_loop);
  INIT_ENTRY(honey_quit_message_loop);
  INIT_ENTRY(honey_crash_reporting_enabled);
  INIT_ENTRY(honey_set_crash_key_value);
  INIT_ENTRY(honey_create_directory);
  INIT_ENTRY(honey_get_temp_directory);
  INIT_ENTRY(honey_create_new_temp_directory);
  INIT_ENTRY(honey_create_temp_directory_in_directory);
  INIT_ENTRY(honey_directory_exists);
  INIT_ENTRY(honey_delete_file);
  INIT_ENTRY(honey_zip_directory);
  INIT_ENTRY(honey_load_crlsets_file);
  INIT_ENTRY(honey_is_rtl);
  INIT_ENTRY(honey_add_cross_origin_whitelist_entry);
  INIT_ENTRY(honey_remove_cross_origin_whitelist_entry);
  INIT_ENTRY(honey_clear_cross_origin_whitelist);
  INIT_ENTRY(honey_resolve_url);
  INIT_ENTRY(honey_parse_url);
  INIT_ENTRY(honey_create_url);
  INIT_ENTRY(honey_format_url_for_security_display);
  INIT_ENTRY(honey_get_mime_type);
  INIT_ENTRY(honey_get_extensions_for_mime_type);
  INIT_ENTRY(honey_base64encode);
  INIT_ENTRY(honey_base64decode);
  INIT_ENTRY(honey_uriencode);
  INIT_ENTRY(honey_uridecode);
  INIT_ENTRY(honey_parse_json);
  INIT_ENTRY(honey_parse_json_buffer);
  INIT_ENTRY(honey_parse_jsonand_return_error);
  INIT_ENTRY(honey_write_json);
  INIT_ENTRY(honey_get_path);
  INIT_ENTRY(honey_launch_process);
  INIT_ENTRY(honey_register_scheme_handler_factory);
  INIT_ENTRY(honey_clear_scheme_handler_factories);
  INIT_ENTRY(honey_is_cert_status_error);
  INIT_ENTRY(honey_currently_on);
  INIT_ENTRY(honey_post_task);
  INIT_ENTRY(honey_post_delayed_task);
  INIT_ENTRY(honey_begin_tracing);
  INIT_ENTRY(honey_end_tracing);
  INIT_ENTRY(honey_now_from_system_trace_time);
  INIT_ENTRY(honey_register_extension);
  INIT_ENTRY(honey_execute_java_script_with_user_gesture_for_tests);
  INIT_ENTRY(honey_set_data_directory_for_tests);
  INIT_ENTRY(honey_browser_host_create_browser);
  INIT_ENTRY(honey_browser_host_create_browser_sync);
  INIT_ENTRY(honey_command_line_create);
  INIT_ENTRY(honey_command_line_get_global);
  INIT_ENTRY(honey_cookie_manager_get_global_manager);
  INIT_ENTRY(honey_drag_data_create);
  INIT_ENTRY(honey_image_create);
  INIT_ENTRY(honey_media_router_get_global);
  INIT_ENTRY(honey_menu_model_create);
  INIT_ENTRY(honey_preference_manager_get_global);
  INIT_ENTRY(honey_print_settings_create);
  INIT_ENTRY(honey_process_message_create);
  INIT_ENTRY(honey_request_create);
  INIT_ENTRY(honey_post_data_create);
  INIT_ENTRY(honey_post_data_element_create);
  INIT_ENTRY(honey_request_context_get_global_context);
  INIT_ENTRY(honey_request_context_create_context);
  INIT_ENTRY(honey_create_context_shared);
  INIT_ENTRY(honey_resource_bundle_get_global);
  INIT_ENTRY(honey_response_create);
  INIT_ENTRY(honey_server_create);
  INIT_ENTRY(honey_shared_process_message_builder_create);
  INIT_ENTRY(honey_stream_reader_create_for_file);
  INIT_ENTRY(honey_stream_reader_create_for_data);
  INIT_ENTRY(honey_stream_reader_create_for_handler);
  INIT_ENTRY(honey_stream_writer_create_for_file);
  INIT_ENTRY(honey_stream_writer_create_for_handler);
  INIT_ENTRY(honey_task_runner_get_for_current_thread);
  INIT_ENTRY(honey_task_runner_get_for_thread);
  INIT_ENTRY(honey_thread_create);
  INIT_ENTRY(honey_urlrequest_create);
  INIT_ENTRY(honey_v8context_get_current_context);
  INIT_ENTRY(honey_v8context_get_entered_context);
  INIT_ENTRY(honey_v8context_in_context);
  INIT_ENTRY(honey_v8value_create_undefined);
  INIT_ENTRY(honey_v8value_create_null);
  INIT_ENTRY(honey_v8value_create_bool);
  INIT_ENTRY(honey_v8value_create_int);
  INIT_ENTRY(honey_v8value_create_uint);
  INIT_ENTRY(honey_v8value_create_double);
  INIT_ENTRY(honey_v8value_create_date);
  INIT_ENTRY(honey_v8value_create_string);
  INIT_ENTRY(honey_v8value_create_object);
  INIT_ENTRY(honey_v8value_create_array);
  INIT_ENTRY(honey_v8value_create_array_buffer);
  INIT_ENTRY(honey_v8value_create_function);
  INIT_ENTRY(honey_v8value_create_promise);
  INIT_ENTRY(honey_v8stack_trace_get_current);
  INIT_ENTRY(honey_value_create);
  INIT_ENTRY(honey_binary_value_create);
  INIT_ENTRY(honey_dictionary_value_create);
  INIT_ENTRY(honey_list_value_create);
  INIT_ENTRY(honey_waitable_event_create);
  INIT_ENTRY(honey_xml_reader_create);
  INIT_ENTRY(honey_zip_reader_create);
  INIT_ENTRY(honey_test_server_create_and_start);
  INIT_ENTRY(honey_translator_test_create);
  INIT_ENTRY(honey_translator_test_ref_ptr_library_create);
  INIT_ENTRY(honey_translator_test_ref_ptr_library_child_create);
  INIT_ENTRY(honey_translator_test_ref_ptr_library_child_child_create);
  INIT_ENTRY(honey_translator_test_scoped_library_create);
  INIT_ENTRY(honey_translator_test_scoped_library_child_create);
  INIT_ENTRY(honey_translator_test_scoped_library_child_child_create);
  INIT_ENTRY(honey_browser_view_create);
  INIT_ENTRY(honey_browser_view_get_for_browser);
  INIT_ENTRY(honey_display_get_primary);
  INIT_ENTRY(honey_display_get_nearest_point);
  INIT_ENTRY(honey_display_get_matching_bounds);
  INIT_ENTRY(honey_display_get_count);
  INIT_ENTRY(honey_display_get_alls);
  INIT_ENTRY(honey_display_convert_screen_point_to_pixels);
  INIT_ENTRY(honey_display_convert_screen_point_from_pixels);
  INIT_ENTRY(honey_display_convert_screen_rect_to_pixels);
  INIT_ENTRY(honey_display_convert_screen_rect_from_pixels);
  INIT_ENTRY(honey_label_button_create);
  INIT_ENTRY(honey_menu_button_create);
  INIT_ENTRY(honey_panel_create);
  INIT_ENTRY(honey_scroll_view_create);
  INIT_ENTRY(honey_textfield_create);
  INIT_ENTRY(honey_window_create_top_level);
  INIT_ENTRY(honey_api_hash);
  INIT_ENTRY(honey_version_info);
  INIT_ENTRY(honey_get_min_log_level);
  INIT_ENTRY(honey_get_vlog_level);
  INIT_ENTRY(honey_log);
  INIT_ENTRY(honey_string_list_alloc);
  INIT_ENTRY(honey_string_list_size);
  INIT_ENTRY(honey_string_list_value);
  INIT_ENTRY(honey_string_list_append);
  INIT_ENTRY(honey_string_list_clear);
  INIT_ENTRY(honey_string_list_free);
  INIT_ENTRY(honey_string_list_copy);
  INIT_ENTRY(honey_string_map_alloc);
  INIT_ENTRY(honey_string_map_size);
  INIT_ENTRY(honey_string_map_find);
  INIT_ENTRY(honey_string_map_key);
  INIT_ENTRY(honey_string_map_value);
  INIT_ENTRY(honey_string_map_append);
  INIT_ENTRY(honey_string_map_clear);
  INIT_ENTRY(honey_string_map_free);
  INIT_ENTRY(honey_string_multimap_alloc);
  INIT_ENTRY(honey_string_multimap_size);
  INIT_ENTRY(honey_string_multimap_find_count);
  INIT_ENTRY(honey_string_multimap_enumerate);
  INIT_ENTRY(honey_string_multimap_key);
  INIT_ENTRY(honey_string_multimap_value);
  INIT_ENTRY(honey_string_multimap_append);
  INIT_ENTRY(honey_string_multimap_clear);
  INIT_ENTRY(honey_string_multimap_free);
  INIT_ENTRY(honey_string_wide_set);
  INIT_ENTRY(honey_string_utf8_set);
  INIT_ENTRY(honey_string_utf16_set);
  INIT_ENTRY(honey_string_wide_clear);
  INIT_ENTRY(honey_string_utf8_clear);
  INIT_ENTRY(honey_string_utf16_clear);
  INIT_ENTRY(honey_string_wide_cmp);
  INIT_ENTRY(honey_string_utf8_cmp);
  INIT_ENTRY(honey_string_utf16_cmp);
  INIT_ENTRY(honey_string_wide_to_utf8);
  INIT_ENTRY(honey_string_utf8_to_wide);
  INIT_ENTRY(honey_string_wide_to_utf16);
  INIT_ENTRY(honey_string_utf16_to_wide);
  INIT_ENTRY(honey_string_utf8_to_utf16);
  INIT_ENTRY(honey_string_utf16_to_utf8);
  INIT_ENTRY(honey_string_ascii_to_wide);
  INIT_ENTRY(honey_string_ascii_to_utf16);
  INIT_ENTRY(honey_string_userfree_wide_alloc);
  INIT_ENTRY(honey_string_userfree_utf8_alloc);
  INIT_ENTRY(honey_string_userfree_utf16_alloc);
  INIT_ENTRY(honey_string_userfree_wide_free);
  INIT_ENTRY(honey_string_userfree_utf8_free);
  INIT_ENTRY(honey_string_userfree_utf16_free);
  INIT_ENTRY(honey_string_utf16_to_lower);
  INIT_ENTRY(honey_string_utf16_to_upper);
  INIT_ENTRY(honey_get_current_platform_thread_id);
  INIT_ENTRY(honey_get_current_platform_thread_handle);
  INIT_ENTRY(honey_time_to_timet);
  INIT_ENTRY(honey_time_from_timet);
  INIT_ENTRY(honey_time_to_doublet);
  INIT_ENTRY(honey_time_from_doublet);
  INIT_ENTRY(honey_time_now);
  INIT_ENTRY(honey_basetime_now);
  INIT_ENTRY(honey_time_delta);
  INIT_ENTRY(honey_time_to_basetime);
  INIT_ENTRY(honey_time_from_basetime);
  INIT_ENTRY(honey_trace_event_instant);
  INIT_ENTRY(honey_trace_event_begin);
  INIT_ENTRY(honey_trace_event_end);
  INIT_ENTRY(honey_trace_counter);
  INIT_ENTRY(honey_trace_counter_id);
  INIT_ENTRY(honey_trace_event_async_begin);
  INIT_ENTRY(honey_trace_event_async_step_into);
  INIT_ENTRY(honey_trace_event_async_step_past);
  INIT_ENTRY(honey_trace_event_async_end);
  return 1;
}

}  // namespace

int honey_load_library(const char* path) {
  if (g_libhoneycomb_handle) {
    return 0;
  }

  g_libhoneycomb_handle = dlopen(path, RTLD_LAZY | RTLD_LOCAL | RTLD_FIRST);
  if (!g_libhoneycomb_handle) {
    fprintf(stderr, "dlopen %s: %s\n", path, dlerror());
    return 0;
  }

  if (!libhoneycomb_init_pointers(path)) {
    honey_unload_library();
    return 0;
  }

  return 1;
}

int honey_unload_library() {
  int result = 0;
  if (g_libhoneycomb_handle) {
    result = !dlclose(g_libhoneycomb_handle);
    if (!result) {
      fprintf(stderr, "dlclose: %s\n", dlerror());
    }
    g_libhoneycomb_handle = nullptr;
  }
  return result;
}

NO_SANITIZE("cfi-icall")
int honey_execute_process(const honey_main_args_t* args,
                        struct _honey_app_t* application,
                        void* windows_sandbox_info) {
  return g_libhoneycomb_pointers.honey_execute_process(args, application,
                                               windows_sandbox_info);
}

NO_SANITIZE("cfi-icall")
int honey_initialize(const honey_main_args_t* args,
                   const struct _honey_settings_t* settings,
                   struct _honey_app_t* application,
                   void* windows_sandbox_info) {
  return g_libhoneycomb_pointers.honey_initialize(args, settings, application,
                                          windows_sandbox_info);
}

NO_SANITIZE("cfi-icall") void honey_shutdown() {
  g_libhoneycomb_pointers.honey_shutdown();
}

NO_SANITIZE("cfi-icall") void honey_do_message_loop_work() {
  g_libhoneycomb_pointers.honey_do_message_loop_work();
}

NO_SANITIZE("cfi-icall") void honey_run_message_loop() {
  g_libhoneycomb_pointers.honey_run_message_loop();
}

NO_SANITIZE("cfi-icall") void honey_quit_message_loop() {
  g_libhoneycomb_pointers.honey_quit_message_loop();
}

NO_SANITIZE("cfi-icall") int honey_crash_reporting_enabled() {
  return g_libhoneycomb_pointers.honey_crash_reporting_enabled();
}

NO_SANITIZE("cfi-icall")
void honey_set_crash_key_value(const honey_string_t* key,
                             const honey_string_t* value) {
  g_libhoneycomb_pointers.honey_set_crash_key_value(key, value);
}

NO_SANITIZE("cfi-icall")
int honey_create_directory(const honey_string_t* full_path) {
  return g_libhoneycomb_pointers.honey_create_directory(full_path);
}

NO_SANITIZE("cfi-icall") int honey_get_temp_directory(honey_string_t* temp_dir) {
  return g_libhoneycomb_pointers.honey_get_temp_directory(temp_dir);
}

NO_SANITIZE("cfi-icall")
int honey_create_new_temp_directory(const honey_string_t* prefix,
                                  honey_string_t* new_temp_path) {
  return g_libhoneycomb_pointers.honey_create_new_temp_directory(prefix, new_temp_path);
}

NO_SANITIZE("cfi-icall")
int honey_create_temp_directory_in_directory(const honey_string_t* base_dir,
                                           const honey_string_t* prefix,
                                           honey_string_t* new_dir) {
  return g_libhoneycomb_pointers.honey_create_temp_directory_in_directory(
      base_dir, prefix, new_dir);
}

NO_SANITIZE("cfi-icall") int honey_directory_exists(const honey_string_t* path) {
  return g_libhoneycomb_pointers.honey_directory_exists(path);
}

NO_SANITIZE("cfi-icall")
int honey_delete_file(const honey_string_t* path, int recursive) {
  return g_libhoneycomb_pointers.honey_delete_file(path, recursive);
}

NO_SANITIZE("cfi-icall")
int honey_zip_directory(const honey_string_t* src_dir,
                      const honey_string_t* dest_file,
                      int include_hidden_files) {
  return g_libhoneycomb_pointers.honey_zip_directory(src_dir, dest_file,
                                             include_hidden_files);
}

NO_SANITIZE("cfi-icall") void honey_load_crlsets_file(const honey_string_t* path) {
  g_libhoneycomb_pointers.honey_load_crlsets_file(path);
}

NO_SANITIZE("cfi-icall") int honey_is_rtl() {
  return g_libhoneycomb_pointers.honey_is_rtl();
}

NO_SANITIZE("cfi-icall")
int honey_add_cross_origin_whitelist_entry(const honey_string_t* source_origin,
                                         const honey_string_t* target_protocol,
                                         const honey_string_t* target_domain,
                                         int allow_target_subdomains) {
  return g_libhoneycomb_pointers.honey_add_cross_origin_whitelist_entry(
      source_origin, target_protocol, target_domain, allow_target_subdomains);
}

NO_SANITIZE("cfi-icall")
int honey_remove_cross_origin_whitelist_entry(const honey_string_t* source_origin,
                                            const honey_string_t* target_protocol,
                                            const honey_string_t* target_domain,
                                            int allow_target_subdomains) {
  return g_libhoneycomb_pointers.honey_remove_cross_origin_whitelist_entry(
      source_origin, target_protocol, target_domain, allow_target_subdomains);
}

NO_SANITIZE("cfi-icall") int honey_clear_cross_origin_whitelist() {
  return g_libhoneycomb_pointers.honey_clear_cross_origin_whitelist();
}

NO_SANITIZE("cfi-icall")
int honey_resolve_url(const honey_string_t* base_url,
                    const honey_string_t* relative_url,
                    honey_string_t* resolved_url) {
  return g_libhoneycomb_pointers.honey_resolve_url(base_url, relative_url,
                                           resolved_url);
}

NO_SANITIZE("cfi-icall")
int honey_parse_url(const honey_string_t* url, struct _honey_urlparts_t* parts) {
  return g_libhoneycomb_pointers.honey_parse_url(url, parts);
}

NO_SANITIZE("cfi-icall")
int honey_create_url(const struct _honey_urlparts_t* parts, honey_string_t* url) {
  return g_libhoneycomb_pointers.honey_create_url(parts, url);
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_t honey_format_url_for_security_display(
    const honey_string_t* origin_url) {
  return g_libhoneycomb_pointers.honey_format_url_for_security_display(origin_url);
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_t honey_get_mime_type(const honey_string_t* extension) {
  return g_libhoneycomb_pointers.honey_get_mime_type(extension);
}

NO_SANITIZE("cfi-icall")
void honey_get_extensions_for_mime_type(const honey_string_t* mime_type,
                                      honey_string_list_t extensions) {
  g_libhoneycomb_pointers.honey_get_extensions_for_mime_type(mime_type, extensions);
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_t honey_base64encode(const void* data, size_t data_size) {
  return g_libhoneycomb_pointers.honey_base64encode(data, data_size);
}

NO_SANITIZE("cfi-icall")
struct _honey_binary_value_t* honey_base64decode(const honey_string_t* data) {
  return g_libhoneycomb_pointers.honey_base64decode(data);
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_t honey_uriencode(const honey_string_t* text, int use_plus) {
  return g_libhoneycomb_pointers.honey_uriencode(text, use_plus);
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_t honey_uridecode(const honey_string_t* text,
                                    int convert_to_utf8,
                                    honey_uri_unescape_rule_t unescape_rule) {
  return g_libhoneycomb_pointers.honey_uridecode(text, convert_to_utf8, unescape_rule);
}

NO_SANITIZE("cfi-icall")
struct _honey_value_t* honey_parse_json(const honey_string_t* json_string,
                                    honey_json_parser_options_t options) {
  return g_libhoneycomb_pointers.honey_parse_json(json_string, options);
}

NO_SANITIZE("cfi-icall")
struct _honey_value_t* honey_parse_json_buffer(const void* json,
                                           size_t json_size,
                                           honey_json_parser_options_t options) {
  return g_libhoneycomb_pointers.honey_parse_json_buffer(json, json_size, options);
}

NO_SANITIZE("cfi-icall")
struct _honey_value_t* honey_parse_jsonand_return_error(
    const honey_string_t* json_string,
    honey_json_parser_options_t options,
    honey_string_t* error_msg_out) {
  return g_libhoneycomb_pointers.honey_parse_jsonand_return_error(json_string, options,
                                                          error_msg_out);
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_t honey_write_json(struct _honey_value_t* node,
                                     honey_json_writer_options_t options) {
  return g_libhoneycomb_pointers.honey_write_json(node, options);
}

NO_SANITIZE("cfi-icall")
int honey_get_path(honey_path_key_t key, honey_string_t* path) {
  return g_libhoneycomb_pointers.honey_get_path(key, path);
}

NO_SANITIZE("cfi-icall")
int honey_launch_process(struct _honey_command_line_t* command_line) {
  return g_libhoneycomb_pointers.honey_launch_process(command_line);
}

NO_SANITIZE("cfi-icall")
int honey_register_scheme_handler_factory(
    const honey_string_t* scheme_name,
    const honey_string_t* domain_name,
    struct _honey_scheme_handler_factory_t* factory) {
  return g_libhoneycomb_pointers.honey_register_scheme_handler_factory(
      scheme_name, domain_name, factory);
}

NO_SANITIZE("cfi-icall") int honey_clear_scheme_handler_factories() {
  return g_libhoneycomb_pointers.honey_clear_scheme_handler_factories();
}

NO_SANITIZE("cfi-icall")
int honey_is_cert_status_error(honey_cert_status_t status) {
  return g_libhoneycomb_pointers.honey_is_cert_status_error(status);
}

NO_SANITIZE("cfi-icall") int honey_currently_on(honey_thread_id_t threadId) {
  return g_libhoneycomb_pointers.honey_currently_on(threadId);
}

NO_SANITIZE("cfi-icall")
int honey_post_task(honey_thread_id_t threadId, struct _honey_task_t* task) {
  return g_libhoneycomb_pointers.honey_post_task(threadId, task);
}

NO_SANITIZE("cfi-icall")
int honey_post_delayed_task(honey_thread_id_t threadId,
                          struct _honey_task_t* task,
                          int64_t delay_ms) {
  return g_libhoneycomb_pointers.honey_post_delayed_task(threadId, task, delay_ms);
}

NO_SANITIZE("cfi-icall")
int honey_begin_tracing(const honey_string_t* categories,
                      struct _honey_completion_callback_t* callback) {
  return g_libhoneycomb_pointers.honey_begin_tracing(categories, callback);
}

NO_SANITIZE("cfi-icall")
int honey_end_tracing(const honey_string_t* tracing_file,
                    struct _honey_end_tracing_callback_t* callback) {
  return g_libhoneycomb_pointers.honey_end_tracing(tracing_file, callback);
}

NO_SANITIZE("cfi-icall") int64_t honey_now_from_system_trace_time() {
  return g_libhoneycomb_pointers.honey_now_from_system_trace_time();
}

NO_SANITIZE("cfi-icall")
int honey_register_extension(const honey_string_t* extension_name,
                           const honey_string_t* javascript_code,
                           struct _honey_v8handler_t* handler) {
  return g_libhoneycomb_pointers.honey_register_extension(extension_name,
                                                  javascript_code, handler);
}

NO_SANITIZE("cfi-icall")
void honey_execute_java_script_with_user_gesture_for_tests(
    struct _honey_frame_t* frame,
    const honey_string_t* javascript) {
  g_libhoneycomb_pointers.honey_execute_java_script_with_user_gesture_for_tests(
      frame, javascript);
}

NO_SANITIZE("cfi-icall")
void honey_set_data_directory_for_tests(const honey_string_t* dir) {
  g_libhoneycomb_pointers.honey_set_data_directory_for_tests(dir);
}

NO_SANITIZE("cfi-icall")
int honey_browser_host_create_browser(
    const struct _honey_window_info_t* windowInfo,
    struct _honey_client_t* client,
    const honey_string_t* url,
    const struct _honey_browser_settings_t* settings,
    struct _honey_dictionary_value_t* extra_info,
    struct _honey_request_context_t* request_context) {
  return g_libhoneycomb_pointers.honey_browser_host_create_browser(
      windowInfo, client, url, settings, extra_info, request_context);
}

NO_SANITIZE("cfi-icall")
struct _honey_browser_t* honey_browser_host_create_browser_sync(
    const struct _honey_window_info_t* windowInfo,
    struct _honey_client_t* client,
    const honey_string_t* url,
    const struct _honey_browser_settings_t* settings,
    struct _honey_dictionary_value_t* extra_info,
    struct _honey_request_context_t* request_context) {
  return g_libhoneycomb_pointers.honey_browser_host_create_browser_sync(
      windowInfo, client, url, settings, extra_info, request_context);
}

NO_SANITIZE("cfi-icall") struct _honey_command_line_t* honey_command_line_create() {
  return g_libhoneycomb_pointers.honey_command_line_create();
}

NO_SANITIZE("cfi-icall")
struct _honey_command_line_t* honey_command_line_get_global() {
  return g_libhoneycomb_pointers.honey_command_line_get_global();
}

NO_SANITIZE("cfi-icall")
struct _honey_cookie_manager_t* honey_cookie_manager_get_global_manager(
    struct _honey_completion_callback_t* callback) {
  return g_libhoneycomb_pointers.honey_cookie_manager_get_global_manager(callback);
}

NO_SANITIZE("cfi-icall") struct _honey_drag_data_t* honey_drag_data_create() {
  return g_libhoneycomb_pointers.honey_drag_data_create();
}

NO_SANITIZE("cfi-icall") struct _honey_image_t* honey_image_create() {
  return g_libhoneycomb_pointers.honey_image_create();
}

NO_SANITIZE("cfi-icall")
struct _honey_media_router_t* honey_media_router_get_global(
    struct _honey_completion_callback_t* callback) {
  return g_libhoneycomb_pointers.honey_media_router_get_global(callback);
}

NO_SANITIZE("cfi-icall")
struct _honey_menu_model_t* honey_menu_model_create(
    struct _honey_menu_model_delegate_t* delegate) {
  return g_libhoneycomb_pointers.honey_menu_model_create(delegate);
}

NO_SANITIZE("cfi-icall")
struct _honey_preference_manager_t* honey_preference_manager_get_global() {
  return g_libhoneycomb_pointers.honey_preference_manager_get_global();
}

NO_SANITIZE("cfi-icall")
struct _honey_print_settings_t* honey_print_settings_create() {
  return g_libhoneycomb_pointers.honey_print_settings_create();
}

NO_SANITIZE("cfi-icall")
struct _honey_process_message_t* honey_process_message_create(
    const honey_string_t* name) {
  return g_libhoneycomb_pointers.honey_process_message_create(name);
}

NO_SANITIZE("cfi-icall") struct _honey_request_t* honey_request_create() {
  return g_libhoneycomb_pointers.honey_request_create();
}

NO_SANITIZE("cfi-icall") struct _honey_post_data_t* honey_post_data_create() {
  return g_libhoneycomb_pointers.honey_post_data_create();
}

NO_SANITIZE("cfi-icall")
struct _honey_post_data_element_t* honey_post_data_element_create() {
  return g_libhoneycomb_pointers.honey_post_data_element_create();
}

NO_SANITIZE("cfi-icall")
struct _honey_request_context_t* honey_request_context_get_global_context() {
  return g_libhoneycomb_pointers.honey_request_context_get_global_context();
}

NO_SANITIZE("cfi-icall")
struct _honey_request_context_t* honey_request_context_create_context(
    const struct _honey_request_context_settings_t* settings,
    struct _honey_request_context_handler_t* handler) {
  return g_libhoneycomb_pointers.honey_request_context_create_context(settings,
                                                              handler);
}

NO_SANITIZE("cfi-icall")
struct _honey_request_context_t* honey_create_context_shared(
    struct _honey_request_context_t* other,
    struct _honey_request_context_handler_t* handler) {
  return g_libhoneycomb_pointers.honey_create_context_shared(other, handler);
}

NO_SANITIZE("cfi-icall")
struct _honey_resource_bundle_t* honey_resource_bundle_get_global() {
  return g_libhoneycomb_pointers.honey_resource_bundle_get_global();
}

NO_SANITIZE("cfi-icall") struct _honey_response_t* honey_response_create() {
  return g_libhoneycomb_pointers.honey_response_create();
}

NO_SANITIZE("cfi-icall")
void honey_server_create(const honey_string_t* address,
                       uint16_t port,
                       int backlog,
                       struct _honey_server_handler_t* handler) {
  g_libhoneycomb_pointers.honey_server_create(address, port, backlog, handler);
}

NO_SANITIZE("cfi-icall")
struct _honey_shared_process_message_builder_t*
honey_shared_process_message_builder_create(const honey_string_t* name,
                                          size_t byte_size) {
  return g_libhoneycomb_pointers.honey_shared_process_message_builder_create(name,
                                                                     byte_size);
}

NO_SANITIZE("cfi-icall")
struct _honey_stream_reader_t* honey_stream_reader_create_for_file(
    const honey_string_t* fileName) {
  return g_libhoneycomb_pointers.honey_stream_reader_create_for_file(fileName);
}

NO_SANITIZE("cfi-icall")
struct _honey_stream_reader_t* honey_stream_reader_create_for_data(void* data,
                                                               size_t size) {
  return g_libhoneycomb_pointers.honey_stream_reader_create_for_data(data, size);
}

NO_SANITIZE("cfi-icall")
struct _honey_stream_reader_t* honey_stream_reader_create_for_handler(
    struct _honey_read_handler_t* handler) {
  return g_libhoneycomb_pointers.honey_stream_reader_create_for_handler(handler);
}

NO_SANITIZE("cfi-icall")
struct _honey_stream_writer_t* honey_stream_writer_create_for_file(
    const honey_string_t* fileName) {
  return g_libhoneycomb_pointers.honey_stream_writer_create_for_file(fileName);
}

NO_SANITIZE("cfi-icall")
struct _honey_stream_writer_t* honey_stream_writer_create_for_handler(
    struct _honey_write_handler_t* handler) {
  return g_libhoneycomb_pointers.honey_stream_writer_create_for_handler(handler);
}

NO_SANITIZE("cfi-icall")
struct _honey_task_runner_t* honey_task_runner_get_for_current_thread() {
  return g_libhoneycomb_pointers.honey_task_runner_get_for_current_thread();
}

NO_SANITIZE("cfi-icall")
struct _honey_task_runner_t* honey_task_runner_get_for_thread(
    honey_thread_id_t threadId) {
  return g_libhoneycomb_pointers.honey_task_runner_get_for_thread(threadId);
}

NO_SANITIZE("cfi-icall")
struct _honey_thread_t* honey_thread_create(
    const honey_string_t* display_name,
    honey_thread_priority_t priority,
    honey_message_loop_type_t message_loop_type,
    int stoppable,
    honey_com_init_mode_t com_init_mode) {
  return g_libhoneycomb_pointers.honey_thread_create(
      display_name, priority, message_loop_type, stoppable, com_init_mode);
}

NO_SANITIZE("cfi-icall")
struct _honey_urlrequest_t* honey_urlrequest_create(
    struct _honey_request_t* request,
    struct _honey_urlrequest_client_t* client,
    struct _honey_request_context_t* request_context) {
  return g_libhoneycomb_pointers.honey_urlrequest_create(request, client,
                                                 request_context);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8context_t* honey_v8context_get_current_context() {
  return g_libhoneycomb_pointers.honey_v8context_get_current_context();
}

NO_SANITIZE("cfi-icall")
struct _honey_v8context_t* honey_v8context_get_entered_context() {
  return g_libhoneycomb_pointers.honey_v8context_get_entered_context();
}

NO_SANITIZE("cfi-icall") int honey_v8context_in_context() {
  return g_libhoneycomb_pointers.honey_v8context_in_context();
}

NO_SANITIZE("cfi-icall") struct _honey_v8value_t* honey_v8value_create_undefined() {
  return g_libhoneycomb_pointers.honey_v8value_create_undefined();
}

NO_SANITIZE("cfi-icall") struct _honey_v8value_t* honey_v8value_create_null() {
  return g_libhoneycomb_pointers.honey_v8value_create_null();
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_bool(int value) {
  return g_libhoneycomb_pointers.honey_v8value_create_bool(value);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_int(int32_t value) {
  return g_libhoneycomb_pointers.honey_v8value_create_int(value);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_uint(uint32_t value) {
  return g_libhoneycomb_pointers.honey_v8value_create_uint(value);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_double(double value) {
  return g_libhoneycomb_pointers.honey_v8value_create_double(value);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_date(honey_basetime_t date) {
  return g_libhoneycomb_pointers.honey_v8value_create_date(date);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_string(const honey_string_t* value) {
  return g_libhoneycomb_pointers.honey_v8value_create_string(value);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_object(
    struct _honey_v8accessor_t* accessor,
    struct _honey_v8interceptor_t* interceptor) {
  return g_libhoneycomb_pointers.honey_v8value_create_object(accessor, interceptor);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_array(int length) {
  return g_libhoneycomb_pointers.honey_v8value_create_array(length);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_array_buffer(
    void* buffer,
    size_t length,
    struct _honey_v8array_buffer_release_callback_t* release_callback) {
  return g_libhoneycomb_pointers.honey_v8value_create_array_buffer(buffer, length,
                                                           release_callback);
}

NO_SANITIZE("cfi-icall")
struct _honey_v8value_t* honey_v8value_create_function(
    const honey_string_t* name,
    struct _honey_v8handler_t* handler) {
  return g_libhoneycomb_pointers.honey_v8value_create_function(name, handler);
}

NO_SANITIZE("cfi-icall") struct _honey_v8value_t* honey_v8value_create_promise() {
  return g_libhoneycomb_pointers.honey_v8value_create_promise();
}

NO_SANITIZE("cfi-icall")
struct _honey_v8stack_trace_t* honey_v8stack_trace_get_current(int frame_limit) {
  return g_libhoneycomb_pointers.honey_v8stack_trace_get_current(frame_limit);
}

NO_SANITIZE("cfi-icall") struct _honey_value_t* honey_value_create() {
  return g_libhoneycomb_pointers.honey_value_create();
}

NO_SANITIZE("cfi-icall")
struct _honey_binary_value_t* honey_binary_value_create(const void* data,
                                                    size_t data_size) {
  return g_libhoneycomb_pointers.honey_binary_value_create(data, data_size);
}

NO_SANITIZE("cfi-icall")
struct _honey_dictionary_value_t* honey_dictionary_value_create() {
  return g_libhoneycomb_pointers.honey_dictionary_value_create();
}

NO_SANITIZE("cfi-icall") struct _honey_list_value_t* honey_list_value_create() {
  return g_libhoneycomb_pointers.honey_list_value_create();
}

NO_SANITIZE("cfi-icall")
struct _honey_waitable_event_t* honey_waitable_event_create(
    int automatic_reset,
    int initially_signaled) {
  return g_libhoneycomb_pointers.honey_waitable_event_create(automatic_reset,
                                                     initially_signaled);
}

NO_SANITIZE("cfi-icall")
struct _honey_xml_reader_t* honey_xml_reader_create(
    struct _honey_stream_reader_t* stream,
    honey_xml_encoding_type_t encodingType,
    const honey_string_t* URI) {
  return g_libhoneycomb_pointers.honey_xml_reader_create(stream, encodingType, URI);
}

NO_SANITIZE("cfi-icall")
struct _honey_zip_reader_t* honey_zip_reader_create(
    struct _honey_stream_reader_t* stream) {
  return g_libhoneycomb_pointers.honey_zip_reader_create(stream);
}

NO_SANITIZE("cfi-icall")
struct _honey_test_server_t* honey_test_server_create_and_start(
    uint16_t port,
    int https_server,
    honey_test_cert_type_t https_cert_type,
    struct _honey_test_server_handler_t* handler) {
  return g_libhoneycomb_pointers.honey_test_server_create_and_start(
      port, https_server, https_cert_type, handler);
}

NO_SANITIZE("cfi-icall")
struct _honey_translator_test_t* honey_translator_test_create() {
  return g_libhoneycomb_pointers.honey_translator_test_create();
}

NO_SANITIZE("cfi-icall")
struct _honey_translator_test_ref_ptr_library_t*
honey_translator_test_ref_ptr_library_create(int value) {
  return g_libhoneycomb_pointers.honey_translator_test_ref_ptr_library_create(value);
}

NO_SANITIZE("cfi-icall")
struct _honey_translator_test_ref_ptr_library_child_t*
honey_translator_test_ref_ptr_library_child_create(int value, int other_value) {
  return g_libhoneycomb_pointers.honey_translator_test_ref_ptr_library_child_create(
      value, other_value);
}

NO_SANITIZE("cfi-icall")
struct _honey_translator_test_ref_ptr_library_child_child_t*
honey_translator_test_ref_ptr_library_child_child_create(int value,
                                                       int other_value,
                                                       int other_other_value) {
  return g_libhoneycomb_pointers
      .honey_translator_test_ref_ptr_library_child_child_create(
          value, other_value, other_other_value);
}

NO_SANITIZE("cfi-icall")
struct _honey_translator_test_scoped_library_t*
honey_translator_test_scoped_library_create(int value) {
  return g_libhoneycomb_pointers.honey_translator_test_scoped_library_create(value);
}

NO_SANITIZE("cfi-icall")
struct _honey_translator_test_scoped_library_child_t*
honey_translator_test_scoped_library_child_create(int value, int other_value) {
  return g_libhoneycomb_pointers.honey_translator_test_scoped_library_child_create(
      value, other_value);
}

NO_SANITIZE("cfi-icall")
struct _honey_translator_test_scoped_library_child_child_t*
honey_translator_test_scoped_library_child_child_create(int value,
                                                      int other_value,
                                                      int other_other_value) {
  return g_libhoneycomb_pointers
      .honey_translator_test_scoped_library_child_child_create(value, other_value,
                                                             other_other_value);
}

NO_SANITIZE("cfi-icall")
struct _honey_browser_view_t* honey_browser_view_create(
    struct _honey_client_t* client,
    const honey_string_t* url,
    const struct _honey_browser_settings_t* settings,
    struct _honey_dictionary_value_t* extra_info,
    struct _honey_request_context_t* request_context,
    struct _honey_browser_view_delegate_t* delegate) {
  return g_libhoneycomb_pointers.honey_browser_view_create(
      client, url, settings, extra_info, request_context, delegate);
}

NO_SANITIZE("cfi-icall")
struct _honey_browser_view_t* honey_browser_view_get_for_browser(
    struct _honey_browser_t* browser) {
  return g_libhoneycomb_pointers.honey_browser_view_get_for_browser(browser);
}

NO_SANITIZE("cfi-icall") struct _honey_display_t* honey_display_get_primary() {
  return g_libhoneycomb_pointers.honey_display_get_primary();
}

NO_SANITIZE("cfi-icall")
struct _honey_display_t* honey_display_get_nearest_point(const honey_point_t* point,
                                                     int input_pixel_coords) {
  return g_libhoneycomb_pointers.honey_display_get_nearest_point(point,
                                                         input_pixel_coords);
}

NO_SANITIZE("cfi-icall")
struct _honey_display_t* honey_display_get_matching_bounds(const honey_rect_t* bounds,
                                                       int input_pixel_coords) {
  return g_libhoneycomb_pointers.honey_display_get_matching_bounds(bounds,
                                                           input_pixel_coords);
}

NO_SANITIZE("cfi-icall") size_t honey_display_get_count() {
  return g_libhoneycomb_pointers.honey_display_get_count();
}

NO_SANITIZE("cfi-icall")
void honey_display_get_alls(size_t* displaysCount,
                          struct _honey_display_t** displays) {
  g_libhoneycomb_pointers.honey_display_get_alls(displaysCount, displays);
}

NO_SANITIZE("cfi-icall")
honey_point_t honey_display_convert_screen_point_to_pixels(
    const honey_point_t* point) {
  return g_libhoneycomb_pointers.honey_display_convert_screen_point_to_pixels(point);
}

NO_SANITIZE("cfi-icall")
honey_point_t honey_display_convert_screen_point_from_pixels(
    const honey_point_t* point) {
  return g_libhoneycomb_pointers.honey_display_convert_screen_point_from_pixels(point);
}

NO_SANITIZE("cfi-icall")
honey_rect_t honey_display_convert_screen_rect_to_pixels(const honey_rect_t* rect) {
  return g_libhoneycomb_pointers.honey_display_convert_screen_rect_to_pixels(rect);
}

NO_SANITIZE("cfi-icall")
honey_rect_t honey_display_convert_screen_rect_from_pixels(const honey_rect_t* rect) {
  return g_libhoneycomb_pointers.honey_display_convert_screen_rect_from_pixels(rect);
}

NO_SANITIZE("cfi-icall")
struct _honey_label_button_t* honey_label_button_create(
    struct _honey_button_delegate_t* delegate,
    const honey_string_t* text) {
  return g_libhoneycomb_pointers.honey_label_button_create(delegate, text);
}

NO_SANITIZE("cfi-icall")
struct _honey_menu_button_t* honey_menu_button_create(
    struct _honey_menu_button_delegate_t* delegate,
    const honey_string_t* text) {
  return g_libhoneycomb_pointers.honey_menu_button_create(delegate, text);
}

NO_SANITIZE("cfi-icall")
struct _honey_panel_t* honey_panel_create(struct _honey_panel_delegate_t* delegate) {
  return g_libhoneycomb_pointers.honey_panel_create(delegate);
}

NO_SANITIZE("cfi-icall")
struct _honey_scroll_view_t* honey_scroll_view_create(
    struct _honey_view_delegate_t* delegate) {
  return g_libhoneycomb_pointers.honey_scroll_view_create(delegate);
}

NO_SANITIZE("cfi-icall")
struct _honey_textfield_t* honey_textfield_create(
    struct _honey_textfield_delegate_t* delegate) {
  return g_libhoneycomb_pointers.honey_textfield_create(delegate);
}

NO_SANITIZE("cfi-icall")
struct _honey_window_t* honey_window_create_top_level(
    struct _honey_window_delegate_t* delegate) {
  return g_libhoneycomb_pointers.honey_window_create_top_level(delegate);
}

NO_SANITIZE("cfi-icall") const char* honey_api_hash(int entry) {
  return g_libhoneycomb_pointers.honey_api_hash(entry);
}

NO_SANITIZE("cfi-icall") int honey_version_info(int entry) {
  return g_libhoneycomb_pointers.honey_version_info(entry);
}

NO_SANITIZE("cfi-icall") int honey_get_min_log_level() {
  return g_libhoneycomb_pointers.honey_get_min_log_level();
}

NO_SANITIZE("cfi-icall")
int honey_get_vlog_level(const char* file_start, size_t N) {
  return g_libhoneycomb_pointers.honey_get_vlog_level(file_start, N);
}

NO_SANITIZE("cfi-icall")
void honey_log(const char* file, int line, int severity, const char* message) {
  g_libhoneycomb_pointers.honey_log(file, line, severity, message);
}

NO_SANITIZE("cfi-icall") honey_string_list_t honey_string_list_alloc() {
  return g_libhoneycomb_pointers.honey_string_list_alloc();
}

NO_SANITIZE("cfi-icall") size_t honey_string_list_size(honey_string_list_t list) {
  return g_libhoneycomb_pointers.honey_string_list_size(list);
}

NO_SANITIZE("cfi-icall")
int honey_string_list_value(honey_string_list_t list,
                          size_t index,
                          honey_string_t* value) {
  return g_libhoneycomb_pointers.honey_string_list_value(list, index, value);
}

NO_SANITIZE("cfi-icall")
void honey_string_list_append(honey_string_list_t list, const honey_string_t* value) {
  g_libhoneycomb_pointers.honey_string_list_append(list, value);
}

NO_SANITIZE("cfi-icall") void honey_string_list_clear(honey_string_list_t list) {
  g_libhoneycomb_pointers.honey_string_list_clear(list);
}

NO_SANITIZE("cfi-icall") void honey_string_list_free(honey_string_list_t list) {
  g_libhoneycomb_pointers.honey_string_list_free(list);
}

NO_SANITIZE("cfi-icall")
honey_string_list_t honey_string_list_copy(honey_string_list_t list) {
  return g_libhoneycomb_pointers.honey_string_list_copy(list);
}

NO_SANITIZE("cfi-icall") honey_string_map_t honey_string_map_alloc() {
  return g_libhoneycomb_pointers.honey_string_map_alloc();
}

NO_SANITIZE("cfi-icall") size_t honey_string_map_size(honey_string_map_t map) {
  return g_libhoneycomb_pointers.honey_string_map_size(map);
}

NO_SANITIZE("cfi-icall")
int honey_string_map_find(honey_string_map_t map,
                        const honey_string_t* key,
                        honey_string_t* value) {
  return g_libhoneycomb_pointers.honey_string_map_find(map, key, value);
}

NO_SANITIZE("cfi-icall")
int honey_string_map_key(honey_string_map_t map, size_t index, honey_string_t* key) {
  return g_libhoneycomb_pointers.honey_string_map_key(map, index, key);
}

NO_SANITIZE("cfi-icall")
int honey_string_map_value(honey_string_map_t map,
                         size_t index,
                         honey_string_t* value) {
  return g_libhoneycomb_pointers.honey_string_map_value(map, index, value);
}

NO_SANITIZE("cfi-icall")
int honey_string_map_append(honey_string_map_t map,
                          const honey_string_t* key,
                          const honey_string_t* value) {
  return g_libhoneycomb_pointers.honey_string_map_append(map, key, value);
}

NO_SANITIZE("cfi-icall") void honey_string_map_clear(honey_string_map_t map) {
  g_libhoneycomb_pointers.honey_string_map_clear(map);
}

NO_SANITIZE("cfi-icall") void honey_string_map_free(honey_string_map_t map) {
  g_libhoneycomb_pointers.honey_string_map_free(map);
}

NO_SANITIZE("cfi-icall") honey_string_multimap_t honey_string_multimap_alloc() {
  return g_libhoneycomb_pointers.honey_string_multimap_alloc();
}

NO_SANITIZE("cfi-icall")
size_t honey_string_multimap_size(honey_string_multimap_t map) {
  return g_libhoneycomb_pointers.honey_string_multimap_size(map);
}

NO_SANITIZE("cfi-icall")
size_t honey_string_multimap_find_count(honey_string_multimap_t map,
                                      const honey_string_t* key) {
  return g_libhoneycomb_pointers.honey_string_multimap_find_count(map, key);
}

NO_SANITIZE("cfi-icall")
int honey_string_multimap_enumerate(honey_string_multimap_t map,
                                  const honey_string_t* key,
                                  size_t value_index,
                                  honey_string_t* value) {
  return g_libhoneycomb_pointers.honey_string_multimap_enumerate(map, key, value_index,
                                                         value);
}

NO_SANITIZE("cfi-icall")
int honey_string_multimap_key(honey_string_multimap_t map,
                            size_t index,
                            honey_string_t* key) {
  return g_libhoneycomb_pointers.honey_string_multimap_key(map, index, key);
}

NO_SANITIZE("cfi-icall")
int honey_string_multimap_value(honey_string_multimap_t map,
                              size_t index,
                              honey_string_t* value) {
  return g_libhoneycomb_pointers.honey_string_multimap_value(map, index, value);
}

NO_SANITIZE("cfi-icall")
int honey_string_multimap_append(honey_string_multimap_t map,
                               const honey_string_t* key,
                               const honey_string_t* value) {
  return g_libhoneycomb_pointers.honey_string_multimap_append(map, key, value);
}

NO_SANITIZE("cfi-icall")
void honey_string_multimap_clear(honey_string_multimap_t map) {
  g_libhoneycomb_pointers.honey_string_multimap_clear(map);
}

NO_SANITIZE("cfi-icall")
void honey_string_multimap_free(honey_string_multimap_t map) {
  g_libhoneycomb_pointers.honey_string_multimap_free(map);
}

NO_SANITIZE("cfi-icall")
int honey_string_wide_set(const wchar_t* src,
                        size_t src_len,
                        honey_string_wide_t* output,
                        int copy) {
  return g_libhoneycomb_pointers.honey_string_wide_set(src, src_len, output, copy);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf8_set(const char* src,
                        size_t src_len,
                        honey_string_utf8_t* output,
                        int copy) {
  return g_libhoneycomb_pointers.honey_string_utf8_set(src, src_len, output, copy);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf16_set(const char16_t* src,
                         size_t src_len,
                         honey_string_utf16_t* output,
                         int copy) {
  return g_libhoneycomb_pointers.honey_string_utf16_set(src, src_len, output, copy);
}

NO_SANITIZE("cfi-icall") void honey_string_wide_clear(honey_string_wide_t* str) {
  g_libhoneycomb_pointers.honey_string_wide_clear(str);
}

NO_SANITIZE("cfi-icall") void honey_string_utf8_clear(honey_string_utf8_t* str) {
  g_libhoneycomb_pointers.honey_string_utf8_clear(str);
}

NO_SANITIZE("cfi-icall") void honey_string_utf16_clear(honey_string_utf16_t* str) {
  g_libhoneycomb_pointers.honey_string_utf16_clear(str);
}

NO_SANITIZE("cfi-icall")
int honey_string_wide_cmp(const honey_string_wide_t* str1,
                        const honey_string_wide_t* str2) {
  return g_libhoneycomb_pointers.honey_string_wide_cmp(str1, str2);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf8_cmp(const honey_string_utf8_t* str1,
                        const honey_string_utf8_t* str2) {
  return g_libhoneycomb_pointers.honey_string_utf8_cmp(str1, str2);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf16_cmp(const honey_string_utf16_t* str1,
                         const honey_string_utf16_t* str2) {
  return g_libhoneycomb_pointers.honey_string_utf16_cmp(str1, str2);
}

NO_SANITIZE("cfi-icall")
int honey_string_wide_to_utf8(const wchar_t* src,
                            size_t src_len,
                            honey_string_utf8_t* output) {
  return g_libhoneycomb_pointers.honey_string_wide_to_utf8(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf8_to_wide(const char* src,
                            size_t src_len,
                            honey_string_wide_t* output) {
  return g_libhoneycomb_pointers.honey_string_utf8_to_wide(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
int honey_string_wide_to_utf16(const wchar_t* src,
                             size_t src_len,
                             honey_string_utf16_t* output) {
  return g_libhoneycomb_pointers.honey_string_wide_to_utf16(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf16_to_wide(const char16_t* src,
                             size_t src_len,
                             honey_string_wide_t* output) {
  return g_libhoneycomb_pointers.honey_string_utf16_to_wide(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf8_to_utf16(const char* src,
                             size_t src_len,
                             honey_string_utf16_t* output) {
  return g_libhoneycomb_pointers.honey_string_utf8_to_utf16(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf16_to_utf8(const char16_t* src,
                             size_t src_len,
                             honey_string_utf8_t* output) {
  return g_libhoneycomb_pointers.honey_string_utf16_to_utf8(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
int honey_string_ascii_to_wide(const char* src,
                             size_t src_len,
                             honey_string_wide_t* output) {
  return g_libhoneycomb_pointers.honey_string_ascii_to_wide(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
int honey_string_ascii_to_utf16(const char* src,
                              size_t src_len,
                              honey_string_utf16_t* output) {
  return g_libhoneycomb_pointers.honey_string_ascii_to_utf16(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_wide_t honey_string_userfree_wide_alloc() {
  return g_libhoneycomb_pointers.honey_string_userfree_wide_alloc();
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_utf8_t honey_string_userfree_utf8_alloc() {
  return g_libhoneycomb_pointers.honey_string_userfree_utf8_alloc();
}

NO_SANITIZE("cfi-icall")
honey_string_userfree_utf16_t honey_string_userfree_utf16_alloc() {
  return g_libhoneycomb_pointers.honey_string_userfree_utf16_alloc();
}

NO_SANITIZE("cfi-icall")
void honey_string_userfree_wide_free(honey_string_userfree_wide_t str) {
  g_libhoneycomb_pointers.honey_string_userfree_wide_free(str);
}

NO_SANITIZE("cfi-icall")
void honey_string_userfree_utf8_free(honey_string_userfree_utf8_t str) {
  g_libhoneycomb_pointers.honey_string_userfree_utf8_free(str);
}

NO_SANITIZE("cfi-icall")
void honey_string_userfree_utf16_free(honey_string_userfree_utf16_t str) {
  g_libhoneycomb_pointers.honey_string_userfree_utf16_free(str);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf16_to_lower(const char16_t* src,
                              size_t src_len,
                              honey_string_utf16_t* output) {
  return g_libhoneycomb_pointers.honey_string_utf16_to_lower(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
int honey_string_utf16_to_upper(const char16_t* src,
                              size_t src_len,
                              honey_string_utf16_t* output) {
  return g_libhoneycomb_pointers.honey_string_utf16_to_upper(src, src_len, output);
}

NO_SANITIZE("cfi-icall")
honey_platform_thread_id_t honey_get_current_platform_thread_id() {
  return g_libhoneycomb_pointers.honey_get_current_platform_thread_id();
}

NO_SANITIZE("cfi-icall")
honey_platform_thread_handle_t honey_get_current_platform_thread_handle() {
  return g_libhoneycomb_pointers.honey_get_current_platform_thread_handle();
}

NO_SANITIZE("cfi-icall")
int honey_time_to_timet(const honey_time_t* honey_time, time_t* time) {
  return g_libhoneycomb_pointers.honey_time_to_timet(honey_time, time);
}

NO_SANITIZE("cfi-icall")
int honey_time_from_timet(time_t time, honey_time_t* honey_time) {
  return g_libhoneycomb_pointers.honey_time_from_timet(time, honey_time);
}

NO_SANITIZE("cfi-icall")
int honey_time_to_doublet(const honey_time_t* honey_time, double* time) {
  return g_libhoneycomb_pointers.honey_time_to_doublet(honey_time, time);
}

NO_SANITIZE("cfi-icall")
int honey_time_from_doublet(double time, honey_time_t* honey_time) {
  return g_libhoneycomb_pointers.honey_time_from_doublet(time, honey_time);
}

NO_SANITIZE("cfi-icall") int honey_time_now(honey_time_t* honey_time) {
  return g_libhoneycomb_pointers.honey_time_now(honey_time);
}

NO_SANITIZE("cfi-icall") honey_basetime_t honey_basetime_now() {
  return g_libhoneycomb_pointers.honey_basetime_now();
}

NO_SANITIZE("cfi-icall")
int honey_time_delta(const honey_time_t* honey_time1,
                   const honey_time_t* honey_time2,
                   long long* delta) {
  return g_libhoneycomb_pointers.honey_time_delta(honey_time1, honey_time2, delta);
}

NO_SANITIZE("cfi-icall")
int honey_time_to_basetime(const honey_time_t* from, honey_basetime_t* to) {
  return g_libhoneycomb_pointers.honey_time_to_basetime(from, to);
}

NO_SANITIZE("cfi-icall")
int honey_time_from_basetime(const honey_basetime_t from, honey_time_t* to) {
  return g_libhoneycomb_pointers.honey_time_from_basetime(from, to);
}

NO_SANITIZE("cfi-icall")
void honey_trace_event_instant(const char* category,
                             const char* name,
                             const char* arg1_name,
                             uint64_t arg1_val,
                             const char* arg2_name,
                             uint64_t arg2_val) {
  g_libhoneycomb_pointers.honey_trace_event_instant(category, name, arg1_name, arg1_val,
                                            arg2_name, arg2_val);
}

NO_SANITIZE("cfi-icall")
void honey_trace_event_begin(const char* category,
                           const char* name,
                           const char* arg1_name,
                           uint64_t arg1_val,
                           const char* arg2_name,
                           uint64_t arg2_val) {
  g_libhoneycomb_pointers.honey_trace_event_begin(category, name, arg1_name, arg1_val,
                                          arg2_name, arg2_val);
}

NO_SANITIZE("cfi-icall")
void honey_trace_event_end(const char* category,
                         const char* name,
                         const char* arg1_name,
                         uint64_t arg1_val,
                         const char* arg2_name,
                         uint64_t arg2_val) {
  g_libhoneycomb_pointers.honey_trace_event_end(category, name, arg1_name, arg1_val,
                                        arg2_name, arg2_val);
}

NO_SANITIZE("cfi-icall")
void honey_trace_counter(const char* category,
                       const char* name,
                       const char* value1_name,
                       uint64_t value1_val,
                       const char* value2_name,
                       uint64_t value2_val) {
  g_libhoneycomb_pointers.honey_trace_counter(category, name, value1_name, value1_val,
                                      value2_name, value2_val);
}

NO_SANITIZE("cfi-icall")
void honey_trace_counter_id(const char* category,
                          const char* name,
                          uint64_t id,
                          const char* value1_name,
                          uint64_t value1_val,
                          const char* value2_name,
                          uint64_t value2_val) {
  g_libhoneycomb_pointers.honey_trace_counter_id(category, name, id, value1_name,
                                         value1_val, value2_name, value2_val);
}

NO_SANITIZE("cfi-icall")
void honey_trace_event_async_begin(const char* category,
                                 const char* name,
                                 uint64_t id,
                                 const char* arg1_name,
                                 uint64_t arg1_val,
                                 const char* arg2_name,
                                 uint64_t arg2_val) {
  g_libhoneycomb_pointers.honey_trace_event_async_begin(category, name, id, arg1_name,
                                                arg1_val, arg2_name, arg2_val);
}

NO_SANITIZE("cfi-icall")
void honey_trace_event_async_step_into(const char* category,
                                     const char* name,
                                     uint64_t id,
                                     uint64_t step,
                                     const char* arg1_name,
                                     uint64_t arg1_val) {
  g_libhoneycomb_pointers.honey_trace_event_async_step_into(category, name, id, step,
                                                    arg1_name, arg1_val);
}

NO_SANITIZE("cfi-icall")
void honey_trace_event_async_step_past(const char* category,
                                     const char* name,
                                     uint64_t id,
                                     uint64_t step,
                                     const char* arg1_name,
                                     uint64_t arg1_val) {
  g_libhoneycomb_pointers.honey_trace_event_async_step_past(category, name, id, step,
                                                    arg1_name, arg1_val);
}

NO_SANITIZE("cfi-icall")
void honey_trace_event_async_end(const char* category,
                               const char* name,
                               uint64_t id,
                               const char* arg1_name,
                               uint64_t arg1_val,
                               const char* arg2_name,
                               uint64_t arg2_val) {
  g_libhoneycomb_pointers.honey_trace_event_async_end(category, name, id, arg1_name,
                                              arg1_val, arg2_name, arg2_val);
}
