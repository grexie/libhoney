// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=231eb074788457c6fa690d3c82731c5334f322b2$
//

#include "include/capi/honey_app_capi.h"
#include "include/capi/honey_crash_util_capi.h"
#include "include/capi/honey_file_util_capi.h"
#include "include/capi/honey_i18n_util_capi.h"
#include "include/capi/honey_origin_whitelist_capi.h"
#include "include/capi/honey_parser_capi.h"
#include "include/capi/honey_path_util_capi.h"
#include "include/capi/honey_process_util_capi.h"
#include "include/capi/honey_scheme_capi.h"
#include "include/capi/honey_ssl_info_capi.h"
#include "include/capi/honey_task_capi.h"
#include "include/capi/honey_trace_capi.h"
#include "include/capi/honey_v8_capi.h"
#include "include/capi/test/honey_test_helpers_capi.h"
#include "include/honey_api_hash.h"
#include "include/honey_app.h"
#include "include/honey_crash_util.h"
#include "include/honey_file_util.h"
#include "include/honey_i18n_util.h"
#include "include/honey_origin_whitelist.h"
#include "include/honey_parser.h"
#include "include/honey_path_util.h"
#include "include/honey_process_util.h"
#include "include/honey_scheme.h"
#include "include/honey_ssl_info.h"
#include "include/honey_task.h"
#include "include/honey_trace.h"
#include "include/honey_v8.h"
#include "include/test/honey_test_helpers.h"
#include "libhoneycomb_dll/cpptoc/app_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/completion_callback_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/end_tracing_callback_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/scheme_handler_factory_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/task_cpptoc.h"
#include "libhoneycomb_dll/cpptoc/v8handler_cpptoc.h"
#include "libhoneycomb_dll/ctocpp/binary_value_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/command_line_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/frame_ctocpp.h"
#include "libhoneycomb_dll/ctocpp/value_ctocpp.h"
#include "libhoneycomb_dll/shutdown_checker.h"
#include "libhoneycomb_dll/transfer_util.h"

// Define used to facilitate parsing.
#define HONEYCOMB_GLOBAL

// GLOBAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL int HoneycombExecuteProcess(const HoneycombMainArgs& args,
                                 HoneycombRefPtr<HoneycombApp> application,
                                 void* windows_sandbox_info) {
  const char* api_hash = honey_api_hash(0);
  if (strcmp(api_hash, HONEYCOMB_API_HASH_PLATFORM)) {
    // The libhoneycomb API hash does not match the current header API hash.
    DCHECK(false);
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: application, windows_sandbox_info

  // Execute
  int _retval = honey_execute_process(&args, HoneycombAppCppToC::Wrap(application),
                                    windows_sandbox_info);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombInitialize(const HoneycombMainArgs& args,
                              const HoneycombSettings& settings,
                              HoneycombRefPtr<HoneycombApp> application,
                              void* windows_sandbox_info) {
  const char* api_hash = honey_api_hash(0);
  if (strcmp(api_hash, HONEYCOMB_API_HASH_PLATFORM)) {
    // The libhoneycomb API hash does not match the current header API hash.
    DCHECK(false);
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: application, windows_sandbox_info

  // Execute
  int _retval = honey_initialize(
      &args, &settings, HoneycombAppCppToC::Wrap(application), windows_sandbox_info);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL void HoneycombShutdown() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

#if DCHECK_IS_ON()
  shutdown_checker::SetIsShutdown();
#endif

  // Execute
  honey_shutdown();
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL void HoneycombDoMessageLoopWork() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_do_message_loop_work();
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL void HoneycombRunMessageLoop() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_run_message_loop();
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL void HoneycombQuitMessageLoop() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_quit_message_loop();
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL bool HoneycombCrashReportingEnabled() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_crash_reporting_enabled();

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL
void HoneycombSetCrashKeyValue(const HoneycombString& key, const HoneycombString& value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  DCHECK(!key.empty());
  if (key.empty()) {
    return;
  }
  // Unverified params: value

  // Execute
  honey_set_crash_key_value(key.GetStruct(), value.GetStruct());
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombCreateDirectory(const HoneycombString& full_path) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: full_path; type: string_byref_const
  DCHECK(!full_path.empty());
  if (full_path.empty()) {
    return false;
  }

  // Execute
  int _retval = honey_create_directory(full_path.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombGetTempDirectory(HoneycombString& temp_dir) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_get_temp_directory(temp_dir.GetWritableStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombCreateNewTempDirectory(const HoneycombString& prefix,
                                          HoneycombString& new_temp_path) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: prefix

  // Execute
  int _retval = honey_create_new_temp_directory(
      prefix.GetStruct(), new_temp_path.GetWritableStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombCreateTempDirectoryInDirectory(const HoneycombString& base_dir,
                                                  const HoneycombString& prefix,
                                                  HoneycombString& new_dir) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: base_dir; type: string_byref_const
  DCHECK(!base_dir.empty());
  if (base_dir.empty()) {
    return false;
  }
  // Unverified params: prefix

  // Execute
  int _retval = honey_create_temp_directory_in_directory(
      base_dir.GetStruct(), prefix.GetStruct(), new_dir.GetWritableStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombDirectoryExists(const HoneycombString& path) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: path; type: string_byref_const
  DCHECK(!path.empty());
  if (path.empty()) {
    return false;
  }

  // Execute
  int _retval = honey_directory_exists(path.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombDeleteFile(const HoneycombString& path, bool recursive) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: path; type: string_byref_const
  DCHECK(!path.empty());
  if (path.empty()) {
    return false;
  }

  // Execute
  int _retval = honey_delete_file(path.GetStruct(), recursive);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombZipDirectory(const HoneycombString& src_dir,
                                const HoneycombString& dest_file,
                                bool include_hidden_files) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: src_dir; type: string_byref_const
  DCHECK(!src_dir.empty());
  if (src_dir.empty()) {
    return false;
  }
  // Verify param: dest_file; type: string_byref_const
  DCHECK(!dest_file.empty());
  if (dest_file.empty()) {
    return false;
  }

  // Execute
  int _retval = honey_zip_directory(src_dir.GetStruct(), dest_file.GetStruct(),
                                  include_hidden_files);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL void HoneycombLoadCRLSetsFile(const HoneycombString& path) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: path; type: string_byref_const
  DCHECK(!path.empty());
  if (path.empty()) {
    return;
  }

  // Execute
  honey_load_crlsets_file(path.GetStruct());
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL bool HoneycombIsRTL() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_is_rtl();

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL
bool HoneycombAddCrossOriginWhitelistEntry(const HoneycombString& source_origin,
                                     const HoneycombString& target_protocol,
                                     const HoneycombString& target_domain,
                                     bool allow_target_subdomains) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: source_origin; type: string_byref_const
  DCHECK(!source_origin.empty());
  if (source_origin.empty()) {
    return false;
  }
  // Verify param: target_protocol; type: string_byref_const
  DCHECK(!target_protocol.empty());
  if (target_protocol.empty()) {
    return false;
  }
  // Unverified params: target_domain

  // Execute
  int _retval = honey_add_cross_origin_whitelist_entry(
      source_origin.GetStruct(), target_protocol.GetStruct(),
      target_domain.GetStruct(), allow_target_subdomains);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL
bool HoneycombRemoveCrossOriginWhitelistEntry(const HoneycombString& source_origin,
                                        const HoneycombString& target_protocol,
                                        const HoneycombString& target_domain,
                                        bool allow_target_subdomains) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: source_origin; type: string_byref_const
  DCHECK(!source_origin.empty());
  if (source_origin.empty()) {
    return false;
  }
  // Verify param: target_protocol; type: string_byref_const
  DCHECK(!target_protocol.empty());
  if (target_protocol.empty()) {
    return false;
  }
  // Unverified params: target_domain

  // Execute
  int _retval = honey_remove_cross_origin_whitelist_entry(
      source_origin.GetStruct(), target_protocol.GetStruct(),
      target_domain.GetStruct(), allow_target_subdomains);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL bool HoneycombClearCrossOriginWhitelist() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_clear_cross_origin_whitelist();

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombResolveURL(const HoneycombString& base_url,
                              const HoneycombString& relative_url,
                              HoneycombString& resolved_url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: base_url; type: string_byref_const
  DCHECK(!base_url.empty());
  if (base_url.empty()) {
    return false;
  }
  // Verify param: relative_url; type: string_byref_const
  DCHECK(!relative_url.empty());
  if (relative_url.empty()) {
    return false;
  }

  // Execute
  int _retval = honey_resolve_url(base_url.GetStruct(), relative_url.GetStruct(),
                                resolved_url.GetWritableStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombParseURL(const HoneycombString& url, HoneycombURLParts& parts) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty()) {
    return false;
  }

  // Execute
  int _retval = honey_parse_url(url.GetStruct(), &parts);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombCreateURL(const HoneycombURLParts& parts, HoneycombString& url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_create_url(&parts, url.GetWritableStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombString
HoneycombFormatUrlForSecurityDisplay(const HoneycombString& origin_url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: origin_url; type: string_byref_const
  DCHECK(!origin_url.empty());
  if (origin_url.empty()) {
    return HoneycombString();
  }

  // Execute
  honey_string_userfree_t _retval =
      honey_format_url_for_security_display(origin_url.GetStruct());

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombString HoneycombGetMimeType(const HoneycombString& extension) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension; type: string_byref_const
  DCHECK(!extension.empty());
  if (extension.empty()) {
    return HoneycombString();
  }

  // Execute
  honey_string_userfree_t _retval = honey_get_mime_type(extension.GetStruct());

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL
void HoneycombGetExtensionsForMimeType(const HoneycombString& mime_type,
                                 std::vector<HoneycombString>& extensions) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: mime_type; type: string_byref_const
  DCHECK(!mime_type.empty());
  if (mime_type.empty()) {
    return;
  }

  // Translate param: extensions; type: string_vec_byref
  honey_string_list_t extensionsList = honey_string_list_alloc();
  DCHECK(extensionsList);
  if (extensionsList) {
    transfer_string_list_contents(extensions, extensionsList);
  }

  // Execute
  honey_get_extensions_for_mime_type(mime_type.GetStruct(), extensionsList);

  // Restore param:extensions; type: string_vec_byref
  if (extensionsList) {
    extensions.clear();
    transfer_string_list_contents(extensionsList, extensions);
    honey_string_list_free(extensionsList);
  }
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombString HoneycombBase64Encode(const void* data, size_t data_size) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: data; type: simple_byaddr
  DCHECK(data);
  if (!data) {
    return HoneycombString();
  }

  // Execute
  honey_string_userfree_t _retval = honey_base64encode(data, data_size);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombRefPtr<HoneycombBinaryValue> HoneycombBase64Decode(const HoneycombString& data) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: data; type: string_byref_const
  DCHECK(!data.empty());
  if (data.empty()) {
    return nullptr;
  }

  // Execute
  honey_binary_value_t* _retval = honey_base64decode(data.GetStruct());

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombString HoneycombURIEncode(const HoneycombString& text, bool use_plus) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: text; type: string_byref_const
  DCHECK(!text.empty());
  if (text.empty()) {
    return HoneycombString();
  }

  // Execute
  honey_string_userfree_t _retval = honey_uriencode(text.GetStruct(), use_plus);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombString HoneycombURIDecode(const HoneycombString& text,
                                  bool convert_to_utf8,
                                  honey_uri_unescape_rule_t unescape_rule) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: text; type: string_byref_const
  DCHECK(!text.empty());
  if (text.empty()) {
    return HoneycombString();
  }

  // Execute
  honey_string_userfree_t _retval =
      honey_uridecode(text.GetStruct(), convert_to_utf8, unescape_rule);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombRefPtr<HoneycombValue> HoneycombParseJSON(const HoneycombString& json_string,
                                            honey_json_parser_options_t options) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: json_string; type: string_byref_const
  DCHECK(!json_string.empty());
  if (json_string.empty()) {
    return nullptr;
  }

  // Execute
  honey_value_t* _retval = honey_parse_json(json_string.GetStruct(), options);

  // Return type: refptr_same
  return HoneycombValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombRefPtr<HoneycombValue> HoneycombParseJSON(const void* json,
                                            size_t json_size,
                                            honey_json_parser_options_t options) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: json; type: simple_byaddr
  DCHECK(json);
  if (!json) {
    return nullptr;
  }

  // Execute
  honey_value_t* _retval = honey_parse_json_buffer(json, json_size, options);

  // Return type: refptr_same
  return HoneycombValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombRefPtr<HoneycombValue> HoneycombParseJSONAndReturnError(
    const HoneycombString& json_string,
    honey_json_parser_options_t options,
    HoneycombString& error_msg_out) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: json_string; type: string_byref_const
  DCHECK(!json_string.empty());
  if (json_string.empty()) {
    return nullptr;
  }

  // Execute
  honey_value_t* _retval = honey_parse_jsonand_return_error(
      json_string.GetStruct(), options, error_msg_out.GetWritableStruct());

  // Return type: refptr_same
  return HoneycombValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL HoneycombString HoneycombWriteJSON(HoneycombRefPtr<HoneycombValue> node,
                                  honey_json_writer_options_t options) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: node; type: refptr_same
  DCHECK(node.get());
  if (!node.get()) {
    return HoneycombString();
  }

  // Execute
  honey_string_userfree_t _retval =
      honey_write_json(HoneycombValueCToCpp::Unwrap(node), options);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombGetPath(PathKey key, HoneycombString& path) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_get_path(key, path.GetWritableStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombLaunchProcess(HoneycombRefPtr<HoneycombCommandLine> command_line) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: command_line; type: refptr_same
  DCHECK(command_line.get());
  if (!command_line.get()) {
    return false;
  }

  // Execute
  int _retval = honey_launch_process(HoneycombCommandLineCToCpp::Unwrap(command_line));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombRegisterSchemeHandlerFactory(
    const HoneycombString& scheme_name,
    const HoneycombString& domain_name,
    HoneycombRefPtr<HoneycombSchemeHandlerFactory> factory) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: scheme_name; type: string_byref_const
  DCHECK(!scheme_name.empty());
  if (scheme_name.empty()) {
    return false;
  }
  // Unverified params: domain_name, factory

  // Execute
  int _retval = honey_register_scheme_handler_factory(
      scheme_name.GetStruct(), domain_name.GetStruct(),
      HoneycombSchemeHandlerFactoryCppToC::Wrap(factory));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL bool HoneycombClearSchemeHandlerFactories() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_clear_scheme_handler_factories();

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombIsCertStatusError(honey_cert_status_t status) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_is_cert_status_error(status);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL bool HoneycombCurrentlyOn(HoneycombThreadId threadId) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = honey_currently_on(threadId);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombPostTask(HoneycombThreadId threadId, HoneycombRefPtr<HoneycombTask> task) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: task; type: refptr_diff
  DCHECK(task.get());
  if (!task.get()) {
    return false;
  }

  // Execute
  int _retval = honey_post_task(threadId, HoneycombTaskCppToC::Wrap(task));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombPostDelayedTask(HoneycombThreadId threadId,
                                   HoneycombRefPtr<HoneycombTask> task,
                                   int64_t delay_ms) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: task; type: refptr_diff
  DCHECK(task.get());
  if (!task.get()) {
    return false;
  }

  // Execute
  int _retval =
      honey_post_delayed_task(threadId, HoneycombTaskCppToC::Wrap(task), delay_ms);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombBeginTracing(const HoneycombString& categories,
                                HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: categories, callback

  // Execute
  int _retval = honey_begin_tracing(categories.GetStruct(),
                                  HoneycombCompletionCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombEndTracing(const HoneycombString& tracing_file,
                              HoneycombRefPtr<HoneycombEndTracingCallback> callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: tracing_file, callback

  // Execute
  int _retval = honey_end_tracing(tracing_file.GetStruct(),
                                HoneycombEndTracingCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HONEYCOMB_GLOBAL int64_t HoneycombNowFromSystemTraceTime() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int64_t _retval = honey_now_from_system_trace_time();

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL bool HoneycombRegisterExtension(const HoneycombString& extension_name,
                                     const HoneycombString& javascript_code,
                                     HoneycombRefPtr<HoneycombV8Handler> handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension_name; type: string_byref_const
  DCHECK(!extension_name.empty());
  if (extension_name.empty()) {
    return false;
  }
  // Verify param: javascript_code; type: string_byref_const
  DCHECK(!javascript_code.empty());
  if (javascript_code.empty()) {
    return false;
  }
  // Unverified params: handler

  // Execute
  int _retval = honey_register_extension(extension_name.GetStruct(),
                                       javascript_code.GetStruct(),
                                       HoneycombV8HandlerCppToC::Wrap(handler));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL void HoneycombExecuteJavaScriptWithUserGestureForTests(
    HoneycombRefPtr<HoneycombFrame> frame,
    const HoneycombString& javascript) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: frame; type: refptr_same
  DCHECK(frame.get());
  if (!frame.get()) {
    return;
  }
  // Unverified params: javascript

  // Execute
  honey_execute_java_script_with_user_gesture_for_tests(
      HoneycombFrameCToCpp::Unwrap(frame), javascript.GetStruct());
}

NO_SANITIZE("cfi-icall")
HONEYCOMB_GLOBAL void HoneycombSetDataDirectoryForTests(const HoneycombString& dir) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: dir; type: string_byref_const
  DCHECK(!dir.empty());
  if (dir.empty()) {
    return;
  }

  // Execute
  honey_set_data_directory_for_tests(dir.GetStruct());
}
