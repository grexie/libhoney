// Copyright (C) 2023 Grexie. Portions copyright
// 2013 The Chromium Authors and 2016 the CEF Authors. All rights reserved. Use of this source code is
// governed by a BSD-style license that can be found in the LICENSE file.

#ifndef HONEYCOMB_TESTS_HONEYCOMBCLIENT_BROWSER_OSR_TEXT_INPUT_CLIENT_OSR_MAC_H_
#define HONEYCOMB_TESTS_HONEYCOMBCLIENT_BROWSER_OSR_TEXT_INPUT_CLIENT_OSR_MAC_H_
#pragma once

#import <Cocoa/Cocoa.h>
#include <string>
#include <vector>

#include "include/honey_browser.h"
#include "include/honey_render_handler.h"

// Implementation for the NSTextInputClient protocol used for enabling IME on
// mac when window rendering is disabled.

@interface HoneycombTextInputClientOSRMac : NSObject <NSTextInputClient> {
 @private

  // The range of current marked text inside the whole content of the DOM node
  // being edited.
  NSRange markedRange_;

  // The current composition character range and its bounds.
  HoneycombRange composition_range_;
  std::vector<HoneycombRect> composition_bounds_;

  // Represents the input-method attributes supported by this object.
  NSArray* validAttributesForMarkedText_;

  // Indicates if we are currently handling a key down event.
  BOOL handlingKeyDown_;

  // Indicates if there is any marked text.
  BOOL hasMarkedText_;

  // Indicates whether there was any marked text prior to handling
  // the current key event.
  BOOL oldHasMarkedText_;

  // Indicates if unmarkText is called or not when handling a keyboard
  // event.
  BOOL unmarkTextCalled_;

  // The selected range, cached from a message sent by the renderer.
  NSRange selectedRange_;

  // Text to be inserted which was generated by handling a key down event.
  std::string textToBeInserted_;

  // Marked text which was generated by handling a key down event.
  HoneycombString markedText_;

  // Underline information of the |markedText_|.
  std::vector<HoneycombCompositionUnderline> underlines_;

  // Replacement range information received from |setMarkedText:|.
  HoneycombRange setMarkedTextReplacementRange_;

  HoneycombRefPtr<HoneycombBrowser> browser_;
}

@property(nonatomic, readonly) NSRange selectedRange;
@property(nonatomic) BOOL handlingKeyDown;

- (id)initWithBrowser:(HoneycombRefPtr<HoneycombBrowser>)browser;
- (void)detach;
- (void)HandleKeyEventBeforeTextInputClient:(NSEvent*)keyEvent;
- (void)HandleKeyEventAfterTextInputClient:(HoneycombKeyEvent)keyEvent;
- (void)ChangeCompositionRange:(HoneycombRange)range
              character_bounds:(const HoneycombRenderHandler::RectList&)bounds;
- (void)cancelComposition;

@end

#endif  // HONEYCOMB_TESTS_HONEYCOMBCLIENT_BROWSER_OSR_TEXT_INPUT_CLIENT_OSR_MAC_H_
