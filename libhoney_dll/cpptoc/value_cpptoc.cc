// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=356224055a712a772976ab1166fe101f98228827$
//

#include "libhoney_dll/cpptoc/value_cpptoc.h"
#include "libhoney_dll/cpptoc/binary_value_cpptoc.h"
#include "libhoney_dll/cpptoc/dictionary_value_cpptoc.h"
#include "libhoney_dll/cpptoc/list_value_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_value_t* honey_value_create() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombValue> _retval = HoneycombValue::Create();

  // Return type: refptr_same
  return HoneycombValueCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK value_is_valid(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_is_owned(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->IsOwned();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_is_read_only(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_is_same(struct _honey_value_t* self,
                               struct _honey_value_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombValueCppToC::Get(self)->IsSame(HoneycombValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_is_equal(struct _honey_value_t* self,
                                struct _honey_value_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombValueCppToC::Get(self)->IsEqual(HoneycombValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _honey_value_t* HONEYCOMB_CALLBACK value_copy(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombValue> _retval = HoneycombValueCppToC::Get(self)->Copy();

  // Return type: refptr_same
  return HoneycombValueCppToC::Wrap(_retval);
}

honey_value_type_t HONEYCOMB_CALLBACK value_get_type(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return VTYPE_INVALID;
  }

  // Execute
  honey_value_type_t _retval = HoneycombValueCppToC::Get(self)->GetType();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK value_get_bool(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->GetBool();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_get_int(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombValueCppToC::Get(self)->GetInt();

  // Return type: simple
  return _retval;
}

double HONEYCOMB_CALLBACK value_get_double(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  double _retval = HoneycombValueCppToC::Get(self)->GetDouble();

  // Return type: simple
  return _retval;
}

honey_string_userfree_t HONEYCOMB_CALLBACK value_get_string(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombValueCppToC::Get(self)->GetString();

  // Return type: string
  return _retval.DetachToUserFree();
}

struct _honey_binary_value_t* HONEYCOMB_CALLBACK
value_get_binary(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBinaryValue> _retval = HoneycombValueCppToC::Get(self)->GetBinary();

  // Return type: refptr_same
  return HoneycombBinaryValueCppToC::Wrap(_retval);
}

struct _honey_dictionary_value_t* HONEYCOMB_CALLBACK
value_get_dictionary(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDictionaryValue> _retval =
      HoneycombValueCppToC::Get(self)->GetDictionary();

  // Return type: refptr_same
  return HoneycombDictionaryValueCppToC::Wrap(_retval);
}

struct _honey_list_value_t* HONEYCOMB_CALLBACK
value_get_list(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombListValue> _retval = HoneycombValueCppToC::Get(self)->GetList();

  // Return type: refptr_same
  return HoneycombListValueCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK value_set_null(struct _honey_value_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->SetNull();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_set_bool(struct _honey_value_t* self, int value) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->SetBool(value ? true : false);

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_set_int(struct _honey_value_t* self, int value) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->SetInt(value);

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_set_double(struct _honey_value_t* self, double value) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->SetDouble(value);

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_set_string(struct _honey_value_t* self,
                                  const honey_string_t* value) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Unverified params: value

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->SetString(HoneycombString(value));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_set_binary(struct _honey_value_t* self,
                                  struct _honey_binary_value_t* value) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: value; type: refptr_same
  DCHECK(value);
  if (!value) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombValueCppToC::Get(self)->SetBinary(HoneycombBinaryValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_set_dictionary(struct _honey_value_t* self,
                                      struct _honey_dictionary_value_t* value) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: value; type: refptr_same
  DCHECK(value);
  if (!value) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombValueCppToC::Get(self)->SetDictionary(
      HoneycombDictionaryValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK value_set_list(struct _honey_value_t* self,
                                struct _honey_list_value_t* value) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: value; type: refptr_same
  DCHECK(value);
  if (!value) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombValueCppToC::Get(self)->SetList(HoneycombListValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombValueCppToC::HoneycombValueCppToC() {
  GetStruct()->is_valid = value_is_valid;
  GetStruct()->is_owned = value_is_owned;
  GetStruct()->is_read_only = value_is_read_only;
  GetStruct()->is_same = value_is_same;
  GetStruct()->is_equal = value_is_equal;
  GetStruct()->copy = value_copy;
  GetStruct()->get_type = value_get_type;
  GetStruct()->get_bool = value_get_bool;
  GetStruct()->get_int = value_get_int;
  GetStruct()->get_double = value_get_double;
  GetStruct()->get_string = value_get_string;
  GetStruct()->get_binary = value_get_binary;
  GetStruct()->get_dictionary = value_get_dictionary;
  GetStruct()->get_list = value_get_list;
  GetStruct()->set_null = value_set_null;
  GetStruct()->set_bool = value_set_bool;
  GetStruct()->set_int = value_set_int;
  GetStruct()->set_double = value_set_double;
  GetStruct()->set_string = value_set_string;
  GetStruct()->set_binary = value_set_binary;
  GetStruct()->set_dictionary = value_set_dictionary;
  GetStruct()->set_list = value_set_list;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombValueCppToC::~HoneycombValueCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombValue>
HoneycombCppToCRefCounted<HoneycombValueCppToC, HoneycombValue, honey_value_t>::UnwrapDerived(
    HoneycombWrapperType type,
    honey_value_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCppToCRefCounted<HoneycombValueCppToC, HoneycombValue, honey_value_t>::kWrapperType =
        WT_VALUE;
