// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8ed7a2cd363a38cde65551fa5366085d9fa5b919$
//

#include "libhoney_dll/cpptoc/views/browser_view_cpptoc.h"
#include "libhoney_dll/cpptoc/browser_cpptoc.h"
#include "libhoney_dll/cpptoc/dictionary_value_cpptoc.h"
#include "libhoney_dll/cpptoc/request_context_cpptoc.h"
#include "libhoney_dll/cpptoc/views/button_cpptoc.h"
#include "libhoney_dll/cpptoc/views/panel_cpptoc.h"
#include "libhoney_dll/cpptoc/views/scroll_view_cpptoc.h"
#include "libhoney_dll/cpptoc/views/textfield_cpptoc.h"
#include "libhoney_dll/cpptoc/views/view_cpptoc.h"
#include "libhoney_dll/cpptoc/views/window_cpptoc.h"
#include "libhoney_dll/ctocpp/client_ctocpp.h"
#include "libhoney_dll/ctocpp/views/browser_view_delegate_ctocpp.h"
#include "libhoney_dll/ctocpp/views/view_delegate_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"
#include "libhoney_dll/template_util.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_browser_view_t* honey_browser_view_create(
    honey_client_t* client,
    const honey_string_t* url,
    const struct _honey_browser_settings_t* settings,
    honey_dictionary_value_t* extra_info,
    honey_request_context_t* request_context,
    honey_browser_view_delegate_t* delegate) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: settings; type: struct_byref_const
  DCHECK(settings);
  if (!settings) {
    return NULL;
  }
  if (!template_util::has_valid_size(settings)) {
    DCHECK(false) << "invalid settings->[base.]size";
    return NULL;
  }
  // Unverified params: client, url, extra_info, request_context, delegate

  // Translate param: settings; type: struct_byref_const
  HoneycombBrowserSettings settingsObj;
  if (settings) {
    settingsObj.Set(*settings, false);
  }

  // Execute
  HoneycombRefPtr<HoneycombBrowserView> _retval = HoneycombBrowserView::CreateBrowserView(
      HoneycombClientCToCpp::Wrap(client), HoneycombString(url), settingsObj,
      HoneycombDictionaryValueCppToC::Unwrap(extra_info),
      HoneycombRequestContextCppToC::Unwrap(request_context),
      HoneycombBrowserViewDelegateCToCpp::Wrap(delegate));

  // Return type: refptr_same
  return HoneycombBrowserViewCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT honey_browser_view_t* honey_browser_view_get_for_browser(
    honey_browser_t* browser) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_same
  DCHECK(browser);
  if (!browser) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBrowserView> _retval =
      HoneycombBrowserView::GetForBrowser(HoneycombBrowserCppToC::Unwrap(browser));

  // Return type: refptr_same
  return HoneycombBrowserViewCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_browser_t* HONEYCOMB_CALLBACK
browser_view_get_browser(struct _honey_browser_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBrowser> _retval = HoneycombBrowserViewCppToC::Get(self)->GetBrowser();

  // Return type: refptr_same
  return HoneycombBrowserCppToC::Wrap(_retval);
}

struct _honey_view_t* HONEYCOMB_CALLBACK
browser_view_get_chrome_toolbar(struct _honey_browser_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval =
      HoneycombBrowserViewCppToC::Get(self)->GetChromeToolbar();

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK
browser_view_set_prefer_accelerators(struct _honey_browser_view_t* self,
                                     int prefer_accelerators) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(self)->SetPreferAccelerators(
      prefer_accelerators ? true : false);
}

honey_browser_view_t* HONEYCOMB_CALLBACK
browser_view_as_browser_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBrowserView> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->AsBrowserView();

  // Return type: refptr_same
  return HoneycombBrowserViewCppToC::Wrap(_retval);
}

honey_button_t* HONEYCOMB_CALLBACK browser_view_as_button(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombButton> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->AsButton();

  // Return type: refptr_same
  return HoneycombButtonCppToC::Wrap(_retval);
}

honey_panel_t* HONEYCOMB_CALLBACK browser_view_as_panel(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombPanel> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->AsPanel();

  // Return type: refptr_same
  return HoneycombPanelCppToC::Wrap(_retval);
}

honey_scroll_view_t* HONEYCOMB_CALLBACK
browser_view_as_scroll_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombScrollView> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->AsScrollView();

  // Return type: refptr_same
  return HoneycombScrollViewCppToC::Wrap(_retval);
}

honey_textfield_t* HONEYCOMB_CALLBACK
browser_view_as_textfield(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombTextfield> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->AsTextfield();

  // Return type: refptr_same
  return HoneycombTextfieldCppToC::Wrap(_retval);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
browser_view_get_type_string(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetTypeString();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_string_userfree_t HONEYCOMB_CALLBACK
browser_view_to_string(struct _honey_view_t* self, int include_children) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->ToString(include_children ? true : false);

  // Return type: string
  return _retval.DetachToUserFree();
}

int HONEYCOMB_CALLBACK browser_view_is_valid(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK browser_view_is_attached(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->IsAttached();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK browser_view_is_same(struct _honey_view_t* self,
                                      struct _honey_view_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->IsSame(HoneycombViewCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _honey_view_delegate_t* HONEYCOMB_CALLBACK
browser_view_get_delegate(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombViewDelegate> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetDelegate();

  // Return type: refptr_diff
  return HoneycombViewDelegateCToCpp::Unwrap(_retval);
}

struct _honey_window_t* HONEYCOMB_CALLBACK
browser_view_get_window(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombWindow> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetWindow();

  // Return type: refptr_same
  return HoneycombWindowCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK browser_view_get_id(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetID();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_set_id(struct _honey_view_t* self, int id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetID(id);
}

int HONEYCOMB_CALLBACK browser_view_get_group_id(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetGroupID();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_set_group_id(struct _honey_view_t* self,
                                            int group_id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetGroupID(group_id);
}

struct _honey_view_t* HONEYCOMB_CALLBACK
browser_view_get_parent_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetParentView();

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

struct _honey_view_t* HONEYCOMB_CALLBACK
browser_view_get_view_for_id(struct _honey_view_t* self, int id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetViewForID(id);

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK browser_view_set_bounds(struct _honey_view_t* self,
                                          const honey_rect_t* bounds) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: bounds; type: simple_byref_const
  DCHECK(bounds);
  if (!bounds) {
    return;
  }

  // Translate param: bounds; type: simple_byref_const
  HoneycombRect boundsVal = bounds ? *bounds : HoneycombRect();

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetBounds(boundsVal);
}

honey_rect_t HONEYCOMB_CALLBACK browser_view_get_bounds(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetBounds();

  // Return type: simple
  return _retval;
}

honey_rect_t HONEYCOMB_CALLBACK
browser_view_get_bounds_in_screen(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetBoundsInScreen();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_set_size(struct _honey_view_t* self,
                                        const honey_size_t* size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size) {
    return;
  }

  // Translate param: size; type: simple_byref_const
  HoneycombSize sizeVal = size ? *size : HoneycombSize();

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetSize(sizeVal);
}

honey_size_t HONEYCOMB_CALLBACK browser_view_get_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetSize();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_set_position(struct _honey_view_t* self,
                                            const honey_point_t* position) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: position; type: simple_byref_const
  DCHECK(position);
  if (!position) {
    return;
  }

  // Translate param: position; type: simple_byref_const
  HoneycombPoint positionVal = position ? *position : HoneycombPoint();

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetPosition(positionVal);
}

honey_point_t HONEYCOMB_CALLBACK browser_view_get_position(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombPoint();
  }

  // Execute
  honey_point_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetPosition();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_set_insets(struct _honey_view_t* self,
                                          const honey_insets_t* insets) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: insets; type: simple_byref_const
  DCHECK(insets);
  if (!insets) {
    return;
  }

  // Translate param: insets; type: simple_byref_const
  HoneycombInsets insetsVal = insets ? *insets : HoneycombInsets();

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetInsets(insetsVal);
}

honey_insets_t HONEYCOMB_CALLBACK browser_view_get_insets(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombInsets();
  }

  // Execute
  honey_insets_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetInsets();

  // Return type: simple
  return _retval;
}

honey_size_t HONEYCOMB_CALLBACK
browser_view_get_preferred_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetPreferredSize();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
browser_view_size_to_preferred_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SizeToPreferredSize();
}

honey_size_t HONEYCOMB_CALLBACK
browser_view_get_minimum_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetMinimumSize();

  // Return type: simple
  return _retval;
}

honey_size_t HONEYCOMB_CALLBACK
browser_view_get_maximum_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetMaximumSize();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK browser_view_get_height_for_width(struct _honey_view_t* self,
                                                   int width) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetHeightForWidth(width);

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_invalidate_layout(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->InvalidateLayout();
}

void HONEYCOMB_CALLBACK browser_view_set_visible(struct _honey_view_t* self,
                                           int visible) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetVisible(visible ? true : false);
}

int HONEYCOMB_CALLBACK browser_view_is_visible(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->IsVisible();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK browser_view_is_drawn(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->IsDrawn();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_set_enabled(struct _honey_view_t* self,
                                           int enabled) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetEnabled(enabled ? true : false);
}

int HONEYCOMB_CALLBACK browser_view_is_enabled(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->IsEnabled();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_set_focusable(struct _honey_view_t* self,
                                             int focusable) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetFocusable(focusable ? true : false);
}

int HONEYCOMB_CALLBACK browser_view_is_focusable(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->IsFocusable();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
browser_view_is_accessibility_focusable(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->IsAccessibilityFocusable();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK browser_view_request_focus(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->RequestFocus();
}

void HONEYCOMB_CALLBACK browser_view_set_background_color(struct _honey_view_t* self,
                                                    honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
      ->SetBackgroundColor(color);
}

honey_color_t HONEYCOMB_CALLBACK
browser_view_get_background_color(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  honey_color_t _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->GetBackgroundColor();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK browser_view_convert_point_to_screen(struct _honey_view_t* self,
                                                      honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->ConvertPointToScreen(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
browser_view_convert_point_from_screen(struct _honey_view_t* self,
                                       honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->ConvertPointFromScreen(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK browser_view_convert_point_to_window(struct _honey_view_t* self,
                                                      honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->ConvertPointToWindow(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
browser_view_convert_point_from_window(struct _honey_view_t* self,
                                       honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->ConvertPointFromWindow(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK browser_view_convert_point_to_view(struct _honey_view_t* self,
                                                    struct _honey_view_t* view,
                                                    honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->ConvertPointToView(HoneycombViewCppToC::Unwrap(view), pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK browser_view_convert_point_from_view(struct _honey_view_t* self,
                                                      struct _honey_view_t* view,
                                                      honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombBrowserViewCppToC::Get(reinterpret_cast<honey_browser_view_t*>(self))
          ->ConvertPointFromView(HoneycombViewCppToC::Unwrap(view), pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombBrowserViewCppToC::HoneycombBrowserViewCppToC() {
  GetStruct()->get_browser = browser_view_get_browser;
  GetStruct()->get_chrome_toolbar = browser_view_get_chrome_toolbar;
  GetStruct()->set_prefer_accelerators = browser_view_set_prefer_accelerators;
  GetStruct()->base.as_browser_view = browser_view_as_browser_view;
  GetStruct()->base.as_button = browser_view_as_button;
  GetStruct()->base.as_panel = browser_view_as_panel;
  GetStruct()->base.as_scroll_view = browser_view_as_scroll_view;
  GetStruct()->base.as_textfield = browser_view_as_textfield;
  GetStruct()->base.get_type_string = browser_view_get_type_string;
  GetStruct()->base.to_string = browser_view_to_string;
  GetStruct()->base.is_valid = browser_view_is_valid;
  GetStruct()->base.is_attached = browser_view_is_attached;
  GetStruct()->base.is_same = browser_view_is_same;
  GetStruct()->base.get_delegate = browser_view_get_delegate;
  GetStruct()->base.get_window = browser_view_get_window;
  GetStruct()->base.get_id = browser_view_get_id;
  GetStruct()->base.set_id = browser_view_set_id;
  GetStruct()->base.get_group_id = browser_view_get_group_id;
  GetStruct()->base.set_group_id = browser_view_set_group_id;
  GetStruct()->base.get_parent_view = browser_view_get_parent_view;
  GetStruct()->base.get_view_for_id = browser_view_get_view_for_id;
  GetStruct()->base.set_bounds = browser_view_set_bounds;
  GetStruct()->base.get_bounds = browser_view_get_bounds;
  GetStruct()->base.get_bounds_in_screen = browser_view_get_bounds_in_screen;
  GetStruct()->base.set_size = browser_view_set_size;
  GetStruct()->base.get_size = browser_view_get_size;
  GetStruct()->base.set_position = browser_view_set_position;
  GetStruct()->base.get_position = browser_view_get_position;
  GetStruct()->base.set_insets = browser_view_set_insets;
  GetStruct()->base.get_insets = browser_view_get_insets;
  GetStruct()->base.get_preferred_size = browser_view_get_preferred_size;
  GetStruct()->base.size_to_preferred_size =
      browser_view_size_to_preferred_size;
  GetStruct()->base.get_minimum_size = browser_view_get_minimum_size;
  GetStruct()->base.get_maximum_size = browser_view_get_maximum_size;
  GetStruct()->base.get_height_for_width = browser_view_get_height_for_width;
  GetStruct()->base.invalidate_layout = browser_view_invalidate_layout;
  GetStruct()->base.set_visible = browser_view_set_visible;
  GetStruct()->base.is_visible = browser_view_is_visible;
  GetStruct()->base.is_drawn = browser_view_is_drawn;
  GetStruct()->base.set_enabled = browser_view_set_enabled;
  GetStruct()->base.is_enabled = browser_view_is_enabled;
  GetStruct()->base.set_focusable = browser_view_set_focusable;
  GetStruct()->base.is_focusable = browser_view_is_focusable;
  GetStruct()->base.is_accessibility_focusable =
      browser_view_is_accessibility_focusable;
  GetStruct()->base.request_focus = browser_view_request_focus;
  GetStruct()->base.set_background_color = browser_view_set_background_color;
  GetStruct()->base.get_background_color = browser_view_get_background_color;
  GetStruct()->base.convert_point_to_screen =
      browser_view_convert_point_to_screen;
  GetStruct()->base.convert_point_from_screen =
      browser_view_convert_point_from_screen;
  GetStruct()->base.convert_point_to_window =
      browser_view_convert_point_to_window;
  GetStruct()->base.convert_point_from_window =
      browser_view_convert_point_from_window;
  GetStruct()->base.convert_point_to_view = browser_view_convert_point_to_view;
  GetStruct()->base.convert_point_from_view =
      browser_view_convert_point_from_view;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombBrowserViewCppToC::~HoneycombBrowserViewCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombBrowserView>
HoneycombCppToCRefCounted<HoneycombBrowserViewCppToC, HoneycombBrowserView, honey_browser_view_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_browser_view_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombBrowserViewCppToC,
                                   HoneycombBrowserView,
                                   honey_browser_view_t>::kWrapperType =
    WT_BROWSER_VIEW;
