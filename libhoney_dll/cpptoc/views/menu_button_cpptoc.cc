// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c386e6143a554182ff6e4beb9e8dd813a5753a55$
//

#include "libhoney_dll/cpptoc/views/menu_button_cpptoc.h"
#include "libhoney_dll/cpptoc/image_cpptoc.h"
#include "libhoney_dll/cpptoc/menu_model_cpptoc.h"
#include "libhoney_dll/cpptoc/views/browser_view_cpptoc.h"
#include "libhoney_dll/cpptoc/views/button_cpptoc.h"
#include "libhoney_dll/cpptoc/views/label_button_cpptoc.h"
#include "libhoney_dll/cpptoc/views/panel_cpptoc.h"
#include "libhoney_dll/cpptoc/views/scroll_view_cpptoc.h"
#include "libhoney_dll/cpptoc/views/textfield_cpptoc.h"
#include "libhoney_dll/cpptoc/views/view_cpptoc.h"
#include "libhoney_dll/cpptoc/views/window_cpptoc.h"
#include "libhoney_dll/ctocpp/views/menu_button_delegate_ctocpp.h"
#include "libhoney_dll/ctocpp/views/view_delegate_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_menu_button_t* honey_menu_button_create(
    honey_menu_button_delegate_t* delegate,
    const honey_string_t* text) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: delegate; type: refptr_diff
  DCHECK(delegate);
  if (!delegate) {
    return NULL;
  }
  // Unverified params: text

  // Execute
  HoneycombRefPtr<HoneycombMenuButton> _retval = HoneycombMenuButton::CreateMenuButton(
      HoneycombMenuButtonDelegateCToCpp::Wrap(delegate), HoneycombString(text));

  // Return type: refptr_same
  return HoneycombMenuButtonCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK
menu_button_show_menu(struct _honey_menu_button_t* self,
                      honey_menu_model_t* menu_model,
                      const honey_point_t* screen_point,
                      honey_menu_anchor_position_t anchor_position) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: menu_model; type: refptr_same
  DCHECK(menu_model);
  if (!menu_model) {
    return;
  }
  // Verify param: screen_point; type: simple_byref_const
  DCHECK(screen_point);
  if (!screen_point) {
    return;
  }

  // Translate param: screen_point; type: simple_byref_const
  HoneycombPoint screen_pointVal = screen_point ? *screen_point : HoneycombPoint();

  // Execute
  HoneycombMenuButtonCppToC::Get(self)->ShowMenu(
      HoneycombMenuModelCppToC::Unwrap(menu_model), screen_pointVal, anchor_position);
}

void HONEYCOMB_CALLBACK menu_button_trigger_menu(struct _honey_menu_button_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(self)->TriggerMenu();
}

honey_menu_button_t* HONEYCOMB_CALLBACK
menu_button_as_menu_button(struct _honey_label_button_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombMenuButton> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->AsMenuButton();

  // Return type: refptr_same
  return HoneycombMenuButtonCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK menu_button_set_text(struct _honey_label_button_t* self,
                                       const honey_string_t* text) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: text; type: string_byref_const
  DCHECK(text);
  if (!text) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetText(HoneycombString(text));
}

honey_string_userfree_t HONEYCOMB_CALLBACK
menu_button_get_text(struct _honey_label_button_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetText();

  // Return type: string
  return _retval.DetachToUserFree();
}

void HONEYCOMB_CALLBACK menu_button_set_image(struct _honey_label_button_t* self,
                                        honey_button_state_t button_state,
                                        honey_image_t* image) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: image

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetImage(button_state, HoneycombImageCppToC::Unwrap(image));
}

honey_image_t* HONEYCOMB_CALLBACK
menu_button_get_image(struct _honey_label_button_t* self,
                      honey_button_state_t button_state) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombImage> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetImage(button_state);

  // Return type: refptr_same
  return HoneycombImageCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK menu_button_set_text_color(struct _honey_label_button_t* self,
                                             honey_button_state_t for_state,
                                             honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetTextColor(for_state, color);
}

void HONEYCOMB_CALLBACK
menu_button_set_enabled_text_colors(struct _honey_label_button_t* self,
                                    honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetEnabledTextColors(color);
}

void HONEYCOMB_CALLBACK menu_button_set_font_list(struct _honey_label_button_t* self,
                                            const honey_string_t* font_list) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: font_list; type: string_byref_const
  DCHECK(font_list);
  if (!font_list) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetFontList(HoneycombString(font_list));
}

void HONEYCOMB_CALLBACK
menu_button_set_horizontal_alignment(struct _honey_label_button_t* self,
                                     honey_horizontal_alignment_t alignment) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetHorizontalAlignment(alignment);
}

void HONEYCOMB_CALLBACK menu_button_set_minimum_size(struct _honey_label_button_t* self,
                                               const honey_size_t* size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size) {
    return;
  }

  // Translate param: size; type: simple_byref_const
  HoneycombSize sizeVal = size ? *size : HoneycombSize();

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetMinimumSize(sizeVal);
}

void HONEYCOMB_CALLBACK menu_button_set_maximum_size(struct _honey_label_button_t* self,
                                               const honey_size_t* size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size) {
    return;
  }

  // Translate param: size; type: simple_byref_const
  HoneycombSize sizeVal = size ? *size : HoneycombSize();

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetMaximumSize(sizeVal);
}

honey_label_button_t* HONEYCOMB_CALLBACK
menu_button_as_label_button(struct _honey_button_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombLabelButton> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->AsLabelButton();

  // Return type: refptr_same
  return HoneycombLabelButtonCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK menu_button_set_state(struct _honey_button_t* self,
                                        honey_button_state_t state) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetState(state);
}

honey_button_state_t HONEYCOMB_CALLBACK
menu_button_get_state(struct _honey_button_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HONEYCOMB_BUTTON_STATE_NORMAL;
  }

  // Execute
  honey_button_state_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetState();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_set_ink_drop_enabled(struct _honey_button_t* self,
                                                   int enabled) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetInkDropEnabled(enabled ? true : false);
}

void HONEYCOMB_CALLBACK
menu_button_set_tooltip_text(struct _honey_button_t* self,
                             const honey_string_t* tooltip_text) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: tooltip_text; type: string_byref_const
  DCHECK(tooltip_text);
  if (!tooltip_text) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetTooltipText(HoneycombString(tooltip_text));
}

void HONEYCOMB_CALLBACK menu_button_set_accessible_name(struct _honey_button_t* self,
                                                  const honey_string_t* name) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetAccessibleName(HoneycombString(name));
}

honey_browser_view_t* HONEYCOMB_CALLBACK
menu_button_as_browser_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBrowserView> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->AsBrowserView();

  // Return type: refptr_same
  return HoneycombBrowserViewCppToC::Wrap(_retval);
}

honey_button_t* HONEYCOMB_CALLBACK menu_button_as_button(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombButton> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->AsButton();

  // Return type: refptr_same
  return HoneycombButtonCppToC::Wrap(_retval);
}

honey_panel_t* HONEYCOMB_CALLBACK menu_button_as_panel(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombPanel> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->AsPanel();

  // Return type: refptr_same
  return HoneycombPanelCppToC::Wrap(_retval);
}

honey_scroll_view_t* HONEYCOMB_CALLBACK
menu_button_as_scroll_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombScrollView> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->AsScrollView();

  // Return type: refptr_same
  return HoneycombScrollViewCppToC::Wrap(_retval);
}

honey_textfield_t* HONEYCOMB_CALLBACK
menu_button_as_textfield(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombTextfield> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->AsTextfield();

  // Return type: refptr_same
  return HoneycombTextfieldCppToC::Wrap(_retval);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
menu_button_get_type_string(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetTypeString();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_string_userfree_t HONEYCOMB_CALLBACK
menu_button_to_string(struct _honey_view_t* self, int include_children) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->ToString(include_children ? true : false);

  // Return type: string
  return _retval.DetachToUserFree();
}

int HONEYCOMB_CALLBACK menu_button_is_valid(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_is_attached(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->IsAttached();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_is_same(struct _honey_view_t* self,
                                     struct _honey_view_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->IsSame(HoneycombViewCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _honey_view_delegate_t* HONEYCOMB_CALLBACK
menu_button_get_delegate(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombViewDelegate> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetDelegate();

  // Return type: refptr_diff
  return HoneycombViewDelegateCToCpp::Unwrap(_retval);
}

struct _honey_window_t* HONEYCOMB_CALLBACK
menu_button_get_window(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombWindow> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetWindow();

  // Return type: refptr_same
  return HoneycombWindowCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK menu_button_get_id(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetID();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_set_id(struct _honey_view_t* self, int id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetID(id);
}

int HONEYCOMB_CALLBACK menu_button_get_group_id(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetGroupID();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_set_group_id(struct _honey_view_t* self,
                                           int group_id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetGroupID(group_id);
}

struct _honey_view_t* HONEYCOMB_CALLBACK
menu_button_get_parent_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetParentView();

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

struct _honey_view_t* HONEYCOMB_CALLBACK
menu_button_get_view_for_id(struct _honey_view_t* self, int id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetViewForID(id);

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK menu_button_set_bounds(struct _honey_view_t* self,
                                         const honey_rect_t* bounds) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: bounds; type: simple_byref_const
  DCHECK(bounds);
  if (!bounds) {
    return;
  }

  // Translate param: bounds; type: simple_byref_const
  HoneycombRect boundsVal = bounds ? *bounds : HoneycombRect();

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetBounds(boundsVal);
}

honey_rect_t HONEYCOMB_CALLBACK menu_button_get_bounds(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetBounds();

  // Return type: simple
  return _retval;
}

honey_rect_t HONEYCOMB_CALLBACK
menu_button_get_bounds_in_screen(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetBoundsInScreen();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_set_size(struct _honey_view_t* self,
                                       const honey_size_t* size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size) {
    return;
  }

  // Translate param: size; type: simple_byref_const
  HoneycombSize sizeVal = size ? *size : HoneycombSize();

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetSize(sizeVal);
}

honey_size_t HONEYCOMB_CALLBACK menu_button_get_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetSize();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_set_position(struct _honey_view_t* self,
                                           const honey_point_t* position) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: position; type: simple_byref_const
  DCHECK(position);
  if (!position) {
    return;
  }

  // Translate param: position; type: simple_byref_const
  HoneycombPoint positionVal = position ? *position : HoneycombPoint();

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetPosition(positionVal);
}

honey_point_t HONEYCOMB_CALLBACK menu_button_get_position(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombPoint();
  }

  // Execute
  honey_point_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetPosition();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_set_insets(struct _honey_view_t* self,
                                         const honey_insets_t* insets) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: insets; type: simple_byref_const
  DCHECK(insets);
  if (!insets) {
    return;
  }

  // Translate param: insets; type: simple_byref_const
  HoneycombInsets insetsVal = insets ? *insets : HoneycombInsets();

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetInsets(insetsVal);
}

honey_insets_t HONEYCOMB_CALLBACK menu_button_get_insets(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombInsets();
  }

  // Execute
  honey_insets_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetInsets();

  // Return type: simple
  return _retval;
}

honey_size_t HONEYCOMB_CALLBACK
menu_button_get_preferred_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetPreferredSize();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_size_to_preferred_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SizeToPreferredSize();
}

honey_size_t HONEYCOMB_CALLBACK menu_button_get_minimum_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetMinimumSize();

  // Return type: simple
  return _retval;
}

honey_size_t HONEYCOMB_CALLBACK menu_button_get_maximum_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetMaximumSize();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_get_height_for_width(struct _honey_view_t* self,
                                                  int width) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetHeightForWidth(width);

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_invalidate_layout(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->InvalidateLayout();
}

void HONEYCOMB_CALLBACK menu_button_set_visible(struct _honey_view_t* self,
                                          int visible) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetVisible(visible ? true : false);
}

int HONEYCOMB_CALLBACK menu_button_is_visible(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->IsVisible();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_is_drawn(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->IsDrawn();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_set_enabled(struct _honey_view_t* self,
                                          int enabled) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetEnabled(enabled ? true : false);
}

int HONEYCOMB_CALLBACK menu_button_is_enabled(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->IsEnabled();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_set_focusable(struct _honey_view_t* self,
                                            int focusable) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetFocusable(focusable ? true : false);
}

int HONEYCOMB_CALLBACK menu_button_is_focusable(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->IsFocusable();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
menu_button_is_accessibility_focusable(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->IsAccessibilityFocusable();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK menu_button_request_focus(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->RequestFocus();
}

void HONEYCOMB_CALLBACK menu_button_set_background_color(struct _honey_view_t* self,
                                                   honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
      ->SetBackgroundColor(color);
}

honey_color_t HONEYCOMB_CALLBACK
menu_button_get_background_color(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  honey_color_t _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->GetBackgroundColor();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_convert_point_to_screen(struct _honey_view_t* self,
                                                     honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->ConvertPointToScreen(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_convert_point_from_screen(struct _honey_view_t* self,
                                                       honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->ConvertPointFromScreen(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_convert_point_to_window(struct _honey_view_t* self,
                                                     honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->ConvertPointToWindow(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_convert_point_from_window(struct _honey_view_t* self,
                                                       honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->ConvertPointFromWindow(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_convert_point_to_view(struct _honey_view_t* self,
                                                   struct _honey_view_t* view,
                                                   honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->ConvertPointToView(HoneycombViewCppToC::Unwrap(view), pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK menu_button_convert_point_from_view(struct _honey_view_t* self,
                                                     struct _honey_view_t* view,
                                                     honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombMenuButtonCppToC::Get(reinterpret_cast<honey_menu_button_t*>(self))
          ->ConvertPointFromView(HoneycombViewCppToC::Unwrap(view), pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombMenuButtonCppToC::HoneycombMenuButtonCppToC() {
  GetStruct()->show_menu = menu_button_show_menu;
  GetStruct()->trigger_menu = menu_button_trigger_menu;
  GetStruct()->base.as_menu_button = menu_button_as_menu_button;
  GetStruct()->base.set_text = menu_button_set_text;
  GetStruct()->base.get_text = menu_button_get_text;
  GetStruct()->base.set_image = menu_button_set_image;
  GetStruct()->base.get_image = menu_button_get_image;
  GetStruct()->base.set_text_color = menu_button_set_text_color;
  GetStruct()->base.set_enabled_text_colors =
      menu_button_set_enabled_text_colors;
  GetStruct()->base.set_font_list = menu_button_set_font_list;
  GetStruct()->base.set_horizontal_alignment =
      menu_button_set_horizontal_alignment;
  GetStruct()->base.set_minimum_size = menu_button_set_minimum_size;
  GetStruct()->base.set_maximum_size = menu_button_set_maximum_size;
  GetStruct()->base.base.as_label_button = menu_button_as_label_button;
  GetStruct()->base.base.set_state = menu_button_set_state;
  GetStruct()->base.base.get_state = menu_button_get_state;
  GetStruct()->base.base.set_ink_drop_enabled =
      menu_button_set_ink_drop_enabled;
  GetStruct()->base.base.set_tooltip_text = menu_button_set_tooltip_text;
  GetStruct()->base.base.set_accessible_name = menu_button_set_accessible_name;
  GetStruct()->base.base.base.as_browser_view = menu_button_as_browser_view;
  GetStruct()->base.base.base.as_button = menu_button_as_button;
  GetStruct()->base.base.base.as_panel = menu_button_as_panel;
  GetStruct()->base.base.base.as_scroll_view = menu_button_as_scroll_view;
  GetStruct()->base.base.base.as_textfield = menu_button_as_textfield;
  GetStruct()->base.base.base.get_type_string = menu_button_get_type_string;
  GetStruct()->base.base.base.to_string = menu_button_to_string;
  GetStruct()->base.base.base.is_valid = menu_button_is_valid;
  GetStruct()->base.base.base.is_attached = menu_button_is_attached;
  GetStruct()->base.base.base.is_same = menu_button_is_same;
  GetStruct()->base.base.base.get_delegate = menu_button_get_delegate;
  GetStruct()->base.base.base.get_window = menu_button_get_window;
  GetStruct()->base.base.base.get_id = menu_button_get_id;
  GetStruct()->base.base.base.set_id = menu_button_set_id;
  GetStruct()->base.base.base.get_group_id = menu_button_get_group_id;
  GetStruct()->base.base.base.set_group_id = menu_button_set_group_id;
  GetStruct()->base.base.base.get_parent_view = menu_button_get_parent_view;
  GetStruct()->base.base.base.get_view_for_id = menu_button_get_view_for_id;
  GetStruct()->base.base.base.set_bounds = menu_button_set_bounds;
  GetStruct()->base.base.base.get_bounds = menu_button_get_bounds;
  GetStruct()->base.base.base.get_bounds_in_screen =
      menu_button_get_bounds_in_screen;
  GetStruct()->base.base.base.set_size = menu_button_set_size;
  GetStruct()->base.base.base.get_size = menu_button_get_size;
  GetStruct()->base.base.base.set_position = menu_button_set_position;
  GetStruct()->base.base.base.get_position = menu_button_get_position;
  GetStruct()->base.base.base.set_insets = menu_button_set_insets;
  GetStruct()->base.base.base.get_insets = menu_button_get_insets;
  GetStruct()->base.base.base.get_preferred_size =
      menu_button_get_preferred_size;
  GetStruct()->base.base.base.size_to_preferred_size =
      menu_button_size_to_preferred_size;
  GetStruct()->base.base.base.get_minimum_size = menu_button_get_minimum_size;
  GetStruct()->base.base.base.get_maximum_size = menu_button_get_maximum_size;
  GetStruct()->base.base.base.get_height_for_width =
      menu_button_get_height_for_width;
  GetStruct()->base.base.base.invalidate_layout = menu_button_invalidate_layout;
  GetStruct()->base.base.base.set_visible = menu_button_set_visible;
  GetStruct()->base.base.base.is_visible = menu_button_is_visible;
  GetStruct()->base.base.base.is_drawn = menu_button_is_drawn;
  GetStruct()->base.base.base.set_enabled = menu_button_set_enabled;
  GetStruct()->base.base.base.is_enabled = menu_button_is_enabled;
  GetStruct()->base.base.base.set_focusable = menu_button_set_focusable;
  GetStruct()->base.base.base.is_focusable = menu_button_is_focusable;
  GetStruct()->base.base.base.is_accessibility_focusable =
      menu_button_is_accessibility_focusable;
  GetStruct()->base.base.base.request_focus = menu_button_request_focus;
  GetStruct()->base.base.base.set_background_color =
      menu_button_set_background_color;
  GetStruct()->base.base.base.get_background_color =
      menu_button_get_background_color;
  GetStruct()->base.base.base.convert_point_to_screen =
      menu_button_convert_point_to_screen;
  GetStruct()->base.base.base.convert_point_from_screen =
      menu_button_convert_point_from_screen;
  GetStruct()->base.base.base.convert_point_to_window =
      menu_button_convert_point_to_window;
  GetStruct()->base.base.base.convert_point_from_window =
      menu_button_convert_point_from_window;
  GetStruct()->base.base.base.convert_point_to_view =
      menu_button_convert_point_to_view;
  GetStruct()->base.base.base.convert_point_from_view =
      menu_button_convert_point_from_view;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombMenuButtonCppToC::~HoneycombMenuButtonCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombMenuButton>
HoneycombCppToCRefCounted<HoneycombMenuButtonCppToC, HoneycombMenuButton, honey_menu_button_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_menu_button_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombMenuButtonCppToC,
                                   HoneycombMenuButton,
                                   honey_menu_button_t>::kWrapperType =
    WT_MENU_BUTTON;
