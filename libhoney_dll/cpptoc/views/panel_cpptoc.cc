// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=fba634e939f8074f3a5ddc6717ac93dd9d5d502f$
//

#include "libhoney_dll/cpptoc/views/panel_cpptoc.h"
#include "libhoney_dll/cpptoc/views/box_layout_cpptoc.h"
#include "libhoney_dll/cpptoc/views/browser_view_cpptoc.h"
#include "libhoney_dll/cpptoc/views/button_cpptoc.h"
#include "libhoney_dll/cpptoc/views/fill_layout_cpptoc.h"
#include "libhoney_dll/cpptoc/views/layout_cpptoc.h"
#include "libhoney_dll/cpptoc/views/scroll_view_cpptoc.h"
#include "libhoney_dll/cpptoc/views/textfield_cpptoc.h"
#include "libhoney_dll/cpptoc/views/view_cpptoc.h"
#include "libhoney_dll/cpptoc/views/window_cpptoc.h"
#include "libhoney_dll/ctocpp/views/panel_delegate_ctocpp.h"
#include "libhoney_dll/ctocpp/views/view_delegate_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_panel_t* honey_panel_create(honey_panel_delegate_t* delegate) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: delegate

  // Execute
  HoneycombRefPtr<HoneycombPanel> _retval =
      HoneycombPanel::CreatePanel(HoneycombPanelDelegateCToCpp::Wrap(delegate));

  // Return type: refptr_same
  return HoneycombPanelCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

struct _honey_window_t* HONEYCOMB_CALLBACK panel_as_window(struct _honey_panel_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombWindow> _retval = HoneycombPanelCppToC::Get(self)->AsWindow();

  // Return type: refptr_same
  return HoneycombWindowCppToC::Wrap(_retval);
}

honey_fill_layout_t* HONEYCOMB_CALLBACK
panel_set_to_fill_layout(struct _honey_panel_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombFillLayout> _retval =
      HoneycombPanelCppToC::Get(self)->SetToFillLayout();

  // Return type: refptr_same
  return HoneycombFillLayoutCppToC::Wrap(_retval);
}

honey_box_layout_t* HONEYCOMB_CALLBACK
panel_set_to_box_layout(struct _honey_panel_t* self,
                        const honey_box_layout_settings_t* settings) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: settings; type: simple_byref_const
  DCHECK(settings);
  if (!settings) {
    return NULL;
  }

  // Translate param: settings; type: simple_byref_const
  HoneycombBoxLayoutSettings settingsVal =
      settings ? *settings : HoneycombBoxLayoutSettings();

  // Execute
  HoneycombRefPtr<HoneycombBoxLayout> _retval =
      HoneycombPanelCppToC::Get(self)->SetToBoxLayout(settingsVal);

  // Return type: refptr_same
  return HoneycombBoxLayoutCppToC::Wrap(_retval);
}

honey_layout_t* HONEYCOMB_CALLBACK panel_get_layout(struct _honey_panel_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombLayout> _retval = HoneycombPanelCppToC::Get(self)->GetLayout();

  // Return type: refptr_same
  return HoneycombLayoutCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK panel_layout(struct _honey_panel_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(self)->Layout();
}

void HONEYCOMB_CALLBACK panel_add_child_view(struct _honey_panel_t* self,
                                       struct _honey_view_t* view) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(self)->AddChildView(HoneycombViewCppToC::Unwrap(view));
}

void HONEYCOMB_CALLBACK panel_add_child_view_at(struct _honey_panel_t* self,
                                          struct _honey_view_t* view,
                                          int index) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return;
  }
  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(self)->AddChildViewAt(HoneycombViewCppToC::Unwrap(view), index);
}

void HONEYCOMB_CALLBACK panel_reorder_child_view(struct _honey_panel_t* self,
                                           struct _honey_view_t* view,
                                           int index) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(self)->ReorderChildView(HoneycombViewCppToC::Unwrap(view),
                                              index);
}

void HONEYCOMB_CALLBACK panel_remove_child_view(struct _honey_panel_t* self,
                                          struct _honey_view_t* view) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(self)->RemoveChildView(HoneycombViewCppToC::Unwrap(view));
}

void HONEYCOMB_CALLBACK panel_remove_all_child_views(struct _honey_panel_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(self)->RemoveAllChildViews();
}

size_t HONEYCOMB_CALLBACK panel_get_child_view_count(struct _honey_panel_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  size_t _retval = HoneycombPanelCppToC::Get(self)->GetChildViewCount();

  // Return type: simple
  return _retval;
}

struct _honey_view_t* HONEYCOMB_CALLBACK
panel_get_child_view_at(struct _honey_panel_t* self, int index) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval = HoneycombPanelCppToC::Get(self)->GetChildViewAt(index);

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

honey_browser_view_t* HONEYCOMB_CALLBACK
panel_as_browser_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBrowserView> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
          ->AsBrowserView();

  // Return type: refptr_same
  return HoneycombBrowserViewCppToC::Wrap(_retval);
}

honey_button_t* HONEYCOMB_CALLBACK panel_as_button(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombButton> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->AsButton();

  // Return type: refptr_same
  return HoneycombButtonCppToC::Wrap(_retval);
}

honey_panel_t* HONEYCOMB_CALLBACK panel_as_panel(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombPanel> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->AsPanel();

  // Return type: refptr_same
  return HoneycombPanelCppToC::Wrap(_retval);
}

honey_scroll_view_t* HONEYCOMB_CALLBACK panel_as_scroll_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombScrollView> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->AsScrollView();

  // Return type: refptr_same
  return HoneycombScrollViewCppToC::Wrap(_retval);
}

honey_textfield_t* HONEYCOMB_CALLBACK panel_as_textfield(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombTextfield> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->AsTextfield();

  // Return type: refptr_same
  return HoneycombTextfieldCppToC::Wrap(_retval);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
panel_get_type_string(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                          ->GetTypeString();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_string_userfree_t HONEYCOMB_CALLBACK panel_to_string(struct _honey_view_t* self,
                                                   int include_children) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                          ->ToString(include_children ? true : false);

  // Return type: string
  return _retval.DetachToUserFree();
}

int HONEYCOMB_CALLBACK panel_is_valid(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_is_attached(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->IsAttached();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_is_same(struct _honey_view_t* self,
                               struct _honey_view_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                     ->IsSame(HoneycombViewCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _honey_view_delegate_t* HONEYCOMB_CALLBACK
panel_get_delegate(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombViewDelegate> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->GetDelegate();

  // Return type: refptr_diff
  return HoneycombViewDelegateCToCpp::Unwrap(_retval);
}

struct _honey_window_t* HONEYCOMB_CALLBACK panel_get_window(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombWindow> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->GetWindow();

  // Return type: refptr_same
  return HoneycombWindowCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK panel_get_id(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->GetID();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK panel_set_id(struct _honey_view_t* self, int id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->SetID(id);
}

int HONEYCOMB_CALLBACK panel_get_group_id(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->GetGroupID();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK panel_set_group_id(struct _honey_view_t* self, int group_id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SetGroupID(group_id);
}

struct _honey_view_t* HONEYCOMB_CALLBACK
panel_get_parent_view(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
          ->GetParentView();

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

struct _honey_view_t* HONEYCOMB_CALLBACK panel_get_view_for_id(struct _honey_view_t* self,
                                                       int id) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombView> _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
          ->GetViewForID(id);

  // Return type: refptr_same
  return HoneycombViewCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK panel_set_bounds(struct _honey_view_t* self,
                                   const honey_rect_t* bounds) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: bounds; type: simple_byref_const
  DCHECK(bounds);
  if (!bounds) {
    return;
  }

  // Translate param: bounds; type: simple_byref_const
  HoneycombRect boundsVal = bounds ? *bounds : HoneycombRect();

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SetBounds(boundsVal);
}

honey_rect_t HONEYCOMB_CALLBACK panel_get_bounds(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->GetBounds();

  // Return type: simple
  return _retval;
}

honey_rect_t HONEYCOMB_CALLBACK panel_get_bounds_in_screen(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                           ->GetBoundsInScreen();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK panel_set_size(struct _honey_view_t* self,
                                 const honey_size_t* size) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: size; type: simple_byref_const
  DCHECK(size);
  if (!size) {
    return;
  }

  // Translate param: size; type: simple_byref_const
  HoneycombSize sizeVal = size ? *size : HoneycombSize();

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->SetSize(sizeVal);
}

honey_size_t HONEYCOMB_CALLBACK panel_get_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->GetSize();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK panel_set_position(struct _honey_view_t* self,
                                     const honey_point_t* position) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: position; type: simple_byref_const
  DCHECK(position);
  if (!position) {
    return;
  }

  // Translate param: position; type: simple_byref_const
  HoneycombPoint positionVal = position ? *position : HoneycombPoint();

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SetPosition(positionVal);
}

honey_point_t HONEYCOMB_CALLBACK panel_get_position(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombPoint();
  }

  // Execute
  honey_point_t _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->GetPosition();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK panel_set_insets(struct _honey_view_t* self,
                                   const honey_insets_t* insets) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: insets; type: simple_byref_const
  DCHECK(insets);
  if (!insets) {
    return;
  }

  // Translate param: insets; type: simple_byref_const
  HoneycombInsets insetsVal = insets ? *insets : HoneycombInsets();

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SetInsets(insetsVal);
}

honey_insets_t HONEYCOMB_CALLBACK panel_get_insets(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombInsets();
  }

  // Execute
  honey_insets_t _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->GetInsets();

  // Return type: simple
  return _retval;
}

honey_size_t HONEYCOMB_CALLBACK panel_get_preferred_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                           ->GetPreferredSize();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK panel_size_to_preferred_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SizeToPreferredSize();
}

honey_size_t HONEYCOMB_CALLBACK panel_get_minimum_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                           ->GetMinimumSize();

  // Return type: simple
  return _retval;
}

honey_size_t HONEYCOMB_CALLBACK panel_get_maximum_size(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombSize();
  }

  // Execute
  honey_size_t _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                           ->GetMaximumSize();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK panel_get_height_for_width(struct _honey_view_t* self,
                                            int width) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                    ->GetHeightForWidth(width);

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK panel_invalidate_layout(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->InvalidateLayout();
}

void HONEYCOMB_CALLBACK panel_set_visible(struct _honey_view_t* self, int visible) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SetVisible(visible ? true : false);
}

int HONEYCOMB_CALLBACK panel_is_visible(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->IsVisible();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_is_drawn(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->IsDrawn();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK panel_set_enabled(struct _honey_view_t* self, int enabled) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SetEnabled(enabled ? true : false);
}

int HONEYCOMB_CALLBACK panel_is_enabled(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->IsEnabled();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK panel_set_focusable(struct _honey_view_t* self, int focusable) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SetFocusable(focusable ? true : false);
}

int HONEYCOMB_CALLBACK panel_is_focusable(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->IsFocusable();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_is_accessibility_focusable(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                     ->IsAccessibilityFocusable();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK panel_request_focus(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))->RequestFocus();
}

void HONEYCOMB_CALLBACK panel_set_background_color(struct _honey_view_t* self,
                                             honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
      ->SetBackgroundColor(color);
}

honey_color_t HONEYCOMB_CALLBACK panel_get_background_color(struct _honey_view_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  honey_color_t _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
          ->GetBackgroundColor();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK panel_convert_point_to_screen(struct _honey_view_t* self,
                                               honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                     ->ConvertPointToScreen(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_convert_point_from_screen(struct _honey_view_t* self,
                                                 honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                     ->ConvertPointFromScreen(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_convert_point_to_window(struct _honey_view_t* self,
                                               honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                     ->ConvertPointToWindow(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_convert_point_from_window(struct _honey_view_t* self,
                                                 honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval = HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
                     ->ConvertPointFromWindow(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_convert_point_to_view(struct _honey_view_t* self,
                                             struct _honey_view_t* view,
                                             honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
          ->ConvertPointToView(HoneycombViewCppToC::Unwrap(view), pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK panel_convert_point_from_view(struct _honey_view_t* self,
                                               struct _honey_view_t* view,
                                               honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: view; type: refptr_same
  DCHECK(view);
  if (!view) {
    return 0;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return 0;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  bool _retval =
      HoneycombPanelCppToC::Get(reinterpret_cast<honey_panel_t*>(self))
          ->ConvertPointFromView(HoneycombViewCppToC::Unwrap(view), pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombPanelCppToC::HoneycombPanelCppToC() {
  GetStruct()->as_window = panel_as_window;
  GetStruct()->set_to_fill_layout = panel_set_to_fill_layout;
  GetStruct()->set_to_box_layout = panel_set_to_box_layout;
  GetStruct()->get_layout = panel_get_layout;
  GetStruct()->layout = panel_layout;
  GetStruct()->add_child_view = panel_add_child_view;
  GetStruct()->add_child_view_at = panel_add_child_view_at;
  GetStruct()->reorder_child_view = panel_reorder_child_view;
  GetStruct()->remove_child_view = panel_remove_child_view;
  GetStruct()->remove_all_child_views = panel_remove_all_child_views;
  GetStruct()->get_child_view_count = panel_get_child_view_count;
  GetStruct()->get_child_view_at = panel_get_child_view_at;
  GetStruct()->base.as_browser_view = panel_as_browser_view;
  GetStruct()->base.as_button = panel_as_button;
  GetStruct()->base.as_panel = panel_as_panel;
  GetStruct()->base.as_scroll_view = panel_as_scroll_view;
  GetStruct()->base.as_textfield = panel_as_textfield;
  GetStruct()->base.get_type_string = panel_get_type_string;
  GetStruct()->base.to_string = panel_to_string;
  GetStruct()->base.is_valid = panel_is_valid;
  GetStruct()->base.is_attached = panel_is_attached;
  GetStruct()->base.is_same = panel_is_same;
  GetStruct()->base.get_delegate = panel_get_delegate;
  GetStruct()->base.get_window = panel_get_window;
  GetStruct()->base.get_id = panel_get_id;
  GetStruct()->base.set_id = panel_set_id;
  GetStruct()->base.get_group_id = panel_get_group_id;
  GetStruct()->base.set_group_id = panel_set_group_id;
  GetStruct()->base.get_parent_view = panel_get_parent_view;
  GetStruct()->base.get_view_for_id = panel_get_view_for_id;
  GetStruct()->base.set_bounds = panel_set_bounds;
  GetStruct()->base.get_bounds = panel_get_bounds;
  GetStruct()->base.get_bounds_in_screen = panel_get_bounds_in_screen;
  GetStruct()->base.set_size = panel_set_size;
  GetStruct()->base.get_size = panel_get_size;
  GetStruct()->base.set_position = panel_set_position;
  GetStruct()->base.get_position = panel_get_position;
  GetStruct()->base.set_insets = panel_set_insets;
  GetStruct()->base.get_insets = panel_get_insets;
  GetStruct()->base.get_preferred_size = panel_get_preferred_size;
  GetStruct()->base.size_to_preferred_size = panel_size_to_preferred_size;
  GetStruct()->base.get_minimum_size = panel_get_minimum_size;
  GetStruct()->base.get_maximum_size = panel_get_maximum_size;
  GetStruct()->base.get_height_for_width = panel_get_height_for_width;
  GetStruct()->base.invalidate_layout = panel_invalidate_layout;
  GetStruct()->base.set_visible = panel_set_visible;
  GetStruct()->base.is_visible = panel_is_visible;
  GetStruct()->base.is_drawn = panel_is_drawn;
  GetStruct()->base.set_enabled = panel_set_enabled;
  GetStruct()->base.is_enabled = panel_is_enabled;
  GetStruct()->base.set_focusable = panel_set_focusable;
  GetStruct()->base.is_focusable = panel_is_focusable;
  GetStruct()->base.is_accessibility_focusable =
      panel_is_accessibility_focusable;
  GetStruct()->base.request_focus = panel_request_focus;
  GetStruct()->base.set_background_color = panel_set_background_color;
  GetStruct()->base.get_background_color = panel_get_background_color;
  GetStruct()->base.convert_point_to_screen = panel_convert_point_to_screen;
  GetStruct()->base.convert_point_from_screen = panel_convert_point_from_screen;
  GetStruct()->base.convert_point_to_window = panel_convert_point_to_window;
  GetStruct()->base.convert_point_from_window = panel_convert_point_from_window;
  GetStruct()->base.convert_point_to_view = panel_convert_point_to_view;
  GetStruct()->base.convert_point_from_view = panel_convert_point_from_view;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombPanelCppToC::~HoneycombPanelCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombPanel>
HoneycombCppToCRefCounted<HoneycombPanelCppToC, HoneycombPanel, honey_panel_t>::UnwrapDerived(
    HoneycombWrapperType type,
    honey_panel_t* s) {
  if (type == WT_WINDOW) {
    return HoneycombWindowCppToC::Unwrap(reinterpret_cast<honey_window_t*>(s));
  }
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCppToCRefCounted<HoneycombPanelCppToC, HoneycombPanel, honey_panel_t>::kWrapperType =
        WT_PANEL;
