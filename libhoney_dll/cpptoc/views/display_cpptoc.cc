// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=bddabd9fc04400c15bd2ea41f2677c110dadb299$
//

#include "libhoney_dll/cpptoc/views/display_cpptoc.h"
#include <algorithm>
#include "libhoney_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_display_t* honey_display_get_primary() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombDisplay> _retval = HoneycombDisplay::GetPrimaryDisplay();

  // Return type: refptr_same
  return HoneycombDisplayCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT honey_display_t* honey_display_get_nearest_point(
    const honey_point_t* point,
    int input_pixel_coords) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: point; type: simple_byref_const
  DCHECK(point);
  if (!point) {
    return NULL;
  }

  // Translate param: point; type: simple_byref_const
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  HoneycombRefPtr<HoneycombDisplay> _retval = HoneycombDisplay::GetDisplayNearestPoint(
      pointVal, input_pixel_coords ? true : false);

  // Return type: refptr_same
  return HoneycombDisplayCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT honey_display_t* honey_display_get_matching_bounds(
    const honey_rect_t* bounds,
    int input_pixel_coords) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: bounds; type: simple_byref_const
  DCHECK(bounds);
  if (!bounds) {
    return NULL;
  }

  // Translate param: bounds; type: simple_byref_const
  HoneycombRect boundsVal = bounds ? *bounds : HoneycombRect();

  // Execute
  HoneycombRefPtr<HoneycombDisplay> _retval = HoneycombDisplay::GetDisplayMatchingBounds(
      boundsVal, input_pixel_coords ? true : false);

  // Return type: refptr_same
  return HoneycombDisplayCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT size_t honey_display_get_count() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = HoneycombDisplay::GetDisplayCount();

  // Return type: simple
  return _retval;
}

HONEYCOMB_EXPORT void honey_display_get_alls(size_t* displaysCount,
                                     honey_display_t** displays) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: displays; type: refptr_vec_same_byref
  DCHECK(displaysCount && (*displaysCount == 0 || displays));
  if (!displaysCount || (*displaysCount > 0 && !displays)) {
    return;
  }

  // Translate param: displays; type: refptr_vec_same_byref
  std::vector<HoneycombRefPtr<HoneycombDisplay>> displaysList;
  if (displaysCount && *displaysCount > 0 && displays) {
    for (size_t i = 0; i < *displaysCount; ++i) {
      displaysList.push_back(HoneycombDisplayCppToC::Unwrap(displays[i]));
    }
  }

  // Execute
  HoneycombDisplay::GetAllDisplays(displaysList);

  // Restore param: displays; type: refptr_vec_same_byref
  if (displaysCount && displays) {
    *displaysCount = std::min(displaysList.size(), *displaysCount);
    if (*displaysCount > 0) {
      for (size_t i = 0; i < *displaysCount; ++i) {
        displays[i] = HoneycombDisplayCppToC::Wrap(displaysList[i]);
      }
    }
  }
}

HONEYCOMB_EXPORT honey_point_t
honey_display_convert_screen_point_to_pixels(const honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: point; type: simple_byref_const
  DCHECK(point);
  if (!point) {
    return HoneycombPoint();
  }

  // Translate param: point; type: simple_byref_const
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  honey_point_t _retval = HoneycombDisplay::ConvertScreenPointToPixels(pointVal);

  // Return type: simple
  return _retval;
}

HONEYCOMB_EXPORT honey_point_t
honey_display_convert_screen_point_from_pixels(const honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: point; type: simple_byref_const
  DCHECK(point);
  if (!point) {
    return HoneycombPoint();
  }

  // Translate param: point; type: simple_byref_const
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  honey_point_t _retval = HoneycombDisplay::ConvertScreenPointFromPixels(pointVal);

  // Return type: simple
  return _retval;
}

HONEYCOMB_EXPORT honey_rect_t
honey_display_convert_screen_rect_to_pixels(const honey_rect_t* rect) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: rect; type: simple_byref_const
  DCHECK(rect);
  if (!rect) {
    return HoneycombRect();
  }

  // Translate param: rect; type: simple_byref_const
  HoneycombRect rectVal = rect ? *rect : HoneycombRect();

  // Execute
  honey_rect_t _retval = HoneycombDisplay::ConvertScreenRectToPixels(rectVal);

  // Return type: simple
  return _retval;
}

HONEYCOMB_EXPORT honey_rect_t
honey_display_convert_screen_rect_from_pixels(const honey_rect_t* rect) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: rect; type: simple_byref_const
  DCHECK(rect);
  if (!rect) {
    return HoneycombRect();
  }

  // Translate param: rect; type: simple_byref_const
  HoneycombRect rectVal = rect ? *rect : HoneycombRect();

  // Execute
  honey_rect_t _retval = HoneycombDisplay::ConvertScreenRectFromPixels(rectVal);

  // Return type: simple
  return _retval;
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int64_t HONEYCOMB_CALLBACK display_get_id(struct _honey_display_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int64_t _retval = HoneycombDisplayCppToC::Get(self)->GetID();

  // Return type: simple
  return _retval;
}

float HONEYCOMB_CALLBACK
display_get_device_scale_factor(struct _honey_display_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  float _retval = HoneycombDisplayCppToC::Get(self)->GetDeviceScaleFactor();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK display_convert_point_to_pixels(struct _honey_display_t* self,
                                                  honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  HoneycombDisplayCppToC::Get(self)->ConvertPointToPixels(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }
}

void HONEYCOMB_CALLBACK display_convert_point_from_pixels(struct _honey_display_t* self,
                                                    honey_point_t* point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: point; type: simple_byref
  DCHECK(point);
  if (!point) {
    return;
  }

  // Translate param: point; type: simple_byref
  HoneycombPoint pointVal = point ? *point : HoneycombPoint();

  // Execute
  HoneycombDisplayCppToC::Get(self)->ConvertPointFromPixels(pointVal);

  // Restore param: point; type: simple_byref
  if (point) {
    *point = pointVal;
  }
}

honey_rect_t HONEYCOMB_CALLBACK display_get_bounds(struct _honey_display_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval = HoneycombDisplayCppToC::Get(self)->GetBounds();

  // Return type: simple
  return _retval;
}

honey_rect_t HONEYCOMB_CALLBACK display_get_work_area(struct _honey_display_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HoneycombRect();
  }

  // Execute
  honey_rect_t _retval = HoneycombDisplayCppToC::Get(self)->GetWorkArea();

  // Return type: simple
  return _retval;
}

int HONEYCOMB_CALLBACK display_get_rotation(struct _honey_display_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombDisplayCppToC::Get(self)->GetRotation();

  // Return type: simple
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombDisplayCppToC::HoneycombDisplayCppToC() {
  GetStruct()->get_id = display_get_id;
  GetStruct()->get_device_scale_factor = display_get_device_scale_factor;
  GetStruct()->convert_point_to_pixels = display_convert_point_to_pixels;
  GetStruct()->convert_point_from_pixels = display_convert_point_from_pixels;
  GetStruct()->get_bounds = display_get_bounds;
  GetStruct()->get_work_area = display_get_work_area;
  GetStruct()->get_rotation = display_get_rotation;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombDisplayCppToC::~HoneycombDisplayCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombDisplay>
HoneycombCppToCRefCounted<HoneycombDisplayCppToC, HoneycombDisplay, honey_display_t>::UnwrapDerived(
    HoneycombWrapperType type,
    honey_display_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombDisplayCppToC,
                                   HoneycombDisplay,
                                   honey_display_t>::kWrapperType = WT_DISPLAY;
