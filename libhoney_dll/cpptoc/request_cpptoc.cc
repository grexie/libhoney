// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=665dc752dccd84d278f794b5c6c76093f285112c$
//

#include "libhoney_dll/cpptoc/request_cpptoc.h"
#include "libhoney_dll/cpptoc/post_data_cpptoc.h"
#include "libhoney_dll/transfer_util.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_request_t* honey_request_create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombRequest> _retval = HoneycombRequest::Create();

  // Return type: refptr_same
  return HoneycombRequestCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK request_is_read_only(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombRequestCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

honey_string_userfree_t HONEYCOMB_CALLBACK
request_get_url(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombRequestCppToC::Get(self)->GetURL();

  // Return type: string
  return _retval.DetachToUserFree();
}

void HONEYCOMB_CALLBACK request_set_url(struct _honey_request_t* self,
                                  const honey_string_t* url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: url; type: string_byref_const
  DCHECK(url);
  if (!url) {
    return;
  }

  // Execute
  HoneycombRequestCppToC::Get(self)->SetURL(HoneycombString(url));
}

honey_string_userfree_t HONEYCOMB_CALLBACK
request_get_method(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombRequestCppToC::Get(self)->GetMethod();

  // Return type: string
  return _retval.DetachToUserFree();
}

void HONEYCOMB_CALLBACK request_set_method(struct _honey_request_t* self,
                                     const honey_string_t* method) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: method; type: string_byref_const
  DCHECK(method);
  if (!method) {
    return;
  }

  // Execute
  HoneycombRequestCppToC::Get(self)->SetMethod(HoneycombString(method));
}

void HONEYCOMB_CALLBACK request_set_referrer(struct _honey_request_t* self,
                                       const honey_string_t* referrer_url,
                                       honey_referrer_policy_t policy) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: referrer_url

  // Execute
  HoneycombRequestCppToC::Get(self)->SetReferrer(HoneycombString(referrer_url), policy);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
request_get_referrer_url(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombRequestCppToC::Get(self)->GetReferrerURL();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_referrer_policy_t HONEYCOMB_CALLBACK
request_get_referrer_policy(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return REFERRER_POLICY_DEFAULT;
  }

  // Execute
  honey_referrer_policy_t _retval =
      HoneycombRequestCppToC::Get(self)->GetReferrerPolicy();

  // Return type: simple
  return _retval;
}

struct _honey_post_data_t* HONEYCOMB_CALLBACK
request_get_post_data(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombPostData> _retval = HoneycombRequestCppToC::Get(self)->GetPostData();

  // Return type: refptr_same
  return HoneycombPostDataCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK request_set_post_data(struct _honey_request_t* self,
                                        struct _honey_post_data_t* postData) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: postData; type: refptr_same
  DCHECK(postData);
  if (!postData) {
    return;
  }

  // Execute
  HoneycombRequestCppToC::Get(self)->SetPostData(HoneycombPostDataCppToC::Unwrap(postData));
}

void HONEYCOMB_CALLBACK request_get_header_map(struct _honey_request_t* self,
                                         honey_string_multimap_t headerMap) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: headerMap; type: string_map_multi_byref
  DCHECK(headerMap);
  if (!headerMap) {
    return;
  }

  // Translate param: headerMap; type: string_map_multi_byref
  std::multimap<HoneycombString, HoneycombString> headerMapMultimap;
  transfer_string_multimap_contents(headerMap, headerMapMultimap);

  // Execute
  HoneycombRequestCppToC::Get(self)->GetHeaderMap(headerMapMultimap);

  // Restore param: headerMap; type: string_map_multi_byref
  honey_string_multimap_clear(headerMap);
  transfer_string_multimap_contents(headerMapMultimap, headerMap);
}

void HONEYCOMB_CALLBACK request_set_header_map(struct _honey_request_t* self,
                                         honey_string_multimap_t headerMap) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: headerMap; type: string_map_multi_byref_const
  DCHECK(headerMap);
  if (!headerMap) {
    return;
  }

  // Translate param: headerMap; type: string_map_multi_byref_const
  std::multimap<HoneycombString, HoneycombString> headerMapMultimap;
  transfer_string_multimap_contents(headerMap, headerMapMultimap);

  // Execute
  HoneycombRequestCppToC::Get(self)->SetHeaderMap(headerMapMultimap);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
request_get_header_by_name(struct _honey_request_t* self,
                           const honey_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return NULL;
  }

  // Execute
  HoneycombString _retval =
      HoneycombRequestCppToC::Get(self)->GetHeaderByName(HoneycombString(name));

  // Return type: string
  return _retval.DetachToUserFree();
}

void HONEYCOMB_CALLBACK request_set_header_by_name(struct _honey_request_t* self,
                                             const honey_string_t* name,
                                             const honey_string_t* value,
                                             int overwrite) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return;
  }
  // Unverified params: value

  // Execute
  HoneycombRequestCppToC::Get(self)->SetHeaderByName(
      HoneycombString(name), HoneycombString(value), overwrite ? true : false);
}

void HONEYCOMB_CALLBACK request_set(struct _honey_request_t* self,
                              const honey_string_t* url,
                              const honey_string_t* method,
                              struct _honey_post_data_t* postData,
                              honey_string_multimap_t headerMap) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: url; type: string_byref_const
  DCHECK(url);
  if (!url) {
    return;
  }
  // Verify param: method; type: string_byref_const
  DCHECK(method);
  if (!method) {
    return;
  }
  // Verify param: headerMap; type: string_map_multi_byref_const
  DCHECK(headerMap);
  if (!headerMap) {
    return;
  }
  // Unverified params: postData

  // Translate param: headerMap; type: string_map_multi_byref_const
  std::multimap<HoneycombString, HoneycombString> headerMapMultimap;
  transfer_string_multimap_contents(headerMap, headerMapMultimap);

  // Execute
  HoneycombRequestCppToC::Get(self)->Set(HoneycombString(url), HoneycombString(method),
                                   HoneycombPostDataCppToC::Unwrap(postData),
                                   headerMapMultimap);
}

int HONEYCOMB_CALLBACK request_get_flags(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return UR_FLAG_NONE;
  }

  // Execute
  int _retval = HoneycombRequestCppToC::Get(self)->GetFlags();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK request_set_flags(struct _honey_request_t* self, int flags) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombRequestCppToC::Get(self)->SetFlags(flags);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
request_get_first_party_for_cookies(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombRequestCppToC::Get(self)->GetFirstPartyForCookies();

  // Return type: string
  return _retval.DetachToUserFree();
}

void HONEYCOMB_CALLBACK
request_set_first_party_for_cookies(struct _honey_request_t* self,
                                    const honey_string_t* url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: url

  // Execute
  HoneycombRequestCppToC::Get(self)->SetFirstPartyForCookies(HoneycombString(url));
}

honey_resource_type_t HONEYCOMB_CALLBACK
request_get_resource_type(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return RT_SUB_RESOURCE;
  }

  // Execute
  honey_resource_type_t _retval = HoneycombRequestCppToC::Get(self)->GetResourceType();

  // Return type: simple
  return _retval;
}

honey_transition_type_t HONEYCOMB_CALLBACK
request_get_transition_type(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return TT_EXPLICIT;
  }

  // Execute
  honey_transition_type_t _retval =
      HoneycombRequestCppToC::Get(self)->GetTransitionType();

  // Return type: simple
  return _retval;
}

uint64_t HONEYCOMB_CALLBACK request_get_identifier(struct _honey_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  uint64_t _retval = HoneycombRequestCppToC::Get(self)->GetIdentifier();

  // Return type: simple
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombRequestCppToC::HoneycombRequestCppToC() {
  GetStruct()->is_read_only = request_is_read_only;
  GetStruct()->get_url = request_get_url;
  GetStruct()->set_url = request_set_url;
  GetStruct()->get_method = request_get_method;
  GetStruct()->set_method = request_set_method;
  GetStruct()->set_referrer = request_set_referrer;
  GetStruct()->get_referrer_url = request_get_referrer_url;
  GetStruct()->get_referrer_policy = request_get_referrer_policy;
  GetStruct()->get_post_data = request_get_post_data;
  GetStruct()->set_post_data = request_set_post_data;
  GetStruct()->get_header_map = request_get_header_map;
  GetStruct()->set_header_map = request_set_header_map;
  GetStruct()->get_header_by_name = request_get_header_by_name;
  GetStruct()->set_header_by_name = request_set_header_by_name;
  GetStruct()->set = request_set;
  GetStruct()->get_flags = request_get_flags;
  GetStruct()->set_flags = request_set_flags;
  GetStruct()->get_first_party_for_cookies =
      request_get_first_party_for_cookies;
  GetStruct()->set_first_party_for_cookies =
      request_set_first_party_for_cookies;
  GetStruct()->get_resource_type = request_get_resource_type;
  GetStruct()->get_transition_type = request_get_transition_type;
  GetStruct()->get_identifier = request_get_identifier;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombRequestCppToC::~HoneycombRequestCppToC() {}

template <>
HoneycombRefPtr<HoneycombRequest>
HoneycombCppToCRefCounted<HoneycombRequestCppToC, HoneycombRequest, honey_request_t>::UnwrapDerived(
    HoneycombWrapperType type,
    honey_request_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombRequestCppToC,
                                   HoneycombRequest,
                                   honey_request_t>::kWrapperType = WT_REQUEST;
