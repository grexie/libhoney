// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4208fa6b25929be4a48ba1beefc454a08fc22759$
//

#include "libhoney_dll/cpptoc/test/translator_test_scoped_library_child_child_cpptoc.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_translator_test_scoped_library_child_child_t*
honey_translator_test_scoped_library_child_child_create(int value,
                                                      int other_value,
                                                      int other_other_value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombOwnPtr<HoneycombTranslatorTestScopedLibraryChildChild> _retval =
      HoneycombTranslatorTestScopedLibraryChildChild::Create(value, other_value,
                                                       other_other_value);

  // Return type: ownptr_same
  return HoneycombTranslatorTestScopedLibraryChildChildCppToC::WrapOwn(
      std::move(_retval));
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK
translator_test_scoped_library_child_child_get_other_other_value(
    struct _honey_translator_test_scoped_library_child_child_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombTranslatorTestScopedLibraryChildChildCppToC::Get(self)
                    ->GetOtherOtherValue();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
translator_test_scoped_library_child_child_set_other_other_value(
    struct _honey_translator_test_scoped_library_child_child_t* self,
    int value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombTranslatorTestScopedLibraryChildChildCppToC::Get(self)->SetOtherOtherValue(
      value);
}

int HONEYCOMB_CALLBACK translator_test_scoped_library_child_child_get_other_value(
    struct _honey_translator_test_scoped_library_child_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombTranslatorTestScopedLibraryChildChildCppToC::Get(
          reinterpret_cast<honey_translator_test_scoped_library_child_child_t*>(
              self))
          ->GetOtherValue();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK translator_test_scoped_library_child_child_set_other_value(
    struct _honey_translator_test_scoped_library_child_t* self,
    int value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombTranslatorTestScopedLibraryChildChildCppToC::Get(
      reinterpret_cast<honey_translator_test_scoped_library_child_child_t*>(self))
      ->SetOtherValue(value);
}

int HONEYCOMB_CALLBACK translator_test_scoped_library_child_child_get_value(
    struct _honey_translator_test_scoped_library_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval =
      HoneycombTranslatorTestScopedLibraryChildChildCppToC::Get(
          reinterpret_cast<honey_translator_test_scoped_library_child_child_t*>(
              self))
          ->GetValue();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK translator_test_scoped_library_child_child_set_value(
    struct _honey_translator_test_scoped_library_t* self,
    int value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombTranslatorTestScopedLibraryChildChildCppToC::Get(
      reinterpret_cast<honey_translator_test_scoped_library_child_child_t*>(self))
      ->SetValue(value);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombTranslatorTestScopedLibraryChildChildCppToC::
    HoneycombTranslatorTestScopedLibraryChildChildCppToC() {
  GetStruct()->get_other_other_value =
      translator_test_scoped_library_child_child_get_other_other_value;
  GetStruct()->set_other_other_value =
      translator_test_scoped_library_child_child_set_other_other_value;
  GetStruct()->base.get_other_value =
      translator_test_scoped_library_child_child_get_other_value;
  GetStruct()->base.set_other_value =
      translator_test_scoped_library_child_child_set_other_value;
  GetStruct()->base.base.get_value =
      translator_test_scoped_library_child_child_get_value;
  GetStruct()->base.base.set_value =
      translator_test_scoped_library_child_child_set_value;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombTranslatorTestScopedLibraryChildChildCppToC::
    ~HoneycombTranslatorTestScopedLibraryChildChildCppToC() {}

template <>
HoneycombOwnPtr<HoneycombTranslatorTestScopedLibraryChildChild>
HoneycombCppToCScoped<HoneycombTranslatorTestScopedLibraryChildChildCppToC,
                HoneycombTranslatorTestScopedLibraryChildChild,
                honey_translator_test_scoped_library_child_child_t>::
    UnwrapDerivedOwn(HoneycombWrapperType type,
                     honey_translator_test_scoped_library_child_child_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return HoneycombOwnPtr<HoneycombTranslatorTestScopedLibraryChildChild>();
}

template <>
HoneycombRawPtr<HoneycombTranslatorTestScopedLibraryChildChild>
HoneycombCppToCScoped<HoneycombTranslatorTestScopedLibraryChildChildCppToC,
                HoneycombTranslatorTestScopedLibraryChildChild,
                honey_translator_test_scoped_library_child_child_t>::
    UnwrapDerivedRaw(HoneycombWrapperType type,
                     honey_translator_test_scoped_library_child_child_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCScoped<
    HoneycombTranslatorTestScopedLibraryChildChildCppToC,
    HoneycombTranslatorTestScopedLibraryChildChild,
    honey_translator_test_scoped_library_child_child_t>::kWrapperType =
    WT_TRANSLATOR_TEST_SCOPED_LIBRARY_CHILD_CHILD;
