// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=bd4999e5bbad96be1e3897cfe9dc59bb1c186fba$
//

#include "libhoney_dll/cpptoc/test/test_server_cpptoc.h"
#include "libhoney_dll/ctocpp/test/test_server_handler_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_test_server_t* honey_test_server_create_and_start(
    uint16_t port,
    int https_server,
    honey_test_cert_type_t https_cert_type,
    struct _honey_test_server_handler_t* handler) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: handler; type: refptr_diff
  DCHECK(handler);
  if (!handler) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombTestServer> _retval = HoneycombTestServer::CreateAndStart(
      port, https_server ? true : false, https_cert_type,
      HoneycombTestServerHandlerCToCpp::Wrap(handler));

  // Return type: refptr_same
  return HoneycombTestServerCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK test_server_stop(struct _honey_test_server_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombTestServerCppToC::Get(self)->Stop();
}

honey_string_userfree_t HONEYCOMB_CALLBACK
test_server_get_origin(struct _honey_test_server_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombTestServerCppToC::Get(self)->GetOrigin();

  // Return type: string
  return _retval.DetachToUserFree();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombTestServerCppToC::HoneycombTestServerCppToC() {
  GetStruct()->stop = test_server_stop;
  GetStruct()->get_origin = test_server_get_origin;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombTestServerCppToC::~HoneycombTestServerCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombTestServer>
HoneycombCppToCRefCounted<HoneycombTestServerCppToC, HoneycombTestServer, honey_test_server_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_test_server_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombTestServerCppToC,
                                   HoneycombTestServer,
                                   honey_test_server_t>::kWrapperType =
    WT_TEST_SERVER;
