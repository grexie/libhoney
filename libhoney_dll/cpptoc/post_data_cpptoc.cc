// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=1c9f3d740266fe84bfa1d6105eaffaf2866a8876$
//

#include "libhoney_dll/cpptoc/post_data_cpptoc.h"
#include <algorithm>
#include "libhoney_dll/cpptoc/post_data_element_cpptoc.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_post_data_t* honey_post_data_create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombPostData> _retval = HoneycombPostData::Create();

  // Return type: refptr_same
  return HoneycombPostDataCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK post_data_is_read_only(struct _honey_post_data_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPostDataCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
post_data_has_excluded_elements(struct _honey_post_data_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPostDataCppToC::Get(self)->HasExcludedElements();

  // Return type: bool
  return _retval;
}

size_t HONEYCOMB_CALLBACK post_data_get_element_count(struct _honey_post_data_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  size_t _retval = HoneycombPostDataCppToC::Get(self)->GetElementCount();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
post_data_get_elements(struct _honey_post_data_t* self,
                       size_t* elementsCount,
                       struct _honey_post_data_element_t** elements) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: elements; type: refptr_vec_same_byref
  DCHECK(elementsCount && (*elementsCount == 0 || elements));
  if (!elementsCount || (*elementsCount > 0 && !elements)) {
    return;
  }

  // Translate param: elements; type: refptr_vec_same_byref
  std::vector<HoneycombRefPtr<HoneycombPostDataElement>> elementsList;
  if (elementsCount && *elementsCount > 0 && elements) {
    for (size_t i = 0; i < *elementsCount; ++i) {
      elementsList.push_back(HoneycombPostDataElementCppToC::Unwrap(elements[i]));
    }
  }

  // Execute
  HoneycombPostDataCppToC::Get(self)->GetElements(elementsList);

  // Restore param: elements; type: refptr_vec_same_byref
  if (elementsCount && elements) {
    *elementsCount = std::min(elementsList.size(), *elementsCount);
    if (*elementsCount > 0) {
      for (size_t i = 0; i < *elementsCount; ++i) {
        elements[i] = HoneycombPostDataElementCppToC::Wrap(elementsList[i]);
      }
    }
  }
}

int HONEYCOMB_CALLBACK
post_data_remove_element(struct _honey_post_data_t* self,
                         struct _honey_post_data_element_t* element) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: element; type: refptr_same
  DCHECK(element);
  if (!element) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPostDataCppToC::Get(self)->RemoveElement(
      HoneycombPostDataElementCppToC::Unwrap(element));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
post_data_add_element(struct _honey_post_data_t* self,
                      struct _honey_post_data_element_t* element) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: element; type: refptr_same
  DCHECK(element);
  if (!element) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPostDataCppToC::Get(self)->AddElement(
      HoneycombPostDataElementCppToC::Unwrap(element));

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK post_data_remove_elements(struct _honey_post_data_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPostDataCppToC::Get(self)->RemoveElements();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombPostDataCppToC::HoneycombPostDataCppToC() {
  GetStruct()->is_read_only = post_data_is_read_only;
  GetStruct()->has_excluded_elements = post_data_has_excluded_elements;
  GetStruct()->get_element_count = post_data_get_element_count;
  GetStruct()->get_elements = post_data_get_elements;
  GetStruct()->remove_element = post_data_remove_element;
  GetStruct()->add_element = post_data_add_element;
  GetStruct()->remove_elements = post_data_remove_elements;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombPostDataCppToC::~HoneycombPostDataCppToC() {}

template <>
HoneycombRefPtr<HoneycombPostData>
HoneycombCppToCRefCounted<HoneycombPostDataCppToC, HoneycombPostData, honey_post_data_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_post_data_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombPostDataCppToC,
                                   HoneycombPostData,
                                   honey_post_data_t>::kWrapperType =
    WT_POST_DATA;
