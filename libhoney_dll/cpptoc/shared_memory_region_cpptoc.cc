// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=3bc6db85e54dc87c1e592291be01820547e0989f$
//

#include "libhoney_dll/cpptoc/shared_memory_region_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK
shared_memory_region_is_valid(struct _honey_shared_memory_region_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombSharedMemoryRegionCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

size_t HONEYCOMB_CALLBACK
shared_memory_region_size(struct _honey_shared_memory_region_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  size_t _retval = HoneycombSharedMemoryRegionCppToC::Get(self)->Size();

  // Return type: simple
  return _retval;
}

void* HONEYCOMB_CALLBACK
shared_memory_region_memory(struct _honey_shared_memory_region_t* self) {
  shutdown_checker::AssertNotShutdown();

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  void* _retval = HoneycombSharedMemoryRegionCppToC::Get(self)->Memory();

  // Return type: simple_byaddr
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombSharedMemoryRegionCppToC::HoneycombSharedMemoryRegionCppToC() {
  GetStruct()->is_valid = shared_memory_region_is_valid;
  GetStruct()->size = shared_memory_region_size;
  GetStruct()->memory = shared_memory_region_memory;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombSharedMemoryRegionCppToC::~HoneycombSharedMemoryRegionCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombSharedMemoryRegion> HoneycombCppToCRefCounted<
    HoneycombSharedMemoryRegionCppToC,
    HoneycombSharedMemoryRegion,
    honey_shared_memory_region_t>::UnwrapDerived(HoneycombWrapperType type,
                                               honey_shared_memory_region_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombSharedMemoryRegionCppToC,
                                   HoneycombSharedMemoryRegion,
                                   honey_shared_memory_region_t>::kWrapperType =
    WT_SHARED_MEMORY_REGION;
