// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8f43b6d00d772cb989a29bba70187f9df04ab0bf$
//

#include "libhoney_dll/cpptoc/print_settings_cpptoc.h"
#include <algorithm>
#include "libhoney_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_print_settings_t* honey_print_settings_create() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombPrintSettings> _retval = HoneycombPrintSettings::Create();

  // Return type: refptr_same
  return HoneycombPrintSettingsCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK print_settings_is_valid(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPrintSettingsCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
print_settings_is_read_only(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPrintSettingsCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK
print_settings_set_orientation(struct _honey_print_settings_t* self,
                               int landscape) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetOrientation(landscape ? true : false);
}

int HONEYCOMB_CALLBACK
print_settings_is_landscape(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPrintSettingsCppToC::Get(self)->IsLandscape();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK print_settings_set_printer_printable_area(
    struct _honey_print_settings_t* self,
    const honey_size_t* physical_size_device_units,
    const honey_rect_t* printable_area_device_units,
    int landscape_needs_flip) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: physical_size_device_units; type: simple_byref_const
  DCHECK(physical_size_device_units);
  if (!physical_size_device_units) {
    return;
  }
  // Verify param: printable_area_device_units; type: simple_byref_const
  DCHECK(printable_area_device_units);
  if (!printable_area_device_units) {
    return;
  }

  // Translate param: physical_size_device_units; type: simple_byref_const
  HoneycombSize physical_size_device_unitsVal =
      physical_size_device_units ? *physical_size_device_units : HoneycombSize();
  // Translate param: printable_area_device_units; type: simple_byref_const
  HoneycombRect printable_area_device_unitsVal =
      printable_area_device_units ? *printable_area_device_units : HoneycombRect();

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetPrinterPrintableArea(
      physical_size_device_unitsVal, printable_area_device_unitsVal,
      landscape_needs_flip ? true : false);
}

void HONEYCOMB_CALLBACK
print_settings_set_device_name(struct _honey_print_settings_t* self,
                               const honey_string_t* name) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: name

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetDeviceName(HoneycombString(name));
}

honey_string_userfree_t HONEYCOMB_CALLBACK
print_settings_get_device_name(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombPrintSettingsCppToC::Get(self)->GetDeviceName();

  // Return type: string
  return _retval.DetachToUserFree();
}

void HONEYCOMB_CALLBACK print_settings_set_dpi(struct _honey_print_settings_t* self,
                                         int dpi) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetDPI(dpi);
}

int HONEYCOMB_CALLBACK print_settings_get_dpi(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombPrintSettingsCppToC::Get(self)->GetDPI();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
print_settings_set_page_ranges(struct _honey_print_settings_t* self,
                               size_t rangesCount,
                               honey_range_t const* ranges) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: ranges; type: simple_vec_byref_const
  DCHECK(rangesCount == 0 || ranges);
  if (rangesCount > 0 && !ranges) {
    return;
  }

  // Translate param: ranges; type: simple_vec_byref_const
  std::vector<HoneycombRange> rangesList;
  if (rangesCount > 0) {
    for (size_t i = 0; i < rangesCount; ++i) {
      HoneycombRange rangesVal = ranges[i];
      rangesList.push_back(rangesVal);
    }
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetPageRanges(rangesList);
}

size_t HONEYCOMB_CALLBACK
print_settings_get_page_ranges_count(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  size_t _retval = HoneycombPrintSettingsCppToC::Get(self)->GetPageRangesCount();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
print_settings_get_page_ranges(struct _honey_print_settings_t* self,
                               size_t* rangesCount,
                               honey_range_t* ranges) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: ranges; type: simple_vec_byref
  DCHECK(rangesCount && (*rangesCount == 0 || ranges));
  if (!rangesCount || (*rangesCount > 0 && !ranges)) {
    return;
  }

  // Translate param: ranges; type: simple_vec_byref
  std::vector<HoneycombRange> rangesList;
  if (rangesCount && *rangesCount > 0 && ranges) {
    for (size_t i = 0; i < *rangesCount; ++i) {
      rangesList.push_back(ranges[i]);
    }
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->GetPageRanges(rangesList);

  // Restore param: ranges; type: simple_vec_byref
  if (rangesCount && ranges) {
    *rangesCount = std::min(rangesList.size(), *rangesCount);
    if (*rangesCount > 0) {
      for (size_t i = 0; i < *rangesCount; ++i) {
        ranges[i] = rangesList[i];
      }
    }
  }
}

void HONEYCOMB_CALLBACK
print_settings_set_selection_only(struct _honey_print_settings_t* self,
                                  int selection_only) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetSelectionOnly(selection_only ? true
                                                                     : false);
}

int HONEYCOMB_CALLBACK
print_settings_is_selection_only(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPrintSettingsCppToC::Get(self)->IsSelectionOnly();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK print_settings_set_collate(struct _honey_print_settings_t* self,
                                             int collate) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetCollate(collate ? true : false);
}

int HONEYCOMB_CALLBACK
print_settings_will_collate(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombPrintSettingsCppToC::Get(self)->WillCollate();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK
print_settings_set_color_model(struct _honey_print_settings_t* self,
                               honey_color_model_t model) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetColorModel(model);
}

honey_color_model_t HONEYCOMB_CALLBACK
print_settings_get_color_model(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return COLOR_MODEL_UNKNOWN;
  }

  // Execute
  honey_color_model_t _retval =
      HoneycombPrintSettingsCppToC::Get(self)->GetColorModel();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK print_settings_set_copies(struct _honey_print_settings_t* self,
                                            int copies) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetCopies(copies);
}

int HONEYCOMB_CALLBACK print_settings_get_copies(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  int _retval = HoneycombPrintSettingsCppToC::Get(self)->GetCopies();

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
print_settings_set_duplex_mode(struct _honey_print_settings_t* self,
                               honey_duplex_mode_t mode) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombPrintSettingsCppToC::Get(self)->SetDuplexMode(mode);
}

honey_duplex_mode_t HONEYCOMB_CALLBACK
print_settings_get_duplex_mode(struct _honey_print_settings_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return DUPLEX_MODE_UNKNOWN;
  }

  // Execute
  honey_duplex_mode_t _retval =
      HoneycombPrintSettingsCppToC::Get(self)->GetDuplexMode();

  // Return type: simple
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombPrintSettingsCppToC::HoneycombPrintSettingsCppToC() {
  GetStruct()->is_valid = print_settings_is_valid;
  GetStruct()->is_read_only = print_settings_is_read_only;
  GetStruct()->set_orientation = print_settings_set_orientation;
  GetStruct()->is_landscape = print_settings_is_landscape;
  GetStruct()->set_printer_printable_area =
      print_settings_set_printer_printable_area;
  GetStruct()->set_device_name = print_settings_set_device_name;
  GetStruct()->get_device_name = print_settings_get_device_name;
  GetStruct()->set_dpi = print_settings_set_dpi;
  GetStruct()->get_dpi = print_settings_get_dpi;
  GetStruct()->set_page_ranges = print_settings_set_page_ranges;
  GetStruct()->get_page_ranges_count = print_settings_get_page_ranges_count;
  GetStruct()->get_page_ranges = print_settings_get_page_ranges;
  GetStruct()->set_selection_only = print_settings_set_selection_only;
  GetStruct()->is_selection_only = print_settings_is_selection_only;
  GetStruct()->set_collate = print_settings_set_collate;
  GetStruct()->will_collate = print_settings_will_collate;
  GetStruct()->set_color_model = print_settings_set_color_model;
  GetStruct()->get_color_model = print_settings_get_color_model;
  GetStruct()->set_copies = print_settings_set_copies;
  GetStruct()->get_copies = print_settings_get_copies;
  GetStruct()->set_duplex_mode = print_settings_set_duplex_mode;
  GetStruct()->get_duplex_mode = print_settings_get_duplex_mode;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombPrintSettingsCppToC::~HoneycombPrintSettingsCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombPrintSettings> HoneycombCppToCRefCounted<
    HoneycombPrintSettingsCppToC,
    HoneycombPrintSettings,
    honey_print_settings_t>::UnwrapDerived(HoneycombWrapperType type,
                                         honey_print_settings_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombPrintSettingsCppToC,
                                   HoneycombPrintSettings,
                                   honey_print_settings_t>::kWrapperType =
    WT_PRINT_SETTINGS;
