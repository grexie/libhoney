// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f422c73d022a8794c0cbb01f4bb3fbb2a3f7e045$
//

#include "libhoney_dll/cpptoc/process_message_cpptoc.h"
#include "libhoney_dll/cpptoc/list_value_cpptoc.h"
#include "libhoney_dll/cpptoc/shared_memory_region_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_process_message_t* honey_process_message_create(
    const honey_string_t* name) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombProcessMessage> _retval =
      HoneycombProcessMessage::Create(HoneycombString(name));

  // Return type: refptr_same
  return HoneycombProcessMessageCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK process_message_is_valid(struct _honey_process_message_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombProcessMessageCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
process_message_is_read_only(struct _honey_process_message_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombProcessMessageCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

struct _honey_process_message_t* HONEYCOMB_CALLBACK
process_message_copy(struct _honey_process_message_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombProcessMessage> _retval =
      HoneycombProcessMessageCppToC::Get(self)->Copy();

  // Return type: refptr_same
  return HoneycombProcessMessageCppToC::Wrap(_retval);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
process_message_get_name(struct _honey_process_message_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombProcessMessageCppToC::Get(self)->GetName();

  // Return type: string
  return _retval.DetachToUserFree();
}

struct _honey_list_value_t* HONEYCOMB_CALLBACK
process_message_get_argument_list(struct _honey_process_message_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombListValue> _retval =
      HoneycombProcessMessageCppToC::Get(self)->GetArgumentList();

  // Return type: refptr_same
  return HoneycombListValueCppToC::Wrap(_retval);
}

struct _honey_shared_memory_region_t* HONEYCOMB_CALLBACK
process_message_get_shared_memory_region(struct _honey_process_message_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombSharedMemoryRegion> _retval =
      HoneycombProcessMessageCppToC::Get(self)->GetSharedMemoryRegion();

  // Return type: refptr_same
  return HoneycombSharedMemoryRegionCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombProcessMessageCppToC::HoneycombProcessMessageCppToC() {
  GetStruct()->is_valid = process_message_is_valid;
  GetStruct()->is_read_only = process_message_is_read_only;
  GetStruct()->copy = process_message_copy;
  GetStruct()->get_name = process_message_get_name;
  GetStruct()->get_argument_list = process_message_get_argument_list;
  GetStruct()->get_shared_memory_region =
      process_message_get_shared_memory_region;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombProcessMessageCppToC::~HoneycombProcessMessageCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombProcessMessage> HoneycombCppToCRefCounted<
    HoneycombProcessMessageCppToC,
    HoneycombProcessMessage,
    honey_process_message_t>::UnwrapDerived(HoneycombWrapperType type,
                                          honey_process_message_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombProcessMessageCppToC,
                                   HoneycombProcessMessage,
                                   honey_process_message_t>::kWrapperType =
    WT_PROCESS_MESSAGE;
