// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=19ec3227b1676b8a359d6ea1264dea80ed717049$
//

#include "libhoney_dll/cpptoc/request_context_cpptoc.h"
#include "libhoney_dll/cpptoc/cookie_manager_cpptoc.h"
#include "libhoney_dll/cpptoc/dictionary_value_cpptoc.h"
#include "libhoney_dll/cpptoc/extension_cpptoc.h"
#include "libhoney_dll/cpptoc/media_router_cpptoc.h"
#include "libhoney_dll/cpptoc/value_cpptoc.h"
#include "libhoney_dll/ctocpp/completion_callback_ctocpp.h"
#include "libhoney_dll/ctocpp/extension_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/request_context_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/resolve_callback_ctocpp.h"
#include "libhoney_dll/ctocpp/scheme_handler_factory_ctocpp.h"
#include "libhoney_dll/template_util.h"
#include "libhoney_dll/transfer_util.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_request_context_t* honey_request_context_get_global_context() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  HoneycombRefPtr<HoneycombRequestContext> _retval = HoneycombRequestContext::GetGlobalContext();

  // Return type: refptr_same
  return HoneycombRequestContextCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT honey_request_context_t* honey_request_context_create_context(
    const struct _honey_request_context_settings_t* settings,
    struct _honey_request_context_handler_t* handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: settings; type: struct_byref_const
  DCHECK(settings);
  if (!settings) {
    return NULL;
  }
  if (!template_util::has_valid_size(settings)) {
    DCHECK(false) << "invalid settings->[base.]size";
    return NULL;
  }
  // Unverified params: handler

  // Translate param: settings; type: struct_byref_const
  HoneycombRequestContextSettings settingsObj;
  if (settings) {
    settingsObj.Set(*settings, false);
  }

  // Execute
  HoneycombRefPtr<HoneycombRequestContext> _retval = HoneycombRequestContext::CreateContext(
      settingsObj, HoneycombRequestContextHandlerCToCpp::Wrap(handler));

  // Return type: refptr_same
  return HoneycombRequestContextCppToC::Wrap(_retval);
}

HONEYCOMB_EXPORT honey_request_context_t* honey_create_context_shared(
    honey_request_context_t* other,
    struct _honey_request_context_handler_t* handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: other; type: refptr_same
  DCHECK(other);
  if (!other) {
    return NULL;
  }
  // Unverified params: handler

  // Execute
  HoneycombRefPtr<HoneycombRequestContext> _retval = HoneycombRequestContext::CreateContext(
      HoneycombRequestContextCppToC::Unwrap(other),
      HoneycombRequestContextHandlerCToCpp::Wrap(handler));

  // Return type: refptr_same
  return HoneycombRequestContextCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK request_context_is_same(struct _honey_request_context_t* self,
                                         struct _honey_request_context_t* other) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: other; type: refptr_same
  DCHECK(other);
  if (!other) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombRequestContextCppToC::Get(self)->IsSame(
      HoneycombRequestContextCppToC::Unwrap(other));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
request_context_is_sharing_with(struct _honey_request_context_t* self,
                                struct _honey_request_context_t* other) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: other; type: refptr_same
  DCHECK(other);
  if (!other) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombRequestContextCppToC::Get(self)->IsSharingWith(
      HoneycombRequestContextCppToC::Unwrap(other));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
request_context_is_global(struct _honey_request_context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombRequestContextCppToC::Get(self)->IsGlobal();

  // Return type: bool
  return _retval;
}

struct _honey_request_context_handler_t* HONEYCOMB_CALLBACK
request_context_get_handler(struct _honey_request_context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombRequestContextHandler> _retval =
      HoneycombRequestContextCppToC::Get(self)->GetHandler();

  // Return type: refptr_diff
  return HoneycombRequestContextHandlerCToCpp::Unwrap(_retval);
}

honey_string_userfree_t HONEYCOMB_CALLBACK
request_context_get_cache_path(struct _honey_request_context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombRequestContextCppToC::Get(self)->GetCachePath();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_cookie_manager_t* HONEYCOMB_CALLBACK
request_context_get_cookie_manager(struct _honey_request_context_t* self,
                                   honey_completion_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Unverified params: callback

  // Execute
  HoneycombRefPtr<HoneycombCookieManager> _retval =
      HoneycombRequestContextCppToC::Get(self)->GetCookieManager(
          HoneycombCompletionCallbackCToCpp::Wrap(callback));

  // Return type: refptr_same
  return HoneycombCookieManagerCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK request_context_register_scheme_handler_factory(
    struct _honey_request_context_t* self,
    const honey_string_t* scheme_name,
    const honey_string_t* domain_name,
    struct _honey_scheme_handler_factory_t* factory) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: scheme_name; type: string_byref_const
  DCHECK(scheme_name);
  if (!scheme_name) {
    return 0;
  }
  // Unverified params: domain_name, factory

  // Execute
  bool _retval =
      HoneycombRequestContextCppToC::Get(self)->RegisterSchemeHandlerFactory(
          HoneycombString(scheme_name), HoneycombString(domain_name),
          HoneycombSchemeHandlerFactoryCToCpp::Wrap(factory));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK request_context_clear_scheme_handler_factories(
    struct _honey_request_context_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombRequestContextCppToC::Get(self)->ClearSchemeHandlerFactories();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK request_context_clear_certificate_exceptions(
    struct _honey_request_context_t* self,
    honey_completion_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: callback

  // Execute
  HoneycombRequestContextCppToC::Get(self)->ClearCertificateExceptions(
      HoneycombCompletionCallbackCToCpp::Wrap(callback));
}

void HONEYCOMB_CALLBACK request_context_clear_http_auth_credentials(
    struct _honey_request_context_t* self,
    honey_completion_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: callback

  // Execute
  HoneycombRequestContextCppToC::Get(self)->ClearHttpAuthCredentials(
      HoneycombCompletionCallbackCToCpp::Wrap(callback));
}

void HONEYCOMB_CALLBACK
request_context_close_all_connections(struct _honey_request_context_t* self,
                                      honey_completion_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: callback

  // Execute
  HoneycombRequestContextCppToC::Get(self)->CloseAllConnections(
      HoneycombCompletionCallbackCToCpp::Wrap(callback));
}

void HONEYCOMB_CALLBACK
request_context_resolve_host(struct _honey_request_context_t* self,
                             const honey_string_t* origin,
                             honey_resolve_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: origin; type: string_byref_const
  DCHECK(origin);
  if (!origin) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback);
  if (!callback) {
    return;
  }

  // Execute
  HoneycombRequestContextCppToC::Get(self)->ResolveHost(
      HoneycombString(origin), HoneycombResolveCallbackCToCpp::Wrap(callback));
}

void HONEYCOMB_CALLBACK
request_context_load_extension(struct _honey_request_context_t* self,
                               const honey_string_t* root_directory,
                               struct _honey_dictionary_value_t* manifest,
                               honey_extension_handler_t* handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: root_directory; type: string_byref_const
  DCHECK(root_directory);
  if (!root_directory) {
    return;
  }
  // Unverified params: manifest, handler

  // Execute
  HoneycombRequestContextCppToC::Get(self)->LoadExtension(
      HoneycombString(root_directory), HoneycombDictionaryValueCppToC::Unwrap(manifest),
      HoneycombExtensionHandlerCToCpp::Wrap(handler));
}

int HONEYCOMB_CALLBACK
request_context_did_load_extension(struct _honey_request_context_t* self,
                                   const honey_string_t* extension_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: extension_id; type: string_byref_const
  DCHECK(extension_id);
  if (!extension_id) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombRequestContextCppToC::Get(self)->DidLoadExtension(
      HoneycombString(extension_id));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
request_context_has_extension(struct _honey_request_context_t* self,
                              const honey_string_t* extension_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: extension_id; type: string_byref_const
  DCHECK(extension_id);
  if (!extension_id) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombRequestContextCppToC::Get(self)->HasExtension(HoneycombString(extension_id));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
request_context_get_extensions(struct _honey_request_context_t* self,
                               honey_string_list_t extension_ids) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: extension_ids; type: string_vec_byref
  DCHECK(extension_ids);
  if (!extension_ids) {
    return 0;
  }

  // Translate param: extension_ids; type: string_vec_byref
  std::vector<HoneycombString> extension_idsList;
  transfer_string_list_contents(extension_ids, extension_idsList);

  // Execute
  bool _retval =
      HoneycombRequestContextCppToC::Get(self)->GetExtensions(extension_idsList);

  // Restore param: extension_ids; type: string_vec_byref
  honey_string_list_clear(extension_ids);
  transfer_string_list_contents(extension_idsList, extension_ids);

  // Return type: bool
  return _retval;
}

honey_extension_t* HONEYCOMB_CALLBACK
request_context_get_extension(struct _honey_request_context_t* self,
                              const honey_string_t* extension_id) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: extension_id; type: string_byref_const
  DCHECK(extension_id);
  if (!extension_id) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombExtension> _retval =
      HoneycombRequestContextCppToC::Get(self)->GetExtension(HoneycombString(extension_id));

  // Return type: refptr_same
  return HoneycombExtensionCppToC::Wrap(_retval);
}

honey_media_router_t* HONEYCOMB_CALLBACK
request_context_get_media_router(struct _honey_request_context_t* self,
                                 honey_completion_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Unverified params: callback

  // Execute
  HoneycombRefPtr<HoneycombMediaRouter> _retval =
      HoneycombRequestContextCppToC::Get(self)->GetMediaRouter(
          HoneycombCompletionCallbackCToCpp::Wrap(callback));

  // Return type: refptr_same
  return HoneycombMediaRouterCppToC::Wrap(_retval);
}

struct _honey_value_t* HONEYCOMB_CALLBACK
request_context_get_website_setting(struct _honey_request_context_t* self,
                                    const honey_string_t* requesting_url,
                                    const honey_string_t* top_level_url,
                                    honey_content_setting_types_t content_type) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Unverified params: requesting_url, top_level_url

  // Execute
  HoneycombRefPtr<HoneycombValue> _retval =
      HoneycombRequestContextCppToC::Get(self)->GetWebsiteSetting(
          HoneycombString(requesting_url), HoneycombString(top_level_url), content_type);

  // Return type: refptr_same
  return HoneycombValueCppToC::Wrap(_retval);
}

void HONEYCOMB_CALLBACK
request_context_set_website_setting(struct _honey_request_context_t* self,
                                    const honey_string_t* requesting_url,
                                    const honey_string_t* top_level_url,
                                    honey_content_setting_types_t content_type,
                                    struct _honey_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: requesting_url, top_level_url, value

  // Execute
  HoneycombRequestContextCppToC::Get(self)->SetWebsiteSetting(
      HoneycombString(requesting_url), HoneycombString(top_level_url), content_type,
      HoneycombValueCppToC::Unwrap(value));
}

honey_content_setting_values_t HONEYCOMB_CALLBACK
request_context_get_content_setting(struct _honey_request_context_t* self,
                                    const honey_string_t* requesting_url,
                                    const honey_string_t* top_level_url,
                                    honey_content_setting_types_t content_type) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return HONEYCOMB_CONTENT_SETTING_VALUE_DEFAULT;
  }
  // Unverified params: requesting_url, top_level_url

  // Execute
  honey_content_setting_values_t _retval =
      HoneycombRequestContextCppToC::Get(self)->GetContentSetting(
          HoneycombString(requesting_url), HoneycombString(top_level_url), content_type);

  // Return type: simple
  return _retval;
}

void HONEYCOMB_CALLBACK
request_context_set_content_setting(struct _honey_request_context_t* self,
                                    const honey_string_t* requesting_url,
                                    const honey_string_t* top_level_url,
                                    honey_content_setting_types_t content_type,
                                    honey_content_setting_values_t value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Unverified params: requesting_url, top_level_url

  // Execute
  HoneycombRequestContextCppToC::Get(self)->SetContentSetting(
      HoneycombString(requesting_url), HoneycombString(top_level_url), content_type, value);
}

int HONEYCOMB_CALLBACK
request_context_has_preference(struct _honey_preference_manager_t* self,
                               const honey_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombRequestContextCppToC::Get(
                     reinterpret_cast<honey_request_context_t*>(self))
                     ->HasPreference(HoneycombString(name));

  // Return type: bool
  return _retval;
}

struct _honey_value_t* HONEYCOMB_CALLBACK
request_context_get_preference(struct _honey_preference_manager_t* self,
                               const honey_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombValue> _retval =
      HoneycombRequestContextCppToC::Get(
          reinterpret_cast<honey_request_context_t*>(self))
          ->GetPreference(HoneycombString(name));

  // Return type: refptr_same
  return HoneycombValueCppToC::Wrap(_retval);
}

struct _honey_dictionary_value_t* HONEYCOMB_CALLBACK
request_context_get_all_preferences(struct _honey_preference_manager_t* self,
                                    int include_defaults) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDictionaryValue> _retval =
      HoneycombRequestContextCppToC::Get(
          reinterpret_cast<honey_request_context_t*>(self))
          ->GetAllPreferences(include_defaults ? true : false);

  // Return type: refptr_same
  return HoneycombDictionaryValueCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK
request_context_can_set_preference(struct _honey_preference_manager_t* self,
                                   const honey_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombRequestContextCppToC::Get(
                     reinterpret_cast<honey_request_context_t*>(self))
                     ->CanSetPreference(HoneycombString(name));

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
request_context_set_preference(struct _honey_preference_manager_t* self,
                               const honey_string_t* name,
                               struct _honey_value_t* value,
                               honey_string_t* error) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: name; type: string_byref_const
  DCHECK(name);
  if (!name) {
    return 0;
  }
  // Verify param: error; type: string_byref
  DCHECK(error);
  if (!error) {
    return 0;
  }
  // Unverified params: value

  // Translate param: error; type: string_byref
  HoneycombString errorStr(error);

  // Execute
  bool _retval = HoneycombRequestContextCppToC::Get(
                     reinterpret_cast<honey_request_context_t*>(self))
                     ->SetPreference(HoneycombString(name),
                                     HoneycombValueCppToC::Unwrap(value), errorStr);

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombRequestContextCppToC::HoneycombRequestContextCppToC() {
  GetStruct()->is_same = request_context_is_same;
  GetStruct()->is_sharing_with = request_context_is_sharing_with;
  GetStruct()->is_global = request_context_is_global;
  GetStruct()->get_handler = request_context_get_handler;
  GetStruct()->get_cache_path = request_context_get_cache_path;
  GetStruct()->get_cookie_manager = request_context_get_cookie_manager;
  GetStruct()->register_scheme_handler_factory =
      request_context_register_scheme_handler_factory;
  GetStruct()->clear_scheme_handler_factories =
      request_context_clear_scheme_handler_factories;
  GetStruct()->clear_certificate_exceptions =
      request_context_clear_certificate_exceptions;
  GetStruct()->clear_http_auth_credentials =
      request_context_clear_http_auth_credentials;
  GetStruct()->close_all_connections = request_context_close_all_connections;
  GetStruct()->resolve_host = request_context_resolve_host;
  GetStruct()->load_extension = request_context_load_extension;
  GetStruct()->did_load_extension = request_context_did_load_extension;
  GetStruct()->has_extension = request_context_has_extension;
  GetStruct()->get_extensions = request_context_get_extensions;
  GetStruct()->get_extension = request_context_get_extension;
  GetStruct()->get_media_router = request_context_get_media_router;
  GetStruct()->get_website_setting = request_context_get_website_setting;
  GetStruct()->set_website_setting = request_context_set_website_setting;
  GetStruct()->get_content_setting = request_context_get_content_setting;
  GetStruct()->set_content_setting = request_context_set_content_setting;
  GetStruct()->base.has_preference = request_context_has_preference;
  GetStruct()->base.get_preference = request_context_get_preference;
  GetStruct()->base.get_all_preferences = request_context_get_all_preferences;
  GetStruct()->base.can_set_preference = request_context_can_set_preference;
  GetStruct()->base.set_preference = request_context_set_preference;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombRequestContextCppToC::~HoneycombRequestContextCppToC() {}

template <>
HoneycombRefPtr<HoneycombRequestContext> HoneycombCppToCRefCounted<
    HoneycombRequestContextCppToC,
    HoneycombRequestContext,
    honey_request_context_t>::UnwrapDerived(HoneycombWrapperType type,
                                          honey_request_context_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombRequestContextCppToC,
                                   HoneycombRequestContext,
                                   honey_request_context_t>::kWrapperType =
    WT_REQUEST_CONTEXT;
