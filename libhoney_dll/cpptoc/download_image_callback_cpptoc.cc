// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=87ae44d30e4e9b8b28d58910b995212063380ef3$
//

#include "libhoney_dll/cpptoc/download_image_callback_cpptoc.h"
#include "libhoney_dll/ctocpp/image_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK download_image_callback_on_download_image_finished(
    struct _honey_download_image_callback_t* self,
    const honey_string_t* image_url,
    int http_status_code,
    struct _honey_image_t* image) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: image_url; type: string_byref_const
  DCHECK(image_url);
  if (!image_url) {
    return;
  }
  // Unverified params: image

  // Execute
  HoneycombDownloadImageCallbackCppToC::Get(self)->OnDownloadImageFinished(
      HoneycombString(image_url), http_status_code, HoneycombImageCToCpp::Wrap(image));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombDownloadImageCallbackCppToC::HoneycombDownloadImageCallbackCppToC() {
  GetStruct()->on_download_image_finished =
      download_image_callback_on_download_image_finished;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombDownloadImageCallbackCppToC::~HoneycombDownloadImageCallbackCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombDownloadImageCallback> HoneycombCppToCRefCounted<
    HoneycombDownloadImageCallbackCppToC,
    HoneycombDownloadImageCallback,
    honey_download_image_callback_t>::UnwrapDerived(HoneycombWrapperType type,
                                                  honey_download_image_callback_t*
                                                      s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCppToCRefCounted<HoneycombDownloadImageCallbackCppToC,
                        HoneycombDownloadImageCallback,
                        honey_download_image_callback_t>::kWrapperType =
        WT_DOWNLOAD_IMAGE_CALLBACK;
