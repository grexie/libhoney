// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d2d5ac3885b178c1fbbf59de4ce71d8cbb6a495d$
//

#include "libhoney_dll/cpptoc/extension_cpptoc.h"
#include "libhoney_dll/cpptoc/dictionary_value_cpptoc.h"
#include "libhoney_dll/cpptoc/request_context_cpptoc.h"
#include "libhoney_dll/ctocpp/extension_handler_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_string_userfree_t HONEYCOMB_CALLBACK
extension_get_identifier(struct _honey_extension_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombExtensionCppToC::Get(self)->GetIdentifier();

  // Return type: string
  return _retval.DetachToUserFree();
}

honey_string_userfree_t HONEYCOMB_CALLBACK
extension_get_path(struct _honey_extension_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombExtensionCppToC::Get(self)->GetPath();

  // Return type: string
  return _retval.DetachToUserFree();
}

struct _honey_dictionary_value_t* HONEYCOMB_CALLBACK
extension_get_manifest(struct _honey_extension_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombDictionaryValue> _retval =
      HoneycombExtensionCppToC::Get(self)->GetManifest();

  // Return type: refptr_same
  return HoneycombDictionaryValueCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK extension_is_same(struct _honey_extension_t* self,
                                   struct _honey_extension_t* that) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: that; type: refptr_same
  DCHECK(that);
  if (!that) {
    return 0;
  }

  // Execute
  bool _retval =
      HoneycombExtensionCppToC::Get(self)->IsSame(HoneycombExtensionCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _honey_extension_handler_t* HONEYCOMB_CALLBACK
extension_get_handler(struct _honey_extension_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombExtensionHandler> _retval =
      HoneycombExtensionCppToC::Get(self)->GetHandler();

  // Return type: refptr_diff
  return HoneycombExtensionHandlerCToCpp::Unwrap(_retval);
}

struct _honey_request_context_t* HONEYCOMB_CALLBACK
extension_get_loader_context(struct _honey_extension_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombRequestContext> _retval =
      HoneycombExtensionCppToC::Get(self)->GetLoaderContext();

  // Return type: refptr_same
  return HoneycombRequestContextCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK extension_is_loaded(struct _honey_extension_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombExtensionCppToC::Get(self)->IsLoaded();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK extension_unload(struct _honey_extension_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombExtensionCppToC::Get(self)->Unload();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombExtensionCppToC::HoneycombExtensionCppToC() {
  GetStruct()->get_identifier = extension_get_identifier;
  GetStruct()->get_path = extension_get_path;
  GetStruct()->get_manifest = extension_get_manifest;
  GetStruct()->is_same = extension_is_same;
  GetStruct()->get_handler = extension_get_handler;
  GetStruct()->get_loader_context = extension_get_loader_context;
  GetStruct()->is_loaded = extension_is_loaded;
  GetStruct()->unload = extension_unload;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombExtensionCppToC::~HoneycombExtensionCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombExtension>
HoneycombCppToCRefCounted<HoneycombExtensionCppToC, HoneycombExtension, honey_extension_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_extension_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombExtensionCppToC,
                                   HoneycombExtension,
                                   honey_extension_t>::kWrapperType =
    WT_EXTENSION;
