// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=eddbb7f93fd3ffa2548b4286ab8cc854366ffc94$
//

#include "libhoney_dll/cpptoc/drag_handler_cpptoc.h"
#include "libhoney_dll/ctocpp/browser_ctocpp.h"
#include "libhoney_dll/ctocpp/drag_data_ctocpp.h"
#include "libhoney_dll/ctocpp/frame_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK drag_handler_on_drag_enter(struct _honey_drag_handler_t* self,
                                            honey_browser_t* browser,
                                            honey_drag_data_t* dragData,
                                            honey_drag_operations_mask_t mask) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return 0;
  }
  // Verify param: dragData; type: refptr_diff
  DCHECK(dragData);
  if (!dragData) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombDragHandlerCppToC::Get(self)->OnDragEnter(
      HoneycombBrowserCToCpp::Wrap(browser), HoneycombDragDataCToCpp::Wrap(dragData), mask);

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK drag_handler_on_draggable_regions_changed(
    struct _honey_drag_handler_t* self,
    honey_browser_t* browser,
    struct _honey_frame_t* frame,
    size_t regionsCount,
    honey_draggable_region_t const* regions) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame);
  if (!frame) {
    return;
  }
  // Verify param: regions; type: simple_vec_byref_const
  DCHECK(regionsCount == 0 || regions);
  if (regionsCount > 0 && !regions) {
    return;
  }

  // Translate param: regions; type: simple_vec_byref_const
  std::vector<HoneycombDraggableRegion> regionsList;
  if (regionsCount > 0) {
    for (size_t i = 0; i < regionsCount; ++i) {
      HoneycombDraggableRegion regionsVal = regions[i];
      regionsList.push_back(regionsVal);
    }
  }

  // Execute
  HoneycombDragHandlerCppToC::Get(self)->OnDraggableRegionsChanged(
      HoneycombBrowserCToCpp::Wrap(browser), HoneycombFrameCToCpp::Wrap(frame),
      regionsList);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombDragHandlerCppToC::HoneycombDragHandlerCppToC() {
  GetStruct()->on_drag_enter = drag_handler_on_drag_enter;
  GetStruct()->on_draggable_regions_changed =
      drag_handler_on_draggable_regions_changed;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombDragHandlerCppToC::~HoneycombDragHandlerCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombDragHandler>
HoneycombCppToCRefCounted<HoneycombDragHandlerCppToC, HoneycombDragHandler, honey_drag_handler_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_drag_handler_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombDragHandlerCppToC,
                                   HoneycombDragHandler,
                                   honey_drag_handler_t>::kWrapperType =
    WT_DRAG_HANDLER;
