// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f663466a6f1faeac7a351bb5af13cb40224b3dc6$
//

#include "libhoney_dll/cpptoc/keyboard_handler_cpptoc.h"
#include "libhoney_dll/ctocpp/browser_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int HONEYCOMB_CALLBACK
keyboard_handler_on_pre_key_event(struct _honey_keyboard_handler_t* self,
                                  honey_browser_t* browser,
                                  const honey_key_event_t* event,
                                  honey_event_handle_t os_event,
                                  int* is_keyboard_shortcut) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return 0;
  }
  // Verify param: event; type: simple_byref_const
  DCHECK(event);
  if (!event) {
    return 0;
  }
  // Verify param: is_keyboard_shortcut; type: bool_byaddr
  DCHECK(is_keyboard_shortcut);
  if (!is_keyboard_shortcut) {
    return 0;
  }

  // Translate param: event; type: simple_byref_const
  HoneycombKeyEvent eventVal = event ? *event : HoneycombKeyEvent();
  // Translate param: is_keyboard_shortcut; type: bool_byaddr
  bool is_keyboard_shortcutBool =
      (is_keyboard_shortcut && *is_keyboard_shortcut) ? true : false;

  // Execute
  bool _retval = HoneycombKeyboardHandlerCppToC::Get(self)->OnPreKeyEvent(
      HoneycombBrowserCToCpp::Wrap(browser), eventVal, os_event,
      &is_keyboard_shortcutBool);

  // Restore param: is_keyboard_shortcut; type: bool_byaddr
  if (is_keyboard_shortcut) {
    *is_keyboard_shortcut = is_keyboard_shortcutBool ? true : false;
  }

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK
keyboard_handler_on_key_event(struct _honey_keyboard_handler_t* self,
                              honey_browser_t* browser,
                              const honey_key_event_t* event,
                              honey_event_handle_t os_event) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser) {
    return 0;
  }
  // Verify param: event; type: simple_byref_const
  DCHECK(event);
  if (!event) {
    return 0;
  }

  // Translate param: event; type: simple_byref_const
  HoneycombKeyEvent eventVal = event ? *event : HoneycombKeyEvent();

  // Execute
  bool _retval = HoneycombKeyboardHandlerCppToC::Get(self)->OnKeyEvent(
      HoneycombBrowserCToCpp::Wrap(browser), eventVal, os_event);

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombKeyboardHandlerCppToC::HoneycombKeyboardHandlerCppToC() {
  GetStruct()->on_pre_key_event = keyboard_handler_on_pre_key_event;
  GetStruct()->on_key_event = keyboard_handler_on_key_event;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombKeyboardHandlerCppToC::~HoneycombKeyboardHandlerCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombKeyboardHandler> HoneycombCppToCRefCounted<
    HoneycombKeyboardHandlerCppToC,
    HoneycombKeyboardHandler,
    honey_keyboard_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                           honey_keyboard_handler_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombKeyboardHandlerCppToC,
                                   HoneycombKeyboardHandler,
                                   honey_keyboard_handler_t>::kWrapperType =
    WT_KEYBOARD_HANDLER;
