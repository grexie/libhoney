// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=ec163d8f228ca2c347b8c6a76b814e45d0d46d28$
//

#include "libhoney_dll/cpptoc/urlrequest_cpptoc.h"
#include "libhoney_dll/cpptoc/request_context_cpptoc.h"
#include "libhoney_dll/cpptoc/request_cpptoc.h"
#include "libhoney_dll/cpptoc/response_cpptoc.h"
#include "libhoney_dll/ctocpp/urlrequest_client_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

HONEYCOMB_EXPORT honey_urlrequest_t* honey_urlrequest_create(
    honey_request_t* request,
    struct _honey_urlrequest_client_t* client,
    honey_request_context_t* request_context) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: request; type: refptr_same
  DCHECK(request);
  if (!request) {
    return NULL;
  }
  // Verify param: client; type: refptr_diff
  DCHECK(client);
  if (!client) {
    return NULL;
  }
  // Unverified params: request_context

  // Execute
  HoneycombRefPtr<HoneycombURLRequest> _retval =
      HoneycombURLRequest::Create(HoneycombRequestCppToC::Unwrap(request),
                            HoneycombURLRequestClientCToCpp::Wrap(client),
                            HoneycombRequestContextCppToC::Unwrap(request_context));

  // Return type: refptr_same
  return HoneycombURLRequestCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_request_t* HONEYCOMB_CALLBACK
urlrequest_get_request(struct _honey_urlrequest_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombRequest> _retval = HoneycombURLRequestCppToC::Get(self)->GetRequest();

  // Return type: refptr_same
  return HoneycombRequestCppToC::Wrap(_retval);
}

struct _honey_urlrequest_client_t* HONEYCOMB_CALLBACK
urlrequest_get_client(struct _honey_urlrequest_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombURLRequestClient> _retval =
      HoneycombURLRequestCppToC::Get(self)->GetClient();

  // Return type: refptr_diff
  return HoneycombURLRequestClientCToCpp::Unwrap(_retval);
}

honey_urlrequest_status_t HONEYCOMB_CALLBACK
urlrequest_get_request_status(struct _honey_urlrequest_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return UR_UNKNOWN;
  }

  // Execute
  honey_urlrequest_status_t _retval =
      HoneycombURLRequestCppToC::Get(self)->GetRequestStatus();

  // Return type: simple
  return _retval;
}

honey_errorcode_t HONEYCOMB_CALLBACK
urlrequest_get_request_error(struct _honey_urlrequest_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return ERR_NONE;
  }

  // Execute
  honey_errorcode_t _retval = HoneycombURLRequestCppToC::Get(self)->GetRequestError();

  // Return type: simple
  return _retval;
}

honey_response_t* HONEYCOMB_CALLBACK
urlrequest_get_response(struct _honey_urlrequest_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombResponse> _retval =
      HoneycombURLRequestCppToC::Get(self)->GetResponse();

  // Return type: refptr_same
  return HoneycombResponseCppToC::Wrap(_retval);
}

int HONEYCOMB_CALLBACK
urlrequest_response_was_cached(struct _honey_urlrequest_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombURLRequestCppToC::Get(self)->ResponseWasCached();

  // Return type: bool
  return _retval;
}

void HONEYCOMB_CALLBACK urlrequest_cancel(struct _honey_urlrequest_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombURLRequestCppToC::Get(self)->Cancel();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombURLRequestCppToC::HoneycombURLRequestCppToC() {
  GetStruct()->get_request = urlrequest_get_request;
  GetStruct()->get_client = urlrequest_get_client;
  GetStruct()->get_request_status = urlrequest_get_request_status;
  GetStruct()->get_request_error = urlrequest_get_request_error;
  GetStruct()->get_response = urlrequest_get_response;
  GetStruct()->response_was_cached = urlrequest_response_was_cached;
  GetStruct()->cancel = urlrequest_cancel;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombURLRequestCppToC::~HoneycombURLRequestCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombURLRequest>
HoneycombCppToCRefCounted<HoneycombURLRequestCppToC, HoneycombURLRequest, honey_urlrequest_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_urlrequest_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombURLRequestCppToC,
                                   HoneycombURLRequest,
                                   honey_urlrequest_t>::kWrapperType =
    WT_URLREQUEST;
