// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=6220412461641a8ca21d4b521f3eb9e7db3ccb63$
//

#include "libhoney_dll/cpptoc/scheme_handler_factory_cpptoc.h"
#include "libhoney_dll/cpptoc/resource_handler_cpptoc.h"
#include "libhoney_dll/ctocpp/browser_ctocpp.h"
#include "libhoney_dll/ctocpp/frame_ctocpp.h"
#include "libhoney_dll/ctocpp/request_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_resource_handler_t* HONEYCOMB_CALLBACK
scheme_handler_factory_create(struct _honey_scheme_handler_factory_t* self,
                              honey_browser_t* browser,
                              honey_frame_t* frame,
                              const honey_string_t* scheme_name,
                              honey_request_t* request) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }
  // Verify param: scheme_name; type: string_byref_const
  DCHECK(scheme_name);
  if (!scheme_name) {
    return NULL;
  }
  // Verify param: request; type: refptr_diff
  DCHECK(request);
  if (!request) {
    return NULL;
  }
  // Unverified params: browser, frame

  // Execute
  HoneycombRefPtr<HoneycombResourceHandler> _retval =
      HoneycombSchemeHandlerFactoryCppToC::Get(self)->Create(
          HoneycombBrowserCToCpp::Wrap(browser), HoneycombFrameCToCpp::Wrap(frame),
          HoneycombString(scheme_name), HoneycombRequestCToCpp::Wrap(request));

  // Return type: refptr_same
  return HoneycombResourceHandlerCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombSchemeHandlerFactoryCppToC::HoneycombSchemeHandlerFactoryCppToC() {
  GetStruct()->create = scheme_handler_factory_create;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombSchemeHandlerFactoryCppToC::~HoneycombSchemeHandlerFactoryCppToC() {}

template <>
HoneycombRefPtr<HoneycombSchemeHandlerFactory> HoneycombCppToCRefCounted<
    HoneycombSchemeHandlerFactoryCppToC,
    HoneycombSchemeHandlerFactory,
    honey_scheme_handler_factory_t>::UnwrapDerived(HoneycombWrapperType type,
                                                 honey_scheme_handler_factory_t*
                                                     s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombSchemeHandlerFactoryCppToC,
                                   HoneycombSchemeHandlerFactory,
                                   honey_scheme_handler_factory_t>::kWrapperType =
    WT_SCHEME_HANDLER_FACTORY;
