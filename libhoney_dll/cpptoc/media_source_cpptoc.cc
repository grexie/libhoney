// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=28f41d6cd0959174263b1cf5d1da37b4fe4c463b$
//

#include "libhoney_dll/cpptoc/media_source_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

honey_string_userfree_t HONEYCOMB_CALLBACK
media_source_get_id(struct _honey_media_source_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombString _retval = HoneycombMediaSourceCppToC::Get(self)->GetId();

  // Return type: string
  return _retval.DetachToUserFree();
}

int HONEYCOMB_CALLBACK media_source_is_cast_source(struct _honey_media_source_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombMediaSourceCppToC::Get(self)->IsCastSource();

  // Return type: bool
  return _retval;
}

int HONEYCOMB_CALLBACK media_source_is_dial_source(struct _honey_media_source_t* self) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return 0;
  }

  // Execute
  bool _retval = HoneycombMediaSourceCppToC::Get(self)->IsDialSource();

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombMediaSourceCppToC::HoneycombMediaSourceCppToC() {
  GetStruct()->get_id = media_source_get_id;
  GetStruct()->is_cast_source = media_source_is_cast_source;
  GetStruct()->is_dial_source = media_source_is_dial_source;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombMediaSourceCppToC::~HoneycombMediaSourceCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombMediaSource>
HoneycombCppToCRefCounted<HoneycombMediaSourceCppToC, HoneycombMediaSource, honey_media_source_t>::
    UnwrapDerived(HoneycombWrapperType type, honey_media_source_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombMediaSourceCppToC,
                                   HoneycombMediaSource,
                                   honey_media_source_t>::kWrapperType =
    WT_MEDIA_SOURCE;
