// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c7fa8f548cc0e606e09fe76532b3d2bc19473b16$
//

#include "libhoney_dll/cpptoc/resource_read_callback_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK
resource_read_callback_cont(struct _honey_resource_read_callback_t* self,
                            int bytes_read) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }

  // Execute
  HoneycombResourceReadCallbackCppToC::Get(self)->Continue(bytes_read);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombResourceReadCallbackCppToC::HoneycombResourceReadCallbackCppToC() {
  GetStruct()->cont = resource_read_callback_cont;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombResourceReadCallbackCppToC::~HoneycombResourceReadCallbackCppToC() {
  shutdown_checker::AssertNotShutdown();
}

template <>
HoneycombRefPtr<HoneycombResourceReadCallback> HoneycombCppToCRefCounted<
    HoneycombResourceReadCallbackCppToC,
    HoneycombResourceReadCallback,
    honey_resource_read_callback_t>::UnwrapDerived(HoneycombWrapperType type,
                                                 honey_resource_read_callback_t*
                                                     s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCppToCRefCounted<HoneycombResourceReadCallbackCppToC,
                                   HoneycombResourceReadCallback,
                                   honey_resource_read_callback_t>::kWrapperType =
    WT_RESOURCE_READ_CALLBACK;
