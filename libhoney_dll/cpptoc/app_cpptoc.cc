// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=3b8d5f1990e9638e0baf2c3351c779f53c8b868a$
//

#include "libhoney_dll/cpptoc/app_cpptoc.h"
#include "libhoney_dll/cpptoc/browser_process_handler_cpptoc.h"
#include "libhoney_dll/cpptoc/render_process_handler_cpptoc.h"
#include "libhoney_dll/cpptoc/resource_bundle_handler_cpptoc.h"
#include "libhoney_dll/ctocpp/command_line_ctocpp.h"
#include "libhoney_dll/ctocpp/scheme_registrar_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void HONEYCOMB_CALLBACK app_on_before_command_line_processing(
    struct _honey_app_t* self,
    const honey_string_t* process_type,
    struct _honey_command_line_t* command_line) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: command_line; type: refptr_diff
  DCHECK(command_line);
  if (!command_line) {
    return;
  }
  // Unverified params: process_type

  // Execute
  HoneycombAppCppToC::Get(self)->OnBeforeCommandLineProcessing(
      HoneycombString(process_type), HoneycombCommandLineCToCpp::Wrap(command_line));
}

void HONEYCOMB_CALLBACK
app_on_register_custom_schemes(struct _honey_app_t* self,
                               struct _honey_scheme_registrar_t* registrar) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return;
  }
  // Verify param: registrar; type: rawptr_diff
  DCHECK(registrar);
  if (!registrar) {
    return;
  }

  // Translate param: registrar; type: rawptr_diff
  HoneycombOwnPtr<HoneycombSchemeRegistrar> registrarPtr(
      HoneycombSchemeRegistrarCToCpp::Wrap(registrar));

  // Execute
  HoneycombAppCppToC::Get(self)->OnRegisterCustomSchemes(registrarPtr.get());
}

struct _honey_resource_bundle_handler_t* HONEYCOMB_CALLBACK
app_get_resource_bundle_handler(struct _honey_app_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombResourceBundleHandler> _retval =
      HoneycombAppCppToC::Get(self)->GetResourceBundleHandler();

  // Return type: refptr_same
  return HoneycombResourceBundleHandlerCppToC::Wrap(_retval);
}

struct _honey_browser_process_handler_t* HONEYCOMB_CALLBACK
app_get_browser_process_handler(struct _honey_app_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombBrowserProcessHandler> _retval =
      HoneycombAppCppToC::Get(self)->GetBrowserProcessHandler();

  // Return type: refptr_same
  return HoneycombBrowserProcessHandlerCppToC::Wrap(_retval);
}

struct _honey_render_process_handler_t* HONEYCOMB_CALLBACK
app_get_render_process_handler(struct _honey_app_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self) {
    return NULL;
  }

  // Execute
  HoneycombRefPtr<HoneycombRenderProcessHandler> _retval =
      HoneycombAppCppToC::Get(self)->GetRenderProcessHandler();

  // Return type: refptr_same
  return HoneycombRenderProcessHandlerCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

HoneycombAppCppToC::HoneycombAppCppToC() {
  GetStruct()->on_before_command_line_processing =
      app_on_before_command_line_processing;
  GetStruct()->on_register_custom_schemes = app_on_register_custom_schemes;
  GetStruct()->get_resource_bundle_handler = app_get_resource_bundle_handler;
  GetStruct()->get_browser_process_handler = app_get_browser_process_handler;
  GetStruct()->get_render_process_handler = app_get_render_process_handler;
}

// DESTRUCTOR - Do not edit by hand.

HoneycombAppCppToC::~HoneycombAppCppToC() {}

template <>
HoneycombRefPtr<HoneycombApp>
HoneycombCppToCRefCounted<HoneycombAppCppToC, HoneycombApp, honey_app_t>::UnwrapDerived(
    HoneycombWrapperType type,
    honey_app_t* s) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCppToCRefCounted<HoneycombAppCppToC, HoneycombApp, honey_app_t>::kWrapperType = WT_APP;
