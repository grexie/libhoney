// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=84848cc9affe98814d49ff6a27854b61bec42992$
//

#include "libhoney_dll/ctocpp/domnode_ctocpp.h"
#include "libhoney_dll/ctocpp/domdocument_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"
#include "libhoney_dll/transfer_util.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombDOMNode::Type HoneycombDOMNodeCToCpp::GetType() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_type)) {
    return DOM_NODE_TYPE_UNSUPPORTED;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_dom_node_type_t _retval = _struct->get_type(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") bool HoneycombDOMNodeCToCpp::IsText() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_text)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_text(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombDOMNodeCToCpp::IsElement() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_element)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_element(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombDOMNodeCToCpp::IsEditable() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_editable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_editable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombDOMNodeCToCpp::IsFormControlElement() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_form_control_element)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_form_control_element(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombString HoneycombDOMNodeCToCpp::GetFormControlElementType() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_form_control_element_type)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval =
      _struct->get_form_control_element_type(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
bool HoneycombDOMNodeCToCpp::IsSame(HoneycombRefPtr<HoneycombDOMNode> that) {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombDOMNodeCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDOMNodeCToCpp::GetName() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_name)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_name(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDOMNodeCToCpp::GetValue() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_value)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_value(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
bool HoneycombDOMNodeCToCpp::SetValue(const HoneycombString& value) {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_value)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: string_byref_const
  DCHECK(!value.empty());
  if (value.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_value(_struct, value.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDOMNodeCToCpp::GetAsMarkup() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_as_markup)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_as_markup(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDOMDocument> HoneycombDOMNodeCToCpp::GetDocument() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_document)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_domdocument_t* _retval = _struct->get_document(_struct);

  // Return type: refptr_same
  return HoneycombDOMDocumentCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombDOMNode> HoneycombDOMNodeCToCpp::GetParent() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_parent)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_domnode_t* _retval = _struct->get_parent(_struct);

  // Return type: refptr_same
  return HoneycombDOMNodeCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDOMNode> HoneycombDOMNodeCToCpp::GetPreviousSibling() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_previous_sibling)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_domnode_t* _retval = _struct->get_previous_sibling(_struct);

  // Return type: refptr_same
  return HoneycombDOMNodeCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDOMNode> HoneycombDOMNodeCToCpp::GetNextSibling() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_next_sibling)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_domnode_t* _retval = _struct->get_next_sibling(_struct);

  // Return type: refptr_same
  return HoneycombDOMNodeCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") bool HoneycombDOMNodeCToCpp::HasChildren() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_children)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->has_children(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDOMNode> HoneycombDOMNodeCToCpp::GetFirstChild() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_first_child)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_domnode_t* _retval = _struct->get_first_child(_struct);

  // Return type: refptr_same
  return HoneycombDOMNodeCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDOMNode> HoneycombDOMNodeCToCpp::GetLastChild() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_last_child)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_domnode_t* _retval = _struct->get_last_child(_struct);

  // Return type: refptr_same
  return HoneycombDOMNodeCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDOMNodeCToCpp::GetElementTagName() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_element_tag_name)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_element_tag_name(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") bool HoneycombDOMNodeCToCpp::HasElementAttributes() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_element_attributes)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->has_element_attributes(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombDOMNodeCToCpp::HasElementAttribute(const HoneycombString& attrName) {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_element_attribute)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: attrName; type: string_byref_const
  DCHECK(!attrName.empty());
  if (attrName.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->has_element_attribute(_struct, attrName.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombString HoneycombDOMNodeCToCpp::GetElementAttribute(const HoneycombString& attrName) {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_element_attribute)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: attrName; type: string_byref_const
  DCHECK(!attrName.empty());
  if (attrName.empty()) {
    return HoneycombString();
  }

  // Execute
  honey_string_userfree_t _retval =
      _struct->get_element_attribute(_struct, attrName.GetStruct());

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombDOMNodeCToCpp::GetElementAttributes(AttributeMap& attrMap) {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_element_attributes)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: attrMap; type: string_map_single_byref
  honey_string_map_t attrMapMap = honey_string_map_alloc();
  DCHECK(attrMapMap);
  if (attrMapMap) {
    transfer_string_map_contents(attrMap, attrMapMap);
  }

  // Execute
  _struct->get_element_attributes(_struct, attrMapMap);

  // Restore param:attrMap; type: string_map_single_byref
  if (attrMapMap) {
    attrMap.clear();
    transfer_string_map_contents(attrMapMap, attrMap);
    honey_string_map_free(attrMapMap);
  }
}

NO_SANITIZE("cfi-icall")
bool HoneycombDOMNodeCToCpp::SetElementAttribute(const HoneycombString& attrName,
                                           const HoneycombString& value) {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_element_attribute)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: attrName; type: string_byref_const
  DCHECK(!attrName.empty());
  if (attrName.empty()) {
    return false;
  }
  // Verify param: value; type: string_byref_const
  DCHECK(!value.empty());
  if (value.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_element_attribute(_struct, attrName.GetStruct(),
                                               value.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDOMNodeCToCpp::GetElementInnerText() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_element_inner_text)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_element_inner_text(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombDOMNodeCToCpp::GetElementBounds() {
  shutdown_checker::AssertNotShutdown();

  honey_domnode_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_element_bounds)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_element_bounds(_struct);

  // Return type: simple
  return _retval;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombDOMNodeCToCpp::HoneycombDOMNodeCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombDOMNodeCToCpp::~HoneycombDOMNodeCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_domnode_t*
HoneycombCToCppRefCounted<HoneycombDOMNodeCToCpp, HoneycombDOMNode, honey_domnode_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombDOMNode* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombDOMNodeCToCpp,
                                   HoneycombDOMNode,
                                   honey_domnode_t>::kWrapperType = WT_DOMNODE;
