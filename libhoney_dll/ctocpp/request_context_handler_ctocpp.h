// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8f4c9ab7910a1497890d9bb3bc7aef80e23b7306$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_CONTEXT_HANDLER_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_CONTEXT_HANDLER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_request_context_handler_capi.h"
#include "include/honey_request_context_handler.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombRequestContextHandlerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombRequestContextHandlerCToCpp,
                                 HoneycombRequestContextHandler,
                                 honey_request_context_handler_t> {
 public:
  HoneycombRequestContextHandlerCToCpp();
  virtual ~HoneycombRequestContextHandlerCToCpp();

  // HoneycombRequestContextHandler methods.
  void OnRequestContextInitialized(
      HoneycombRefPtr<HoneycombRequestContext> request_context) override;
  HoneycombRefPtr<HoneycombResourceRequestHandler> GetResourceRequestHandler(
      HoneycombRefPtr<HoneycombBrowser> browser,
      HoneycombRefPtr<HoneycombFrame> frame,
      HoneycombRefPtr<HoneycombRequest> request,
      bool is_navigation,
      bool is_download,
      const HoneycombString& request_initiator,
      bool& disable_default_handling) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_CONTEXT_HANDLER_CTOCPP_H_
