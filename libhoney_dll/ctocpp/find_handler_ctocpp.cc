// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f39b33835f8368cc507c189fd54f63740b338f43$
//

#include "libhoney_dll/ctocpp/find_handler_ctocpp.h"
#include "libhoney_dll/cpptoc/browser_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombFindHandlerCToCpp::OnFindResult(HoneycombRefPtr<HoneycombBrowser> browser,
                                        int identifier,
                                        int count,
                                        const HoneycombRect& selectionRect,
                                        int activeMatchOrdinal,
                                        bool finalUpdate) {
  shutdown_checker::AssertNotShutdown();

  honey_find_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_find_result)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }

  // Execute
  _struct->on_find_result(_struct, HoneycombBrowserCppToC::Wrap(browser), identifier,
                          count, &selectionRect, activeMatchOrdinal,
                          finalUpdate);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombFindHandlerCToCpp::HoneycombFindHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombFindHandlerCToCpp::~HoneycombFindHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_find_handler_t*
HoneycombCToCppRefCounted<HoneycombFindHandlerCToCpp, HoneycombFindHandler, honey_find_handler_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombFindHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombFindHandlerCToCpp,
                                   HoneycombFindHandler,
                                   honey_find_handler_t>::kWrapperType =
    WT_FIND_HANDLER;
