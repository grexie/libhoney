// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=587149e6f5d7d1dd1200f6ce7dd7294da82417cf$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_WAITABLE_EVENT_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_WAITABLE_EVENT_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_waitable_event_capi.h"
#include "include/honey_waitable_event.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombWaitableEventCToCpp
    : public HoneycombCToCppRefCounted<HoneycombWaitableEventCToCpp,
                                 HoneycombWaitableEvent,
                                 honey_waitable_event_t> {
 public:
  HoneycombWaitableEventCToCpp();
  virtual ~HoneycombWaitableEventCToCpp();

  // HoneycombWaitableEvent methods.
  void Reset() override;
  void Signal() override;
  bool IsSignaled() override;
  void Wait() override;
  bool TimedWait(int64_t max_ms) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_WAITABLE_EVENT_CTOCPP_H_
