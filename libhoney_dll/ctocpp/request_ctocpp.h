// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=cede9199ca4b019787a67fe4bc2cb739759f3cd6$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_request_capi.h"
#include "include/honey_request.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombRequestCToCpp
    : public HoneycombCToCppRefCounted<HoneycombRequestCToCpp, HoneycombRequest, honey_request_t> {
 public:
  HoneycombRequestCToCpp();
  virtual ~HoneycombRequestCToCpp();

  // HoneycombRequest methods.
  bool IsReadOnly() override;
  HoneycombString GetURL() override;
  void SetURL(const HoneycombString& url) override;
  HoneycombString GetMethod() override;
  void SetMethod(const HoneycombString& method) override;
  void SetReferrer(const HoneycombString& referrer_url,
                   ReferrerPolicy policy) override;
  HoneycombString GetReferrerURL() override;
  ReferrerPolicy GetReferrerPolicy() override;
  HoneycombRefPtr<HoneycombPostData> GetPostData() override;
  void SetPostData(HoneycombRefPtr<HoneycombPostData> postData) override;
  void GetHeaderMap(HeaderMap& headerMap) override;
  void SetHeaderMap(const HeaderMap& headerMap) override;
  HoneycombString GetHeaderByName(const HoneycombString& name) override;
  void SetHeaderByName(const HoneycombString& name,
                       const HoneycombString& value,
                       bool overwrite) override;
  void Set(const HoneycombString& url,
           const HoneycombString& method,
           HoneycombRefPtr<HoneycombPostData> postData,
           const HeaderMap& headerMap) override;
  int GetFlags() override;
  void SetFlags(int flags) override;
  HoneycombString GetFirstPartyForCookies() override;
  void SetFirstPartyForCookies(const HoneycombString& url) override;
  ResourceType GetResourceType() override;
  TransitionType GetTransitionType() override;
  uint64_t GetIdentifier() override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_CTOCPP_H_
