// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c23c4882077e50ffcf64425b3a5476ad3cfb9cb8$
//

#include "libhoney_dll/ctocpp/download_image_callback_ctocpp.h"
#include "libhoney_dll/cpptoc/image_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombDownloadImageCallbackCToCpp::OnDownloadImageFinished(
    const HoneycombString& image_url,
    int http_status_code,
    HoneycombRefPtr<HoneycombImage> image) {
  shutdown_checker::AssertNotShutdown();

  honey_download_image_callback_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_download_image_finished)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: image_url; type: string_byref_const
  DCHECK(!image_url.empty());
  if (image_url.empty()) {
    return;
  }
  // Unverified params: image

  // Execute
  _struct->on_download_image_finished(_struct, image_url.GetStruct(),
                                      http_status_code,
                                      HoneycombImageCppToC::Wrap(image));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombDownloadImageCallbackCToCpp::HoneycombDownloadImageCallbackCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombDownloadImageCallbackCToCpp::~HoneycombDownloadImageCallbackCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_download_image_callback_t* HoneycombCToCppRefCounted<
    HoneycombDownloadImageCallbackCToCpp,
    HoneycombDownloadImageCallback,
    honey_download_image_callback_t>::UnwrapDerived(HoneycombWrapperType type,
                                                  HoneycombDownloadImageCallback* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombDownloadImageCallbackCToCpp,
                        HoneycombDownloadImageCallback,
                        honey_download_image_callback_t>::kWrapperType =
        WT_DOWNLOAD_IMAGE_CALLBACK;
