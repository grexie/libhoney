// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=648f3d66272798ab00f7a97d33126aef193d5fa5$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_RESOLVE_CALLBACK_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_RESOLVE_CALLBACK_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include <vector>
#include "include/capi/honey_request_context_capi.h"
#include "include/capi/honey_request_context_handler_capi.h"
#include "include/capi/honey_scheme_capi.h"
#include "include/honey_request_context.h"
#include "include/honey_request_context_handler.h"
#include "include/honey_scheme.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombResolveCallbackCToCpp
    : public HoneycombCToCppRefCounted<HoneycombResolveCallbackCToCpp,
                                 HoneycombResolveCallback,
                                 honey_resolve_callback_t> {
 public:
  HoneycombResolveCallbackCToCpp();
  virtual ~HoneycombResolveCallbackCToCpp();

  // HoneycombResolveCallback methods.
  void OnResolveCompleted(honey_errorcode_t result,
                          const std::vector<HoneycombString>& resolved_ips) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_RESOLVE_CALLBACK_CTOCPP_H_
