// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=aec8ab7d90938c62b52faa199823912b3cbc0b11$
//

#include "libhoney_dll/ctocpp/cookie_visitor_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombCookieVisitorCToCpp::Visit(const HoneycombCookie& cookie,
                                   int count,
                                   int total,
                                   bool& deleteCookie) {
  shutdown_checker::AssertNotShutdown();

  honey_cookie_visitor_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, visit)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: deleteCookie; type: bool_byref
  int deleteCookieInt = deleteCookie;

  // Execute
  int _retval =
      _struct->visit(_struct, &cookie, count, total, &deleteCookieInt);

  // Restore param:deleteCookie; type: bool_byref
  deleteCookie = deleteCookieInt ? true : false;

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombCookieVisitorCToCpp::HoneycombCookieVisitorCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombCookieVisitorCToCpp::~HoneycombCookieVisitorCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_cookie_visitor_t*
HoneycombCToCppRefCounted<HoneycombCookieVisitorCToCpp,
                    HoneycombCookieVisitor,
                    honey_cookie_visitor_t>::UnwrapDerived(HoneycombWrapperType type,
                                                         HoneycombCookieVisitor* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombCookieVisitorCToCpp,
                                   HoneycombCookieVisitor,
                                   honey_cookie_visitor_t>::kWrapperType =
    WT_COOKIE_VISITOR;
