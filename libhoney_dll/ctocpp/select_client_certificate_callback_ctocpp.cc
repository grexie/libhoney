// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=626530c59232a37a7f7a744637d11875a7d0d0f7$
//

#include "libhoney_dll/ctocpp/select_client_certificate_callback_ctocpp.h"
#include "libhoney_dll/ctocpp/x509certificate_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombSelectClientCertificateCallbackCToCpp::Select(
    HoneycombRefPtr<HoneycombX509Certificate> cert) {
  shutdown_checker::AssertNotShutdown();

  honey_select_client_certificate_callback_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, select)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: cert

  // Execute
  _struct->select(_struct, HoneycombX509CertificateCToCpp::Unwrap(cert));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombSelectClientCertificateCallbackCToCpp::
    HoneycombSelectClientCertificateCallbackCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombSelectClientCertificateCallbackCToCpp::
    ~HoneycombSelectClientCertificateCallbackCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_select_client_certificate_callback_t*
HoneycombCToCppRefCounted<HoneycombSelectClientCertificateCallbackCToCpp,
                    HoneycombSelectClientCertificateCallback,
                    honey_select_client_certificate_callback_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombSelectClientCertificateCallback* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<
    HoneycombSelectClientCertificateCallbackCToCpp,
    HoneycombSelectClientCertificateCallback,
    honey_select_client_certificate_callback_t>::kWrapperType =
    WT_SELECT_CLIENT_CERTIFICATE_CALLBACK;
