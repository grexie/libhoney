// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=976fbf502a9f2d21ad92b3c64d3ca8d414f9869c$
//

#include "libhoney_dll/ctocpp/audio_handler_ctocpp.h"
#include "libhoney_dll/cpptoc/browser_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombAudioHandlerCToCpp::GetAudioParameters(HoneycombRefPtr<HoneycombBrowser> browser,
                                               HoneycombAudioParameters& params) {
  shutdown_checker::AssertNotShutdown();

  honey_audio_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_audio_parameters)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->get_audio_parameters(
      _struct, HoneycombBrowserCppToC::Wrap(browser), &params);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombAudioHandlerCToCpp::OnAudioStreamStarted(
    HoneycombRefPtr<HoneycombBrowser> browser,
    const HoneycombAudioParameters& params,
    int channels) {
  shutdown_checker::AssertNotShutdown();

  honey_audio_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_audio_stream_started)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }

  // Execute
  _struct->on_audio_stream_started(_struct, HoneycombBrowserCppToC::Wrap(browser),
                                   &params, channels);
}

NO_SANITIZE("cfi-icall")
void HoneycombAudioHandlerCToCpp::OnAudioStreamPacket(HoneycombRefPtr<HoneycombBrowser> browser,
                                                const float** data,
                                                int frames,
                                                int64_t pts) {
  shutdown_checker::AssertNotShutdown();

  honey_audio_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_audio_stream_packet)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }
  // Verify param: data; type: simple_byaddr
  DCHECK(data);
  if (!data) {
    return;
  }

  // Execute
  _struct->on_audio_stream_packet(_struct, HoneycombBrowserCppToC::Wrap(browser),
                                  data, frames, pts);
}

NO_SANITIZE("cfi-icall")
void HoneycombAudioHandlerCToCpp::OnAudioStreamStopped(
    HoneycombRefPtr<HoneycombBrowser> browser) {
  shutdown_checker::AssertNotShutdown();

  honey_audio_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_audio_stream_stopped)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }

  // Execute
  _struct->on_audio_stream_stopped(_struct, HoneycombBrowserCppToC::Wrap(browser));
}

NO_SANITIZE("cfi-icall")
void HoneycombAudioHandlerCToCpp::OnAudioStreamError(HoneycombRefPtr<HoneycombBrowser> browser,
                                               const HoneycombString& message) {
  shutdown_checker::AssertNotShutdown();

  honey_audio_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_audio_stream_error)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }
  // Verify param: message; type: string_byref_const
  DCHECK(!message.empty());
  if (message.empty()) {
    return;
  }

  // Execute
  _struct->on_audio_stream_error(_struct, HoneycombBrowserCppToC::Wrap(browser),
                                 message.GetStruct());
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombAudioHandlerCToCpp::HoneycombAudioHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombAudioHandlerCToCpp::~HoneycombAudioHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_audio_handler_t*
HoneycombCToCppRefCounted<HoneycombAudioHandlerCToCpp,
                    HoneycombAudioHandler,
                    honey_audio_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                                        HoneycombAudioHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombAudioHandlerCToCpp,
                                   HoneycombAudioHandler,
                                   honey_audio_handler_t>::kWrapperType =
    WT_AUDIO_HANDLER;
