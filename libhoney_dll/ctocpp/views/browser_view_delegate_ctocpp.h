// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=2157bfb760455bcd97d4e30eba9db474c7b3cabd$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_VIEWS_BROWSER_VIEW_DELEGATE_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_VIEWS_BROWSER_VIEW_DELEGATE_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_browser_capi.h"
#include "include/capi/views/honey_browser_view_capi.h"
#include "include/capi/views/honey_browser_view_delegate_capi.h"
#include "include/honey_browser.h"
#include "include/views/honey_browser_view.h"
#include "include/views/honey_browser_view_delegate.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombBrowserViewDelegateCToCpp
    : public HoneycombCToCppRefCounted<HoneycombBrowserViewDelegateCToCpp,
                                 HoneycombBrowserViewDelegate,
                                 honey_browser_view_delegate_t> {
 public:
  HoneycombBrowserViewDelegateCToCpp();
  virtual ~HoneycombBrowserViewDelegateCToCpp();

  // HoneycombBrowserViewDelegate methods.
  void OnBrowserCreated(HoneycombRefPtr<HoneycombBrowserView> browser_view,
                        HoneycombRefPtr<HoneycombBrowser> browser) override;
  void OnBrowserDestroyed(HoneycombRefPtr<HoneycombBrowserView> browser_view,
                          HoneycombRefPtr<HoneycombBrowser> browser) override;
  HoneycombRefPtr<HoneycombBrowserViewDelegate> GetDelegateForPopupBrowserView(
      HoneycombRefPtr<HoneycombBrowserView> browser_view,
      const HoneycombBrowserSettings& settings,
      HoneycombRefPtr<HoneycombClient> client,
      bool is_devtools) override;
  bool OnPopupBrowserViewCreated(HoneycombRefPtr<HoneycombBrowserView> browser_view,
                                 HoneycombRefPtr<HoneycombBrowserView> popup_browser_view,
                                 bool is_devtools) override;
  ChromeToolbarType GetChromeToolbarType(
      HoneycombRefPtr<HoneycombBrowserView> browser_view) override;
  bool UseFramelessWindowForPictureInPicture(
      HoneycombRefPtr<HoneycombBrowserView> browser_view) override;
  bool OnGestureCommand(HoneycombRefPtr<HoneycombBrowserView> browser_view,
                        honey_gesture_command_t gesture_command) override;

  // HoneycombViewDelegate methods.
  HoneycombSize GetPreferredSize(HoneycombRefPtr<HoneycombView> view) override;
  HoneycombSize GetMinimumSize(HoneycombRefPtr<HoneycombView> view) override;
  HoneycombSize GetMaximumSize(HoneycombRefPtr<HoneycombView> view) override;
  int GetHeightForWidth(HoneycombRefPtr<HoneycombView> view, int width) override;
  void OnParentViewChanged(HoneycombRefPtr<HoneycombView> view,
                           bool added,
                           HoneycombRefPtr<HoneycombView> parent) override;
  void OnChildViewChanged(HoneycombRefPtr<HoneycombView> view,
                          bool added,
                          HoneycombRefPtr<HoneycombView> child) override;
  void OnWindowChanged(HoneycombRefPtr<HoneycombView> view, bool added) override;
  void OnLayoutChanged(HoneycombRefPtr<HoneycombView> view,
                       const HoneycombRect& new_bounds) override;
  void OnFocus(HoneycombRefPtr<HoneycombView> view) override;
  void OnBlur(HoneycombRefPtr<HoneycombView> view) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_VIEWS_BROWSER_VIEW_DELEGATE_CTOCPP_H_
