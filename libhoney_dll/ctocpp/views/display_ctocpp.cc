// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d53ce4c040c4839540a656901efd75e55720de98$
//

#include "libhoney_dll/ctocpp/views/display_ctocpp.h"
#include <algorithm>
#include "libhoney_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombDisplay> HoneycombDisplay::GetPrimaryDisplay() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_display_t* _retval = honey_display_get_primary();

  // Return type: refptr_same
  return HoneycombDisplayCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDisplay> HoneycombDisplay::GetDisplayNearestPoint(
    const HoneycombPoint& point,
    bool input_pixel_coords) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_display_t* _retval =
      honey_display_get_nearest_point(&point, input_pixel_coords);

  // Return type: refptr_same
  return HoneycombDisplayCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDisplay> HoneycombDisplay::GetDisplayMatchingBounds(
    const HoneycombRect& bounds,
    bool input_pixel_coords) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_display_t* _retval =
      honey_display_get_matching_bounds(&bounds, input_pixel_coords);

  // Return type: refptr_same
  return HoneycombDisplayCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") size_t HoneycombDisplay::GetDisplayCount() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = honey_display_get_count();

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombDisplay::GetAllDisplays(std::vector<HoneycombRefPtr<HoneycombDisplay>>& displays) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: displays; type: refptr_vec_same_byref
  size_t displaysSize = displays.size();
  size_t displaysCount = std::max(GetDisplayCount(), displaysSize);
  honey_display_t** displaysList = NULL;
  if (displaysCount > 0) {
    displaysList = new honey_display_t*[displaysCount];
    DCHECK(displaysList);
    if (displaysList) {
      memset(displaysList, 0, sizeof(honey_display_t*) * displaysCount);
    }
    if (displaysList && displaysSize > 0) {
      for (size_t i = 0; i < displaysSize; ++i) {
        displaysList[i] = HoneycombDisplayCToCpp::Unwrap(displays[i]);
      }
    }
  }

  // Execute
  honey_display_get_alls(&displaysCount, displaysList);

  // Restore param:displays; type: refptr_vec_same_byref
  displays.clear();
  if (displaysCount > 0 && displaysList) {
    for (size_t i = 0; i < displaysCount; ++i) {
      displays.push_back(HoneycombDisplayCToCpp::Wrap(displaysList[i]));
    }
    delete[] displaysList;
  }
}

NO_SANITIZE("cfi-icall")
HoneycombPoint HoneycombDisplay::ConvertScreenPointToPixels(const HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_point_t _retval = honey_display_convert_screen_point_to_pixels(&point);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombPoint HoneycombDisplay::ConvertScreenPointFromPixels(const HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_point_t _retval = honey_display_convert_screen_point_from_pixels(&point);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRect HoneycombDisplay::ConvertScreenRectToPixels(const HoneycombRect& rect) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = honey_display_convert_screen_rect_to_pixels(&rect);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRect HoneycombDisplay::ConvertScreenRectFromPixels(const HoneycombRect& rect) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = honey_display_convert_screen_rect_from_pixels(&rect);

  // Return type: simple
  return _retval;
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") int64_t HoneycombDisplayCToCpp::GetID() {
  shutdown_checker::AssertNotShutdown();

  honey_display_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int64_t _retval = _struct->get_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") float HoneycombDisplayCToCpp::GetDeviceScaleFactor() {
  shutdown_checker::AssertNotShutdown();

  honey_display_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_device_scale_factor)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  float _retval = _struct->get_device_scale_factor(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombDisplayCToCpp::ConvertPointToPixels(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_display_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_pixels)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->convert_point_to_pixels(_struct, &point);
}

NO_SANITIZE("cfi-icall")
void HoneycombDisplayCToCpp::ConvertPointFromPixels(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_display_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_pixels)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->convert_point_from_pixels(_struct, &point);
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombDisplayCToCpp::GetBounds() {
  shutdown_checker::AssertNotShutdown();

  honey_display_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombDisplayCToCpp::GetWorkArea() {
  shutdown_checker::AssertNotShutdown();

  honey_display_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_work_area)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_work_area(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") int HoneycombDisplayCToCpp::GetRotation() {
  shutdown_checker::AssertNotShutdown();

  honey_display_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_rotation)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_rotation(_struct);

  // Return type: simple
  return _retval;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombDisplayCToCpp::HoneycombDisplayCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombDisplayCToCpp::~HoneycombDisplayCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_display_t*
HoneycombCToCppRefCounted<HoneycombDisplayCToCpp, HoneycombDisplay, honey_display_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombDisplay* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombDisplayCToCpp,
                                   HoneycombDisplay,
                                   honey_display_t>::kWrapperType = WT_DISPLAY;
