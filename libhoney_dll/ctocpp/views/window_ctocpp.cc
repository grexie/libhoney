// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=b6b0a2a563b475163aa71b20af6ec2ac8c1f0cae$
//

#include "libhoney_dll/ctocpp/views/window_ctocpp.h"
#include "libhoney_dll/cpptoc/views/view_delegate_cpptoc.h"
#include "libhoney_dll/cpptoc/views/window_delegate_cpptoc.h"
#include "libhoney_dll/ctocpp/image_ctocpp.h"
#include "libhoney_dll/ctocpp/menu_model_ctocpp.h"
#include "libhoney_dll/ctocpp/views/box_layout_ctocpp.h"
#include "libhoney_dll/ctocpp/views/browser_view_ctocpp.h"
#include "libhoney_dll/ctocpp/views/button_ctocpp.h"
#include "libhoney_dll/ctocpp/views/display_ctocpp.h"
#include "libhoney_dll/ctocpp/views/fill_layout_ctocpp.h"
#include "libhoney_dll/ctocpp/views/layout_ctocpp.h"
#include "libhoney_dll/ctocpp/views/overlay_controller_ctocpp.h"
#include "libhoney_dll/ctocpp/views/panel_ctocpp.h"
#include "libhoney_dll/ctocpp/views/scroll_view_ctocpp.h"
#include "libhoney_dll/ctocpp/views/textfield_ctocpp.h"
#include "libhoney_dll/ctocpp/views/view_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombWindow> HoneycombWindow::CreateTopLevelWindow(
    HoneycombRefPtr<HoneycombWindowDelegate> delegate) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: delegate

  // Execute
  honey_window_t* _retval =
      honey_window_create_top_level(HoneycombWindowDelegateCppToC::Wrap(delegate));

  // Return type: refptr_same
  return HoneycombWindowCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Show() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, show)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->show(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::ShowAsBrowserModalDialog(
    HoneycombRefPtr<HoneycombBrowserView> browser_view) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, show_as_browser_modal_dialog)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser_view; type: refptr_same
  DCHECK(browser_view.get());
  if (!browser_view.get()) {
    return;
  }

  // Execute
  _struct->show_as_browser_modal_dialog(
      _struct, HoneycombBrowserViewCToCpp::Unwrap(browser_view));
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Hide() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, hide)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->hide(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::CenterWindow(const HoneycombSize& size) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, center_window)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->center_window(_struct, &size);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Close() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, close)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->close(_struct);
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsClosed() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_closed)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_closed(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Activate() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, activate)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->activate(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Deactivate() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, deactivate)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->deactivate(_struct);
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsActive() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_active)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_active(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::BringToTop() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, bring_to_top)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->bring_to_top(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SetAlwaysOnTop(bool on_top) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_always_on_top)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_always_on_top(_struct, on_top);
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsAlwaysOnTop() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_always_on_top)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_always_on_top(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Maximize() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, maximize)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->maximize(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Minimize() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, minimize)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->minimize(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Restore() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, restore)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->restore(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SetFullscreen(bool fullscreen) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_fullscreen)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_fullscreen(_struct, fullscreen);
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsMaximized() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_maximized)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_maximized(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsMinimized() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_minimized)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_minimized(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsFullscreen() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_fullscreen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_fullscreen(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetTitle(const HoneycombString& title) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_title)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: title

  // Execute
  _struct->set_title(_struct, title.GetStruct());
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombWindowCToCpp::GetTitle() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_title)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_title(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetWindowIcon(HoneycombRefPtr<HoneycombImage> image) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_window_icon)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: image; type: refptr_same
  DCHECK(image.get());
  if (!image.get()) {
    return;
  }

  // Execute
  _struct->set_window_icon(_struct, HoneycombImageCToCpp::Unwrap(image));
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombImage> HoneycombWindowCToCpp::GetWindowIcon() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_window_icon)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_image_t* _retval = _struct->get_window_icon(_struct);

  // Return type: refptr_same
  return HoneycombImageCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetWindowAppIcon(HoneycombRefPtr<HoneycombImage> image) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_window_app_icon)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: image; type: refptr_same
  DCHECK(image.get());
  if (!image.get()) {
    return;
  }

  // Execute
  _struct->set_window_app_icon(_struct, HoneycombImageCToCpp::Unwrap(image));
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombImage> HoneycombWindowCToCpp::GetWindowAppIcon() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_window_app_icon)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_image_t* _retval = _struct->get_window_app_icon(_struct);

  // Return type: refptr_same
  return HoneycombImageCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombOverlayController> HoneycombWindowCToCpp::AddOverlayView(
    HoneycombRefPtr<HoneycombView> view,
    honey_docking_mode_t docking_mode) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_overlay_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return nullptr;
  }

  // Execute
  honey_overlay_controller_t* _retval = _struct->add_overlay_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), docking_mode);

  // Return type: refptr_same
  return HoneycombOverlayControllerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::ShowMenu(HoneycombRefPtr<HoneycombMenuModel> menu_model,
                               const HoneycombPoint& screen_point,
                               honey_menu_anchor_position_t anchor_position) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, show_menu)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: menu_model; type: refptr_same
  DCHECK(menu_model.get());
  if (!menu_model.get()) {
    return;
  }

  // Execute
  _struct->show_menu(_struct, HoneycombMenuModelCToCpp::Unwrap(menu_model),
                     &screen_point, anchor_position);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::CancelMenu() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, cancel_menu)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->cancel_menu(_struct);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombDisplay> HoneycombWindowCToCpp::GetDisplay() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_display)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_display_t* _retval = _struct->get_display(_struct);

  // Return type: refptr_same
  return HoneycombDisplayCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRect HoneycombWindowCToCpp::GetClientAreaBoundsInScreen() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_client_area_bounds_in_screen)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_client_area_bounds_in_screen(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetDraggableRegions(
    const std::vector<HoneycombDraggableRegion>& regions) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_draggable_regions)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: regions

  // Translate param: regions; type: simple_vec_byref_const
  const size_t regionsCount = regions.size();
  honey_draggable_region_t* regionsList = NULL;
  if (regionsCount > 0) {
    regionsList = new honey_draggable_region_t[regionsCount];
    DCHECK(regionsList);
    if (regionsList) {
      for (size_t i = 0; i < regionsCount; ++i) {
        regionsList[i] = regions[i];
      }
    }
  }

  // Execute
  _struct->set_draggable_regions(_struct, regionsCount, regionsList);

  // Restore param:regions; type: simple_vec_byref_const
  if (regionsList) {
    delete[] regionsList;
  }
}

NO_SANITIZE("cfi-icall") HoneycombWindowHandle HoneycombWindowCToCpp::GetWindowHandle() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_window_handle)) {
    return kNullWindowHandle;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_window_handle_t _retval = _struct->get_window_handle(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SendKeyPress(int key_code, uint32_t event_flags) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, send_key_press)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->send_key_press(_struct, key_code, event_flags);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SendMouseMove(int screen_x, int screen_y) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, send_mouse_move)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->send_mouse_move(_struct, screen_x, screen_y);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SendMouseEvents(honey_mouse_button_type_t button,
                                      bool mouse_down,
                                      bool mouse_up) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, send_mouse_events)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->send_mouse_events(_struct, button, mouse_down, mouse_up);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetAccelerator(int command_id,
                                     int key_code,
                                     bool shift_pressed,
                                     bool ctrl_pressed,
                                     bool alt_pressed) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_accelerator)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_accelerator(_struct, command_id, key_code, shift_pressed,
                           ctrl_pressed, alt_pressed);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::RemoveAccelerator(int command_id) {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, remove_accelerator)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->remove_accelerator(_struct, command_id);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::RemoveAllAccelerators() {
  shutdown_checker::AssertNotShutdown();

  honey_window_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, remove_all_accelerators)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->remove_all_accelerators(_struct);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombWindow> HoneycombWindowCToCpp::AsWindow() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_window)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_window_t* _retval = _struct->as_window(_struct);

  // Return type: refptr_same
  return HoneycombWindowCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombFillLayout> HoneycombWindowCToCpp::SetToFillLayout() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_to_fill_layout)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_fill_layout_t* _retval = _struct->set_to_fill_layout(_struct);

  // Return type: refptr_same
  return HoneycombFillLayoutCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBoxLayout> HoneycombWindowCToCpp::SetToBoxLayout(
    const HoneycombBoxLayoutSettings& settings) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_to_box_layout)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_box_layout_t* _retval = _struct->set_to_box_layout(_struct, &settings);

  // Return type: refptr_same
  return HoneycombBoxLayoutCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombLayout> HoneycombWindowCToCpp::GetLayout() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_layout)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_layout_t* _retval = _struct->get_layout(_struct);

  // Return type: refptr_same
  return HoneycombLayoutCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::Layout() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, layout)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->layout(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::AddChildView(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_child_view)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->add_child_view(_struct, HoneycombViewCToCpp::Unwrap(view));
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::AddChildViewAt(HoneycombRefPtr<HoneycombView> view, int index) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_child_view_at)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }
  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return;
  }

  // Execute
  _struct->add_child_view_at(_struct, HoneycombViewCToCpp::Unwrap(view), index);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::ReorderChildView(HoneycombRefPtr<HoneycombView> view, int index) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, reorder_child_view)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->reorder_child_view(_struct, HoneycombViewCToCpp::Unwrap(view), index);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::RemoveChildView(HoneycombRefPtr<HoneycombView> view) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, remove_child_view)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return;
  }

  // Execute
  _struct->remove_child_view(_struct, HoneycombViewCToCpp::Unwrap(view));
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::RemoveAllChildViews() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, remove_all_child_views)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->remove_all_child_views(_struct);
}

NO_SANITIZE("cfi-icall") size_t HoneycombWindowCToCpp::GetChildViewCount() {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_child_view_count)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_child_view_count(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombWindowCToCpp::GetChildViewAt(int index) {
  shutdown_checker::AssertNotShutdown();

  honey_panel_t* _struct = reinterpret_cast<honey_panel_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_child_view_at)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return nullptr;
  }

  // Execute
  honey_view_t* _retval = _struct->get_child_view_at(_struct, index);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBrowserView> HoneycombWindowCToCpp::AsBrowserView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_browser_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_browser_view_t* _retval = _struct->as_browser_view(_struct);

  // Return type: refptr_same
  return HoneycombBrowserViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombButton> HoneycombWindowCToCpp::AsButton() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_button)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_button_t* _retval = _struct->as_button(_struct);

  // Return type: refptr_same
  return HoneycombButtonCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombPanel> HoneycombWindowCToCpp::AsPanel() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_panel)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_panel_t* _retval = _struct->as_panel(_struct);

  // Return type: refptr_same
  return HoneycombPanelCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombScrollView> HoneycombWindowCToCpp::AsScrollView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_scroll_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_scroll_view_t* _retval = _struct->as_scroll_view(_struct);

  // Return type: refptr_same
  return HoneycombScrollViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombTextfield> HoneycombWindowCToCpp::AsTextfield() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_textfield)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_textfield_t* _retval = _struct->as_textfield(_struct);

  // Return type: refptr_same
  return HoneycombTextfieldCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombWindowCToCpp::GetTypeString() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_type_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_type_string(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombString HoneycombWindowCToCpp::ToString(bool include_children) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, to_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->to_string(_struct, include_children);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsAttached() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_attached)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_attached(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsSame(HoneycombRefPtr<HoneycombView> that) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombViewCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombViewDelegate> HoneycombWindowCToCpp::GetDelegate() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_delegate)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_delegate_t* _retval = _struct->get_delegate(_struct);

  // Return type: refptr_diff
  return HoneycombViewDelegateCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombWindow> HoneycombWindowCToCpp::GetWindow() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_window)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_window_t* _retval = _struct->get_window(_struct);

  // Return type: refptr_same
  return HoneycombWindowCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") int HoneycombWindowCToCpp::GetID() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SetID(int id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_id)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_id(_struct, id);
}

NO_SANITIZE("cfi-icall") int HoneycombWindowCToCpp::GetGroupID() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_group_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_group_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SetGroupID(int group_id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_group_id)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_group_id(_struct, group_id);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombView> HoneycombWindowCToCpp::GetParentView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_parent_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_parent_view(_struct);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombWindowCToCpp::GetViewForID(int id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_view_for_id)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_view_for_id(_struct, id);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetBounds(const HoneycombRect& bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_bounds)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_bounds(_struct, &bounds);
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombWindowCToCpp::GetBounds() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombWindowCToCpp::GetBoundsInScreen() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds_in_screen)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds_in_screen(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SetSize(const HoneycombSize& size) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_size(_struct, &size);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombWindowCToCpp::GetSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetPosition(const HoneycombPoint& position) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_position)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_position(_struct, &position);
}

NO_SANITIZE("cfi-icall") HoneycombPoint HoneycombWindowCToCpp::GetPosition() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_position)) {
    return HoneycombPoint();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_point_t _retval = _struct->get_position(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetInsets(const HoneycombInsets& insets) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_insets)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_insets(_struct, &insets);
}

NO_SANITIZE("cfi-icall") HoneycombInsets HoneycombWindowCToCpp::GetInsets() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_insets)) {
    return HoneycombInsets();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_insets_t _retval = _struct->get_insets(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombWindowCToCpp::GetPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_preferred_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_preferred_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SizeToPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, size_to_preferred_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->size_to_preferred_size(_struct);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombWindowCToCpp::GetMinimumSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_minimum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_minimum_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombWindowCToCpp::GetMaximumSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_maximum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_maximum_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") int HoneycombWindowCToCpp::GetHeightForWidth(int width) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_height_for_width)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_height_for_width(_struct, width);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::InvalidateLayout() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, invalidate_layout)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->invalidate_layout(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SetVisible(bool visible) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_visible)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_visible(_struct, visible);
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsVisible() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_visible(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsDrawn() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_drawn)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_drawn(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SetEnabled(bool enabled) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_enabled)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_enabled(_struct, enabled);
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsEnabled() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_enabled)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_enabled(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::SetFocusable(bool focusable) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_focusable)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_focusable(_struct, focusable);
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsFocusable() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_focusable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_focusable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombWindowCToCpp::IsAccessibilityFocusable() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_accessibility_focusable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_accessibility_focusable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombWindowCToCpp::RequestFocus() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, request_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->request_focus(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombWindowCToCpp::SetBackgroundColor(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_background_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_background_color(_struct, color);
}

NO_SANITIZE("cfi-icall") honey_color_t HoneycombWindowCToCpp::GetBackgroundColor() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_background_color)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_color_t _retval = _struct->get_background_color(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowCToCpp::ConvertPointToScreen(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_screen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_screen(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowCToCpp::ConvertPointFromScreen(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_screen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_screen(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowCToCpp::ConvertPointToWindow(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_window)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_window(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowCToCpp::ConvertPointFromWindow(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_window)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_window(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowCToCpp::ConvertPointToView(HoneycombRefPtr<HoneycombView> view,
                                         HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_view)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->convert_point_to_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombWindowCToCpp::ConvertPointFromView(HoneycombRefPtr<HoneycombView> view,
                                           HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_view)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->convert_point_from_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), &point);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombWindowCToCpp::HoneycombWindowCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombWindowCToCpp::~HoneycombWindowCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_window_t*
HoneycombCToCppRefCounted<HoneycombWindowCToCpp, HoneycombWindow, honey_window_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombWindow* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombWindowCToCpp, HoneycombWindow, honey_window_t>::
    kWrapperType = WT_WINDOW;
