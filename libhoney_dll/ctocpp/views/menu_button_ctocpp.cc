// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=456470ac4ea861866ebb9358f85e982ef1c73ef9$
//

#include "libhoney_dll/ctocpp/views/menu_button_ctocpp.h"
#include "libhoney_dll/cpptoc/views/menu_button_delegate_cpptoc.h"
#include "libhoney_dll/cpptoc/views/view_delegate_cpptoc.h"
#include "libhoney_dll/ctocpp/image_ctocpp.h"
#include "libhoney_dll/ctocpp/menu_model_ctocpp.h"
#include "libhoney_dll/ctocpp/views/browser_view_ctocpp.h"
#include "libhoney_dll/ctocpp/views/button_ctocpp.h"
#include "libhoney_dll/ctocpp/views/label_button_ctocpp.h"
#include "libhoney_dll/ctocpp/views/panel_ctocpp.h"
#include "libhoney_dll/ctocpp/views/scroll_view_ctocpp.h"
#include "libhoney_dll/ctocpp/views/textfield_ctocpp.h"
#include "libhoney_dll/ctocpp/views/view_ctocpp.h"
#include "libhoney_dll/ctocpp/views/window_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombMenuButton> HoneycombMenuButton::CreateMenuButton(
    HoneycombRefPtr<HoneycombMenuButtonDelegate> delegate,
    const HoneycombString& text) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: delegate; type: refptr_diff
  DCHECK(delegate.get());
  if (!delegate.get()) {
    return nullptr;
  }
  // Unverified params: text

  // Execute
  honey_menu_button_t* _retval = honey_menu_button_create(
      HoneycombMenuButtonDelegateCppToC::Wrap(delegate), text.GetStruct());

  // Return type: refptr_same
  return HoneycombMenuButtonCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::ShowMenu(HoneycombRefPtr<HoneycombMenuModel> menu_model,
                                   const HoneycombPoint& screen_point,
                                   honey_menu_anchor_position_t anchor_position) {
  shutdown_checker::AssertNotShutdown();

  honey_menu_button_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, show_menu)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: menu_model; type: refptr_same
  DCHECK(menu_model.get());
  if (!menu_model.get()) {
    return;
  }

  // Execute
  _struct->show_menu(_struct, HoneycombMenuModelCToCpp::Unwrap(menu_model),
                     &screen_point, anchor_position);
}

NO_SANITIZE("cfi-icall") void HoneycombMenuButtonCToCpp::TriggerMenu() {
  shutdown_checker::AssertNotShutdown();

  honey_menu_button_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, trigger_menu)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->trigger_menu(_struct);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombMenuButton> HoneycombMenuButtonCToCpp::AsMenuButton() {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_menu_button)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_menu_button_t* _retval = _struct->as_menu_button(_struct);

  // Return type: refptr_same
  return HoneycombMenuButtonCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetText(const HoneycombString& text) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: text; type: string_byref_const
  DCHECK(!text.empty());
  if (text.empty()) {
    return;
  }

  // Execute
  _struct->set_text(_struct, text.GetStruct());
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombMenuButtonCToCpp::GetText() {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_text)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_text(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetImage(honey_button_state_t button_state,
                                   HoneycombRefPtr<HoneycombImage> image) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_image)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: image

  // Execute
  _struct->set_image(_struct, button_state, HoneycombImageCToCpp::Unwrap(image));
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombImage> HoneycombMenuButtonCToCpp::GetImage(
    honey_button_state_t button_state) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_image)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_image_t* _retval = _struct->get_image(_struct, button_state);

  // Return type: refptr_same
  return HoneycombImageCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetTextColor(honey_button_state_t for_state,
                                       honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_text_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_text_color(_struct, for_state, color);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetEnabledTextColors(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_enabled_text_colors)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_enabled_text_colors(_struct, color);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetFontList(const HoneycombString& font_list) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_font_list)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: font_list; type: string_byref_const
  DCHECK(!font_list.empty());
  if (font_list.empty()) {
    return;
  }

  // Execute
  _struct->set_font_list(_struct, font_list.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetHorizontalAlignment(
    honey_horizontal_alignment_t alignment) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_horizontal_alignment)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_horizontal_alignment(_struct, alignment);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetMinimumSize(const HoneycombSize& size) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_minimum_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_minimum_size(_struct, &size);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetMaximumSize(const HoneycombSize& size) {
  shutdown_checker::AssertNotShutdown();

  honey_label_button_t* _struct =
      reinterpret_cast<honey_label_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_maximum_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_maximum_size(_struct, &size);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombLabelButton> HoneycombMenuButtonCToCpp::AsLabelButton() {
  shutdown_checker::AssertNotShutdown();

  honey_button_t* _struct = reinterpret_cast<honey_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_label_button)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_label_button_t* _retval = _struct->as_label_button(_struct);

  // Return type: refptr_same
  return HoneycombLabelButtonCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetState(honey_button_state_t state) {
  shutdown_checker::AssertNotShutdown();

  honey_button_t* _struct = reinterpret_cast<honey_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_state)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_state(_struct, state);
}

NO_SANITIZE("cfi-icall") honey_button_state_t HoneycombMenuButtonCToCpp::GetState() {
  shutdown_checker::AssertNotShutdown();

  honey_button_t* _struct = reinterpret_cast<honey_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_state)) {
    return HONEYCOMB_BUTTON_STATE_NORMAL;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_button_state_t _retval = _struct->get_state(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetInkDropEnabled(bool enabled) {
  shutdown_checker::AssertNotShutdown();

  honey_button_t* _struct = reinterpret_cast<honey_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_ink_drop_enabled)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_ink_drop_enabled(_struct, enabled);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetTooltipText(const HoneycombString& tooltip_text) {
  shutdown_checker::AssertNotShutdown();

  honey_button_t* _struct = reinterpret_cast<honey_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_tooltip_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: tooltip_text; type: string_byref_const
  DCHECK(!tooltip_text.empty());
  if (tooltip_text.empty()) {
    return;
  }

  // Execute
  _struct->set_tooltip_text(_struct, tooltip_text.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetAccessibleName(const HoneycombString& name) {
  shutdown_checker::AssertNotShutdown();

  honey_button_t* _struct = reinterpret_cast<honey_button_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_accessible_name)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return;
  }

  // Execute
  _struct->set_accessible_name(_struct, name.GetStruct());
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBrowserView> HoneycombMenuButtonCToCpp::AsBrowserView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_browser_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_browser_view_t* _retval = _struct->as_browser_view(_struct);

  // Return type: refptr_same
  return HoneycombBrowserViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombButton> HoneycombMenuButtonCToCpp::AsButton() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_button)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_button_t* _retval = _struct->as_button(_struct);

  // Return type: refptr_same
  return HoneycombButtonCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombPanel> HoneycombMenuButtonCToCpp::AsPanel() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_panel)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_panel_t* _retval = _struct->as_panel(_struct);

  // Return type: refptr_same
  return HoneycombPanelCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombScrollView> HoneycombMenuButtonCToCpp::AsScrollView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_scroll_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_scroll_view_t* _retval = _struct->as_scroll_view(_struct);

  // Return type: refptr_same
  return HoneycombScrollViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombTextfield> HoneycombMenuButtonCToCpp::AsTextfield() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, as_textfield)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_textfield_t* _retval = _struct->as_textfield(_struct);

  // Return type: refptr_same
  return HoneycombTextfieldCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombMenuButtonCToCpp::GetTypeString() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_type_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_type_string(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombString HoneycombMenuButtonCToCpp::ToString(bool include_children) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, to_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->to_string(_struct, include_children);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") bool HoneycombMenuButtonCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombMenuButtonCToCpp::IsAttached() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_attached)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_attached(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombMenuButtonCToCpp::IsSame(HoneycombRefPtr<HoneycombView> that) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombViewCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombViewDelegate> HoneycombMenuButtonCToCpp::GetDelegate() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_delegate)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_delegate_t* _retval = _struct->get_delegate(_struct);

  // Return type: refptr_diff
  return HoneycombViewDelegateCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombWindow> HoneycombMenuButtonCToCpp::GetWindow() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_window)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_window_t* _retval = _struct->get_window(_struct);

  // Return type: refptr_same
  return HoneycombWindowCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") int HoneycombMenuButtonCToCpp::GetID() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombMenuButtonCToCpp::SetID(int id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_id)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_id(_struct, id);
}

NO_SANITIZE("cfi-icall") int HoneycombMenuButtonCToCpp::GetGroupID() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_group_id)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_group_id(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombMenuButtonCToCpp::SetGroupID(int group_id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_group_id)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_group_id(_struct, group_id);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombMenuButtonCToCpp::GetParentView() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_parent_view)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_parent_view(_struct);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombView> HoneycombMenuButtonCToCpp::GetViewForID(int id) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_view_for_id)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_view_t* _retval = _struct->get_view_for_id(_struct, id);

  // Return type: refptr_same
  return HoneycombViewCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetBounds(const HoneycombRect& bounds) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_bounds)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_bounds(_struct, &bounds);
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombMenuButtonCToCpp::GetBounds() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombRect HoneycombMenuButtonCToCpp::GetBoundsInScreen() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bounds_in_screen)) {
    return HoneycombRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_rect_t _retval = _struct->get_bounds_in_screen(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetSize(const HoneycombSize& size) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_size(_struct, &size);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombMenuButtonCToCpp::GetSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetPosition(const HoneycombPoint& position) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_position)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_position(_struct, &position);
}

NO_SANITIZE("cfi-icall") HoneycombPoint HoneycombMenuButtonCToCpp::GetPosition() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_position)) {
    return HoneycombPoint();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_point_t _retval = _struct->get_position(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetInsets(const HoneycombInsets& insets) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_insets)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_insets(_struct, &insets);
}

NO_SANITIZE("cfi-icall") HoneycombInsets HoneycombMenuButtonCToCpp::GetInsets() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_insets)) {
    return HoneycombInsets();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_insets_t _retval = _struct->get_insets(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombMenuButtonCToCpp::GetPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_preferred_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_preferred_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombMenuButtonCToCpp::SizeToPreferredSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, size_to_preferred_size)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->size_to_preferred_size(_struct);
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombMenuButtonCToCpp::GetMinimumSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_minimum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_minimum_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombSize HoneycombMenuButtonCToCpp::GetMaximumSize() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_maximum_size)) {
    return HoneycombSize();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_size_t _retval = _struct->get_maximum_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") int HoneycombMenuButtonCToCpp::GetHeightForWidth(int width) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_height_for_width)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_height_for_width(_struct, width);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombMenuButtonCToCpp::InvalidateLayout() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, invalidate_layout)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->invalidate_layout(_struct);
}

NO_SANITIZE("cfi-icall") void HoneycombMenuButtonCToCpp::SetVisible(bool visible) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_visible)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_visible(_struct, visible);
}

NO_SANITIZE("cfi-icall") bool HoneycombMenuButtonCToCpp::IsVisible() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_visible(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombMenuButtonCToCpp::IsDrawn() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_drawn)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_drawn(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombMenuButtonCToCpp::SetEnabled(bool enabled) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_enabled)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_enabled(_struct, enabled);
}

NO_SANITIZE("cfi-icall") bool HoneycombMenuButtonCToCpp::IsEnabled() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_enabled)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_enabled(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetFocusable(bool focusable) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_focusable)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_focusable(_struct, focusable);
}

NO_SANITIZE("cfi-icall") bool HoneycombMenuButtonCToCpp::IsFocusable() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_focusable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_focusable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombMenuButtonCToCpp::IsAccessibilityFocusable() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_accessibility_focusable)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_accessibility_focusable(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") void HoneycombMenuButtonCToCpp::RequestFocus() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, request_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->request_focus(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombMenuButtonCToCpp::SetBackgroundColor(honey_color_t color) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_background_color)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_background_color(_struct, color);
}

NO_SANITIZE("cfi-icall") honey_color_t HoneycombMenuButtonCToCpp::GetBackgroundColor() {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_background_color)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_color_t _retval = _struct->get_background_color(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
bool HoneycombMenuButtonCToCpp::ConvertPointToScreen(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_screen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_screen(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombMenuButtonCToCpp::ConvertPointFromScreen(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_screen)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_screen(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombMenuButtonCToCpp::ConvertPointToWindow(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_window)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_to_window(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombMenuButtonCToCpp::ConvertPointFromWindow(HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_window)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->convert_point_from_window(_struct, &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombMenuButtonCToCpp::ConvertPointToView(HoneycombRefPtr<HoneycombView> view,
                                             HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_to_view)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->convert_point_to_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), &point);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombMenuButtonCToCpp::ConvertPointFromView(HoneycombRefPtr<HoneycombView> view,
                                               HoneycombPoint& point) {
  shutdown_checker::AssertNotShutdown();

  honey_view_t* _struct = reinterpret_cast<honey_view_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, convert_point_from_view)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: view; type: refptr_same
  DCHECK(view.get());
  if (!view.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->convert_point_from_view(
      _struct, HoneycombViewCToCpp::Unwrap(view), &point);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombMenuButtonCToCpp::HoneycombMenuButtonCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombMenuButtonCToCpp::~HoneycombMenuButtonCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_menu_button_t*
HoneycombCToCppRefCounted<HoneycombMenuButtonCToCpp, HoneycombMenuButton, honey_menu_button_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombMenuButton* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombMenuButtonCToCpp,
                                   HoneycombMenuButton,
                                   honey_menu_button_t>::kWrapperType =
    WT_MENU_BUTTON;
