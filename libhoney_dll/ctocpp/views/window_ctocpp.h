// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=2a7aaed7d4296e29dca74345cf2b2d4db221a738$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_VIEWS_WINDOW_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_VIEWS_WINDOW_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include <vector>
#include "include/capi/views/honey_browser_view_capi.h"
#include "include/capi/views/honey_window_capi.h"
#include "include/views/honey_browser_view.h"
#include "include/views/honey_window.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombWindowCToCpp
    : public HoneycombCToCppRefCounted<HoneycombWindowCToCpp, HoneycombWindow, honey_window_t> {
 public:
  HoneycombWindowCToCpp();
  virtual ~HoneycombWindowCToCpp();

  // HoneycombWindow methods.
  void Show() override;
  void ShowAsBrowserModalDialog(
      HoneycombRefPtr<HoneycombBrowserView> browser_view) override;
  void Hide() override;
  void CenterWindow(const HoneycombSize& size) override;
  void Close() override;
  bool IsClosed() override;
  void Activate() override;
  void Deactivate() override;
  bool IsActive() override;
  void BringToTop() override;
  void SetAlwaysOnTop(bool on_top) override;
  bool IsAlwaysOnTop() override;
  void Maximize() override;
  void Minimize() override;
  void Restore() override;
  void SetFullscreen(bool fullscreen) override;
  bool IsMaximized() override;
  bool IsMinimized() override;
  bool IsFullscreen() override;
  void SetTitle(const HoneycombString& title) override;
  HoneycombString GetTitle() override;
  void SetWindowIcon(HoneycombRefPtr<HoneycombImage> image) override;
  HoneycombRefPtr<HoneycombImage> GetWindowIcon() override;
  void SetWindowAppIcon(HoneycombRefPtr<HoneycombImage> image) override;
  HoneycombRefPtr<HoneycombImage> GetWindowAppIcon() override;
  HoneycombRefPtr<HoneycombOverlayController> AddOverlayView(
      HoneycombRefPtr<HoneycombView> view,
      honey_docking_mode_t docking_mode) override;
  void ShowMenu(HoneycombRefPtr<HoneycombMenuModel> menu_model,
                const HoneycombPoint& screen_point,
                honey_menu_anchor_position_t anchor_position) override;
  void CancelMenu() override;
  HoneycombRefPtr<HoneycombDisplay> GetDisplay() override;
  HoneycombRect GetClientAreaBoundsInScreen() override;
  void SetDraggableRegions(
      const std::vector<HoneycombDraggableRegion>& regions) override;
  HoneycombWindowHandle GetWindowHandle() override;
  void SendKeyPress(int key_code, uint32_t event_flags) override;
  void SendMouseMove(int screen_x, int screen_y) override;
  void SendMouseEvents(honey_mouse_button_type_t button,
                       bool mouse_down,
                       bool mouse_up) override;
  void SetAccelerator(int command_id,
                      int key_code,
                      bool shift_pressed,
                      bool ctrl_pressed,
                      bool alt_pressed) override;
  void RemoveAccelerator(int command_id) override;
  void RemoveAllAccelerators() override;

  // HoneycombPanel methods.
  HoneycombRefPtr<HoneycombWindow> AsWindow() override;
  HoneycombRefPtr<HoneycombFillLayout> SetToFillLayout() override;
  HoneycombRefPtr<HoneycombBoxLayout> SetToBoxLayout(
      const HoneycombBoxLayoutSettings& settings) override;
  HoneycombRefPtr<HoneycombLayout> GetLayout() override;
  void Layout() override;
  void AddChildView(HoneycombRefPtr<HoneycombView> view) override;
  void AddChildViewAt(HoneycombRefPtr<HoneycombView> view, int index) override;
  void ReorderChildView(HoneycombRefPtr<HoneycombView> view, int index) override;
  void RemoveChildView(HoneycombRefPtr<HoneycombView> view) override;
  void RemoveAllChildViews() override;
  size_t GetChildViewCount() override;
  HoneycombRefPtr<HoneycombView> GetChildViewAt(int index) override;

  // HoneycombView methods.
  HoneycombRefPtr<HoneycombBrowserView> AsBrowserView() override;
  HoneycombRefPtr<HoneycombButton> AsButton() override;
  HoneycombRefPtr<HoneycombPanel> AsPanel() override;
  HoneycombRefPtr<HoneycombScrollView> AsScrollView() override;
  HoneycombRefPtr<HoneycombTextfield> AsTextfield() override;
  HoneycombString GetTypeString() override;
  HoneycombString ToString(bool include_children) override;
  bool IsValid() override;
  bool IsAttached() override;
  bool IsSame(HoneycombRefPtr<HoneycombView> that) override;
  HoneycombRefPtr<HoneycombViewDelegate> GetDelegate() override;
  HoneycombRefPtr<HoneycombWindow> GetWindow() override;
  int GetID() override;
  void SetID(int id) override;
  int GetGroupID() override;
  void SetGroupID(int group_id) override;
  HoneycombRefPtr<HoneycombView> GetParentView() override;
  HoneycombRefPtr<HoneycombView> GetViewForID(int id) override;
  void SetBounds(const HoneycombRect& bounds) override;
  HoneycombRect GetBounds() override;
  HoneycombRect GetBoundsInScreen() override;
  void SetSize(const HoneycombSize& size) override;
  HoneycombSize GetSize() override;
  void SetPosition(const HoneycombPoint& position) override;
  HoneycombPoint GetPosition() override;
  void SetInsets(const HoneycombInsets& insets) override;
  HoneycombInsets GetInsets() override;
  HoneycombSize GetPreferredSize() override;
  void SizeToPreferredSize() override;
  HoneycombSize GetMinimumSize() override;
  HoneycombSize GetMaximumSize() override;
  int GetHeightForWidth(int width) override;
  void InvalidateLayout() override;
  void SetVisible(bool visible) override;
  bool IsVisible() override;
  bool IsDrawn() override;
  void SetEnabled(bool enabled) override;
  bool IsEnabled() override;
  void SetFocusable(bool focusable) override;
  bool IsFocusable() override;
  bool IsAccessibilityFocusable() override;
  void RequestFocus() override;
  void SetBackgroundColor(honey_color_t color) override;
  honey_color_t GetBackgroundColor() override;
  bool ConvertPointToScreen(HoneycombPoint& point) override;
  bool ConvertPointFromScreen(HoneycombPoint& point) override;
  bool ConvertPointToWindow(HoneycombPoint& point) override;
  bool ConvertPointFromWindow(HoneycombPoint& point) override;
  bool ConvertPointToView(HoneycombRefPtr<HoneycombView> view, HoneycombPoint& point) override;
  bool ConvertPointFromView(HoneycombRefPtr<HoneycombView> view, HoneycombPoint& point) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_VIEWS_WINDOW_CTOCPP_H_
