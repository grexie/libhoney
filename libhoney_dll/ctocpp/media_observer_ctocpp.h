// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=af2c09e08b7a2c8c89fdbe314c074fe0d7f825cf$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_MEDIA_OBSERVER_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_MEDIA_OBSERVER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include <vector>
#include "include/capi/honey_media_router_capi.h"
#include "include/honey_media_router.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombMediaObserverCToCpp
    : public HoneycombCToCppRefCounted<HoneycombMediaObserverCToCpp,
                                 HoneycombMediaObserver,
                                 honey_media_observer_t> {
 public:
  HoneycombMediaObserverCToCpp();
  virtual ~HoneycombMediaObserverCToCpp();

  // HoneycombMediaObserver methods.
  void OnSinks(const std::vector<HoneycombRefPtr<HoneycombMediaSink>>& sinks) override;
  void OnRoutes(const std::vector<HoneycombRefPtr<HoneycombMediaRoute>>& routes) override;
  void OnRouteStateChanged(HoneycombRefPtr<HoneycombMediaRoute> route,
                           ConnectionState state) override;
  void OnRouteMessageReceived(HoneycombRefPtr<HoneycombMediaRoute> route,
                              const void* message,
                              size_t message_size) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_MEDIA_OBSERVER_CTOCPP_H_
