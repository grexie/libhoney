// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=b6f011a6c26b4264084eb68dae0d63032c07013c$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_BINARY_VALUE_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_BINARY_VALUE_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_values_capi.h"
#include "include/honey_values.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombBinaryValueCToCpp : public HoneycombCToCppRefCounted<HoneycombBinaryValueCToCpp,
                                                        HoneycombBinaryValue,
                                                        honey_binary_value_t> {
 public:
  HoneycombBinaryValueCToCpp();
  virtual ~HoneycombBinaryValueCToCpp();

  // HoneycombBinaryValue methods.
  bool IsValid() override;
  bool IsOwned() override;
  bool IsSame(HoneycombRefPtr<HoneycombBinaryValue> that) override;
  bool IsEqual(HoneycombRefPtr<HoneycombBinaryValue> that) override;
  HoneycombRefPtr<HoneycombBinaryValue> Copy() override;
  size_t GetSize() override;
  size_t GetData(void* buffer, size_t buffer_size, size_t data_offset) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_BINARY_VALUE_CTOCPP_H_
