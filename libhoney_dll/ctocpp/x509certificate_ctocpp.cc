// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=e3ddef0c76d5f5a33d463751cb799235cad58bf4$
//

#include "libhoney_dll/ctocpp/x509certificate_ctocpp.h"
#include <algorithm>
#include "libhoney_dll/ctocpp/binary_value_ctocpp.h"
#include "libhoney_dll/ctocpp/x509cert_principal_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombX509CertPrincipal> HoneycombX509CertificateCToCpp::GetSubject() {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_subject)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_x509cert_principal_t* _retval = _struct->get_subject(_struct);

  // Return type: refptr_same
  return HoneycombX509CertPrincipalCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombX509CertPrincipal> HoneycombX509CertificateCToCpp::GetIssuer() {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_issuer)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_x509cert_principal_t* _retval = _struct->get_issuer(_struct);

  // Return type: refptr_same
  return HoneycombX509CertPrincipalCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombX509CertificateCToCpp::GetSerialNumber() {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_serial_number)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval = _struct->get_serial_number(_struct);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombBaseTime HoneycombX509CertificateCToCpp::GetValidStart() {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_valid_start)) {
    return HoneycombBaseTime();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_basetime_t _retval = _struct->get_valid_start(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombBaseTime HoneycombX509CertificateCToCpp::GetValidExpiry() {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_valid_expiry)) {
    return HoneycombBaseTime();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_basetime_t _retval = _struct->get_valid_expiry(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombX509CertificateCToCpp::GetDEREncoded() {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_derencoded)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval = _struct->get_derencoded(_struct);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombX509CertificateCToCpp::GetPEMEncoded() {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_pemencoded)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval = _struct->get_pemencoded(_struct);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") size_t HoneycombX509CertificateCToCpp::GetIssuerChainSize() {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_issuer_chain_size)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_issuer_chain_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombX509CertificateCToCpp::GetDEREncodedIssuerChain(
    IssuerChainBinaryList& chain) {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_derencoded_issuer_chain)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: chain; type: refptr_vec_same_byref
  size_t chainSize = chain.size();
  size_t chainCount = std::max(GetIssuerChainSize(), chainSize);
  honey_binary_value_t** chainList = NULL;
  if (chainCount > 0) {
    chainList = new honey_binary_value_t*[chainCount];
    DCHECK(chainList);
    if (chainList) {
      memset(chainList, 0, sizeof(honey_binary_value_t*) * chainCount);
    }
    if (chainList && chainSize > 0) {
      for (size_t i = 0; i < chainSize; ++i) {
        chainList[i] = HoneycombBinaryValueCToCpp::Unwrap(chain[i]);
      }
    }
  }

  // Execute
  _struct->get_derencoded_issuer_chain(_struct, &chainCount, chainList);

  // Restore param:chain; type: refptr_vec_same_byref
  chain.clear();
  if (chainCount > 0 && chainList) {
    for (size_t i = 0; i < chainCount; ++i) {
      chain.push_back(HoneycombBinaryValueCToCpp::Wrap(chainList[i]));
    }
    delete[] chainList;
  }
}

NO_SANITIZE("cfi-icall")
void HoneycombX509CertificateCToCpp::GetPEMEncodedIssuerChain(
    IssuerChainBinaryList& chain) {
  shutdown_checker::AssertNotShutdown();

  honey_x509certificate_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_pemencoded_issuer_chain)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: chain; type: refptr_vec_same_byref
  size_t chainSize = chain.size();
  size_t chainCount = std::max(GetIssuerChainSize(), chainSize);
  honey_binary_value_t** chainList = NULL;
  if (chainCount > 0) {
    chainList = new honey_binary_value_t*[chainCount];
    DCHECK(chainList);
    if (chainList) {
      memset(chainList, 0, sizeof(honey_binary_value_t*) * chainCount);
    }
    if (chainList && chainSize > 0) {
      for (size_t i = 0; i < chainSize; ++i) {
        chainList[i] = HoneycombBinaryValueCToCpp::Unwrap(chain[i]);
      }
    }
  }

  // Execute
  _struct->get_pemencoded_issuer_chain(_struct, &chainCount, chainList);

  // Restore param:chain; type: refptr_vec_same_byref
  chain.clear();
  if (chainCount > 0 && chainList) {
    for (size_t i = 0; i < chainCount; ++i) {
      chain.push_back(HoneycombBinaryValueCToCpp::Wrap(chainList[i]));
    }
    delete[] chainList;
  }
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombX509CertificateCToCpp::HoneycombX509CertificateCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombX509CertificateCToCpp::~HoneycombX509CertificateCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_x509certificate_t* HoneycombCToCppRefCounted<
    HoneycombX509CertificateCToCpp,
    HoneycombX509Certificate,
    honey_x509certificate_t>::UnwrapDerived(HoneycombWrapperType type,
                                          HoneycombX509Certificate* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombX509CertificateCToCpp,
                                   HoneycombX509Certificate,
                                   honey_x509certificate_t>::kWrapperType =
    WT_X509CERTIFICATE;
