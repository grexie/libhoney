// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d38b1cdd4e0df15235315e9efeb5c4ab3b92930b$
//

#include "libhoney_dll/ctocpp/scheme_registrar_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombSchemeRegistrarCToCpp::AddCustomScheme(const HoneycombString& scheme_name,
                                               int options) {
  honey_scheme_registrar_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_custom_scheme)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: scheme_name; type: string_byref_const
  DCHECK(!scheme_name.empty());
  if (scheme_name.empty()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->add_custom_scheme(_struct, scheme_name.GetStruct(), options);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombSchemeRegistrarCToCpp::HoneycombSchemeRegistrarCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombSchemeRegistrarCToCpp::~HoneycombSchemeRegistrarCToCpp() {}

template <>
honey_scheme_registrar_t* HoneycombCToCppScoped<
    HoneycombSchemeRegistrarCToCpp,
    HoneycombSchemeRegistrar,
    honey_scheme_registrar_t>::UnwrapDerivedOwn(HoneycombWrapperType type,
                                              HoneycombOwnPtr<HoneycombSchemeRegistrar> c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
honey_scheme_registrar_t* HoneycombCToCppScoped<
    HoneycombSchemeRegistrarCToCpp,
    HoneycombSchemeRegistrar,
    honey_scheme_registrar_t>::UnwrapDerivedRaw(HoneycombWrapperType type,
                                              HoneycombRawPtr<HoneycombSchemeRegistrar> c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppScoped<HoneycombSchemeRegistrarCToCpp,
                               HoneycombSchemeRegistrar,
                               honey_scheme_registrar_t>::kWrapperType =
    WT_SCHEME_REGISTRAR;
