// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=0fa4cd5767bcd31e0629bd625fb7e97811265fba$
//

#include "libhoney_dll/ctocpp/focus_handler_ctocpp.h"
#include "libhoney_dll/cpptoc/browser_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
void HoneycombFocusHandlerCToCpp::OnTakeFocus(HoneycombRefPtr<HoneycombBrowser> browser,
                                        bool next) {
  shutdown_checker::AssertNotShutdown();

  honey_focus_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_take_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }

  // Execute
  _struct->on_take_focus(_struct, HoneycombBrowserCppToC::Wrap(browser), next);
}

NO_SANITIZE("cfi-icall")
bool HoneycombFocusHandlerCToCpp::OnSetFocus(HoneycombRefPtr<HoneycombBrowser> browser,
                                       FocusSource source) {
  shutdown_checker::AssertNotShutdown();

  honey_focus_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_set_focus)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->on_set_focus(_struct, HoneycombBrowserCppToC::Wrap(browser), source);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombFocusHandlerCToCpp::OnGotFocus(HoneycombRefPtr<HoneycombBrowser> browser) {
  shutdown_checker::AssertNotShutdown();

  honey_focus_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_got_focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }

  // Execute
  _struct->on_got_focus(_struct, HoneycombBrowserCppToC::Wrap(browser));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombFocusHandlerCToCpp::HoneycombFocusHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombFocusHandlerCToCpp::~HoneycombFocusHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_focus_handler_t*
HoneycombCToCppRefCounted<HoneycombFocusHandlerCToCpp,
                    HoneycombFocusHandler,
                    honey_focus_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                                        HoneycombFocusHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombFocusHandlerCToCpp,
                                   HoneycombFocusHandler,
                                   honey_focus_handler_t>::kWrapperType =
    WT_FOCUS_HANDLER;
