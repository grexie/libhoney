// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=2351c980bcf0be831b2803207665595003a6ae9b$
//

#include "libhoney_dll/ctocpp/resource_bundle_ctocpp.h"
#include "libhoney_dll/ctocpp/binary_value_ctocpp.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombResourceBundle> HoneycombResourceBundle::GetGlobal() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_resource_bundle_t* _retval = honey_resource_bundle_get_global();

  // Return type: refptr_same
  return HoneycombResourceBundleCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombString HoneycombResourceBundleCToCpp::GetLocalizedString(int string_id) {
  honey_resource_bundle_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_localized_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval =
      _struct->get_localized_string(_struct, string_id);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombResourceBundleCToCpp::GetDataResource(
    int resource_id) {
  honey_resource_bundle_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_data_resource)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval =
      _struct->get_data_resource(_struct, resource_id);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombResourceBundleCToCpp::GetDataResourceForScale(
    int resource_id,
    ScaleFactor scale_factor) {
  honey_resource_bundle_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_data_resource_for_scale)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval =
      _struct->get_data_resource_for_scale(_struct, resource_id, scale_factor);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombResourceBundleCToCpp::HoneycombResourceBundleCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombResourceBundleCToCpp::~HoneycombResourceBundleCToCpp() {}

template <>
honey_resource_bundle_t* HoneycombCToCppRefCounted<
    HoneycombResourceBundleCToCpp,
    HoneycombResourceBundle,
    honey_resource_bundle_t>::UnwrapDerived(HoneycombWrapperType type,
                                          HoneycombResourceBundle* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombResourceBundleCToCpp,
                                   HoneycombResourceBundle,
                                   honey_resource_bundle_t>::kWrapperType =
    WT_RESOURCE_BUNDLE;
