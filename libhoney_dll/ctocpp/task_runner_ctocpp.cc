// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f058d18f988de0b2bbc131907080bdef50fe6290$
//

#include "libhoney_dll/ctocpp/task_runner_ctocpp.h"
#include "libhoney_dll/cpptoc/task_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombTaskRunner> HoneycombTaskRunner::GetForCurrentThread() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_task_runner_t* _retval = honey_task_runner_get_for_current_thread();

  // Return type: refptr_same
  return HoneycombTaskRunnerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombTaskRunner> HoneycombTaskRunner::GetForThread(HoneycombThreadId threadId) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_task_runner_t* _retval = honey_task_runner_get_for_thread(threadId);

  // Return type: refptr_same
  return HoneycombTaskRunnerCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombTaskRunnerCToCpp::IsSame(HoneycombRefPtr<HoneycombTaskRunner> that) {
  shutdown_checker::AssertNotShutdown();

  honey_task_runner_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombTaskRunnerCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombTaskRunnerCToCpp::BelongsToCurrentThread() {
  shutdown_checker::AssertNotShutdown();

  honey_task_runner_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, belongs_to_current_thread)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->belongs_to_current_thread(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTaskRunnerCToCpp::BelongsToThread(HoneycombThreadId threadId) {
  shutdown_checker::AssertNotShutdown();

  honey_task_runner_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, belongs_to_thread)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->belongs_to_thread(_struct, threadId);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTaskRunnerCToCpp::PostTask(HoneycombRefPtr<HoneycombTask> task) {
  shutdown_checker::AssertNotShutdown();

  honey_task_runner_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, post_task)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: task; type: refptr_diff
  DCHECK(task.get());
  if (!task.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->post_task(_struct, HoneycombTaskCppToC::Wrap(task));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombTaskRunnerCToCpp::PostDelayedTask(HoneycombRefPtr<HoneycombTask> task,
                                          int64_t delay_ms) {
  shutdown_checker::AssertNotShutdown();

  honey_task_runner_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, post_delayed_task)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: task; type: refptr_diff
  DCHECK(task.get());
  if (!task.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->post_delayed_task(_struct, HoneycombTaskCppToC::Wrap(task), delay_ms);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombTaskRunnerCToCpp::HoneycombTaskRunnerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombTaskRunnerCToCpp::~HoneycombTaskRunnerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_task_runner_t*
HoneycombCToCppRefCounted<HoneycombTaskRunnerCToCpp, HoneycombTaskRunner, honey_task_runner_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombTaskRunner* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombTaskRunnerCToCpp,
                                   HoneycombTaskRunner,
                                   honey_task_runner_t>::kWrapperType =
    WT_TASK_RUNNER;
