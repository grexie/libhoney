// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=feca0218f8ab6da39dcf3db81d3d3b36fcb7f27d$
//

#include "libhoney_dll/ctocpp/image_ctocpp.h"
#include "libhoney_dll/ctocpp/binary_value_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombImage> HoneycombImage::CreateImage() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_image_t* _retval = honey_image_create();

  // Return type: refptr_same
  return HoneycombImageCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombImageCToCpp::IsEmpty() {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_empty)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_empty(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombImageCToCpp::IsSame(HoneycombRefPtr<HoneycombImage> that) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombImageCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombImageCToCpp::AddBitmap(float scale_factor,
                               int pixel_width,
                               int pixel_height,
                               honey_color_type_t color_type,
                               honey_alpha_type_t alpha_type,
                               const void* pixel_data,
                               size_t pixel_data_size) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_bitmap)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: pixel_data; type: simple_byaddr
  DCHECK(pixel_data);
  if (!pixel_data) {
    return false;
  }

  // Execute
  int _retval =
      _struct->add_bitmap(_struct, scale_factor, pixel_width, pixel_height,
                          color_type, alpha_type, pixel_data, pixel_data_size);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombImageCToCpp::AddPNG(float scale_factor,
                            const void* png_data,
                            size_t png_data_size) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_png)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: png_data; type: simple_byaddr
  DCHECK(png_data);
  if (!png_data) {
    return false;
  }

  // Execute
  int _retval =
      _struct->add_png(_struct, scale_factor, png_data, png_data_size);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombImageCToCpp::AddJPEG(float scale_factor,
                             const void* jpeg_data,
                             size_t jpeg_data_size) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_jpeg)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: jpeg_data; type: simple_byaddr
  DCHECK(jpeg_data);
  if (!jpeg_data) {
    return false;
  }

  // Execute
  int _retval =
      _struct->add_jpeg(_struct, scale_factor, jpeg_data, jpeg_data_size);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") size_t HoneycombImageCToCpp::GetWidth() {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_width)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_width(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") size_t HoneycombImageCToCpp::GetHeight() {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_height)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_height(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
bool HoneycombImageCToCpp::HasRepresentation(float scale_factor) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_representation)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->has_representation(_struct, scale_factor);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombImageCToCpp::RemoveRepresentation(float scale_factor) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, remove_representation)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->remove_representation(_struct, scale_factor);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombImageCToCpp::GetRepresentationInfo(float scale_factor,
                                           float& actual_scale_factor,
                                           int& pixel_width,
                                           int& pixel_height) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_representation_info)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_representation_info(
      _struct, scale_factor, &actual_scale_factor, &pixel_width, &pixel_height);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombImageCToCpp::GetAsBitmap(
    float scale_factor,
    honey_color_type_t color_type,
    honey_alpha_type_t alpha_type,
    int& pixel_width,
    int& pixel_height) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_as_bitmap)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval =
      _struct->get_as_bitmap(_struct, scale_factor, color_type, alpha_type,
                             &pixel_width, &pixel_height);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombImageCToCpp::GetAsPNG(float scale_factor,
                                                   bool with_transparency,
                                                   int& pixel_width,
                                                   int& pixel_height) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_as_png)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval = _struct->get_as_png(
      _struct, scale_factor, with_transparency, &pixel_width, &pixel_height);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombImageCToCpp::GetAsJPEG(float scale_factor,
                                                    int quality,
                                                    int& pixel_width,
                                                    int& pixel_height) {
  shutdown_checker::AssertNotShutdown();

  honey_image_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_as_jpeg)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval = _struct->get_as_jpeg(
      _struct, scale_factor, quality, &pixel_width, &pixel_height);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombImageCToCpp::HoneycombImageCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombImageCToCpp::~HoneycombImageCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_image_t*
HoneycombCToCppRefCounted<HoneycombImageCToCpp, HoneycombImage, honey_image_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombImage* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType
    HoneycombCToCppRefCounted<HoneycombImageCToCpp, HoneycombImage, honey_image_t>::kWrapperType =
        WT_IMAGE;
