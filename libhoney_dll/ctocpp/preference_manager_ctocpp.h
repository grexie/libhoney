// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=89ee6916279697654c516137ee56f5cbef07e4c0$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_PREFERENCE_MANAGER_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_PREFERENCE_MANAGER_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_preference_capi.h"
#include "include/honey_preference.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombPreferenceManagerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombPreferenceManagerCToCpp,
                                 HoneycombPreferenceManager,
                                 honey_preference_manager_t> {
 public:
  HoneycombPreferenceManagerCToCpp();
  virtual ~HoneycombPreferenceManagerCToCpp();

  // HoneycombPreferenceManager methods.
  bool HasPreference(const HoneycombString& name) override;
  HoneycombRefPtr<HoneycombValue> GetPreference(const HoneycombString& name) override;
  HoneycombRefPtr<HoneycombDictionaryValue> GetAllPreferences(
      bool include_defaults) override;
  bool CanSetPreference(const HoneycombString& name) override;
  bool SetPreference(const HoneycombString& name,
                     HoneycombRefPtr<HoneycombValue> value,
                     HoneycombString& error) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_PREFERENCE_MANAGER_CTOCPP_H_
