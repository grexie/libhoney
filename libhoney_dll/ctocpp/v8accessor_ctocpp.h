// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=1d8a3afd0e6a0344a9c5f6e301b517e5f906c186$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_V8ACCESSOR_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_V8ACCESSOR_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_v8_capi.h"
#include "include/honey_v8.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombV8AccessorCToCpp : public HoneycombCToCppRefCounted<HoneycombV8AccessorCToCpp,
                                                       HoneycombV8Accessor,
                                                       honey_v8accessor_t> {
 public:
  HoneycombV8AccessorCToCpp();
  virtual ~HoneycombV8AccessorCToCpp();

  // HoneycombV8Accessor methods.
  bool Get(const HoneycombString& name,
           const HoneycombRefPtr<HoneycombV8Value> object,
           HoneycombRefPtr<HoneycombV8Value>& retval,
           HoneycombString& exception) override;
  bool Set(const HoneycombString& name,
           const HoneycombRefPtr<HoneycombV8Value> object,
           const HoneycombRefPtr<HoneycombV8Value> value,
           HoneycombString& exception) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_V8ACCESSOR_CTOCPP_H_
