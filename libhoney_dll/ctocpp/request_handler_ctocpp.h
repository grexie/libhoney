// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4f8f1876fa5ee304f9e4481212df662fa05da02d$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_HANDLER_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_HANDLER_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_request_handler_capi.h"
#include "include/honey_request_handler.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombRequestHandlerCToCpp
    : public HoneycombCToCppRefCounted<HoneycombRequestHandlerCToCpp,
                                 HoneycombRequestHandler,
                                 honey_request_handler_t> {
 public:
  HoneycombRequestHandlerCToCpp();
  virtual ~HoneycombRequestHandlerCToCpp();

  // HoneycombRequestHandler methods.
  bool OnBeforeBrowse(HoneycombRefPtr<HoneycombBrowser> browser,
                      HoneycombRefPtr<HoneycombFrame> frame,
                      HoneycombRefPtr<HoneycombRequest> request,
                      bool user_gesture,
                      bool is_redirect) override;
  bool OnOpenURLFromTab(HoneycombRefPtr<HoneycombBrowser> browser,
                        HoneycombRefPtr<HoneycombFrame> frame,
                        const HoneycombString& target_url,
                        WindowOpenDisposition target_disposition,
                        bool user_gesture) override;
  HoneycombRefPtr<HoneycombResourceRequestHandler> GetResourceRequestHandler(
      HoneycombRefPtr<HoneycombBrowser> browser,
      HoneycombRefPtr<HoneycombFrame> frame,
      HoneycombRefPtr<HoneycombRequest> request,
      bool is_navigation,
      bool is_download,
      const HoneycombString& request_initiator,
      bool& disable_default_handling) override;
  bool GetAuthCredentials(HoneycombRefPtr<HoneycombBrowser> browser,
                          const HoneycombString& origin_url,
                          bool isProxy,
                          const HoneycombString& host,
                          int port,
                          const HoneycombString& realm,
                          const HoneycombString& scheme,
                          HoneycombRefPtr<HoneycombAuthCallback> callback) override;
  bool OnCertificateError(HoneycombRefPtr<HoneycombBrowser> browser,
                          honey_errorcode_t cert_error,
                          const HoneycombString& request_url,
                          HoneycombRefPtr<HoneycombSSLInfo> ssl_info,
                          HoneycombRefPtr<HoneycombCallback> callback) override;
  bool OnSelectClientCertificate(
      HoneycombRefPtr<HoneycombBrowser> browser,
      bool isProxy,
      const HoneycombString& host,
      int port,
      const X509CertificateList& certificates,
      HoneycombRefPtr<HoneycombSelectClientCertificateCallback> callback) override;
  void OnRenderViewReady(HoneycombRefPtr<HoneycombBrowser> browser) override;
  void OnRenderProcessTerminated(HoneycombRefPtr<HoneycombBrowser> browser,
                                 TerminationStatus status) override;
  void OnDocumentAvailableInMainFrame(HoneycombRefPtr<HoneycombBrowser> browser) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_REQUEST_HANDLER_CTOCPP_H_
