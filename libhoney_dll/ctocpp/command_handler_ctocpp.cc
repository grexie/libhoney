// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f2eb90b2952e6958a01be325567b35d83c0643e6$
//

#include "libhoney_dll/ctocpp/command_handler_ctocpp.h"
#include "libhoney_dll/cpptoc/browser_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombCommandHandlerCToCpp::OnChromeCommand(
    HoneycombRefPtr<HoneycombBrowser> browser,
    int command_id,
    honey_window_open_disposition_t disposition) {
  shutdown_checker::AssertNotShutdown();

  honey_command_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_chrome_command)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->on_chrome_command(
      _struct, HoneycombBrowserCppToC::Wrap(browser), command_id, disposition);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombCommandHandlerCToCpp::IsChromeAppMenuItemVisible(
    HoneycombRefPtr<HoneycombBrowser> browser,
    int command_id) {
  shutdown_checker::AssertNotShutdown();

  honey_command_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_chrome_app_menu_item_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_chrome_app_menu_item_visible(
      _struct, HoneycombBrowserCppToC::Wrap(browser), command_id);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombCommandHandlerCToCpp::IsChromeAppMenuItemEnabled(
    HoneycombRefPtr<HoneycombBrowser> browser,
    int command_id) {
  shutdown_checker::AssertNotShutdown();

  honey_command_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_chrome_app_menu_item_enabled)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_chrome_app_menu_item_enabled(
      _struct, HoneycombBrowserCppToC::Wrap(browser), command_id);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombCommandHandlerCToCpp::IsChromePageActionIconVisible(
    honey_chrome_page_action_icon_type_t icon_type) {
  shutdown_checker::AssertNotShutdown();

  honey_command_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_chrome_page_action_icon_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_chrome_page_action_icon_visible(_struct, icon_type);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombCommandHandlerCToCpp::IsChromeToolbarButtonVisible(
    honey_chrome_toolbar_button_type_t button_type) {
  shutdown_checker::AssertNotShutdown();

  honey_command_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_chrome_toolbar_button_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_chrome_toolbar_button_visible(_struct, button_type);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombCommandHandlerCToCpp::HoneycombCommandHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombCommandHandlerCToCpp::~HoneycombCommandHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_command_handler_t* HoneycombCToCppRefCounted<
    HoneycombCommandHandlerCToCpp,
    HoneycombCommandHandler,
    honey_command_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                          HoneycombCommandHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombCommandHandlerCToCpp,
                                   HoneycombCommandHandler,
                                   honey_command_handler_t>::kWrapperType =
    WT_COMMAND_HANDLER;
