// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=7e4a0a11aab2b3b4cfedb6cd6efe099b154a9063$
//

#include "libhoney_dll/ctocpp/write_handler_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
size_t HoneycombWriteHandlerCToCpp::Write(const void* ptr, size_t size, size_t n) {
  shutdown_checker::AssertNotShutdown();

  honey_write_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, write)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: ptr; type: simple_byaddr
  DCHECK(ptr);
  if (!ptr) {
    return 0;
  }

  // Execute
  size_t _retval = _struct->write(_struct, ptr, size, n);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
int HoneycombWriteHandlerCToCpp::Seek(int64_t offset, int whence) {
  shutdown_checker::AssertNotShutdown();

  honey_write_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, seek)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->seek(_struct, offset, whence);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") int64_t HoneycombWriteHandlerCToCpp::Tell() {
  shutdown_checker::AssertNotShutdown();

  honey_write_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, tell)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int64_t _retval = _struct->tell(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") int HoneycombWriteHandlerCToCpp::Flush() {
  shutdown_checker::AssertNotShutdown();

  honey_write_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, flush)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->flush(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") bool HoneycombWriteHandlerCToCpp::MayBlock() {
  shutdown_checker::AssertNotShutdown();

  honey_write_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, may_block)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->may_block(_struct);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombWriteHandlerCToCpp::HoneycombWriteHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombWriteHandlerCToCpp::~HoneycombWriteHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_write_handler_t*
HoneycombCToCppRefCounted<HoneycombWriteHandlerCToCpp,
                    HoneycombWriteHandler,
                    honey_write_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                                        HoneycombWriteHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombWriteHandlerCToCpp,
                                   HoneycombWriteHandler,
                                   honey_write_handler_t>::kWrapperType =
    WT_WRITE_HANDLER;
