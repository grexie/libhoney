// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=459c331b0c02f55c4b700761ad2132d7320fd467$
//

#include "libhoney_dll/ctocpp/v8value_ctocpp.h"
#include "libhoney_dll/cpptoc/base_ref_counted_cpptoc.h"
#include "libhoney_dll/cpptoc/v8accessor_cpptoc.h"
#include "libhoney_dll/cpptoc/v8array_buffer_release_callback_cpptoc.h"
#include "libhoney_dll/cpptoc/v8handler_cpptoc.h"
#include "libhoney_dll/cpptoc/v8interceptor_cpptoc.h"
#include "libhoney_dll/ctocpp/v8context_ctocpp.h"
#include "libhoney_dll/ctocpp/v8exception_ctocpp.h"
#include "libhoney_dll/transfer_util.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateUndefined() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_undefined();

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateNull() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_null();

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateBool(bool value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_bool(value);

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateInt(int32_t value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_int(value);

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateUInt(uint32_t value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_uint(value);

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateDouble(double value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_double(value);

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateDate(HoneycombBaseTime date) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_date(date);

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateString(const HoneycombString& value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: value

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_string(value.GetStruct());

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateObject(
    HoneycombRefPtr<HoneycombV8Accessor> accessor,
    HoneycombRefPtr<HoneycombV8Interceptor> interceptor) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: accessor, interceptor

  // Execute
  honey_v8value_t* _retval =
      honey_v8value_create_object(HoneycombV8AccessorCppToC::Wrap(accessor),
                                HoneycombV8InterceptorCppToC::Wrap(interceptor));

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateArray(int length) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_array(length);

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateArrayBuffer(
    void* buffer,
    size_t length,
    HoneycombRefPtr<HoneycombV8ArrayBufferReleaseCallback> release_callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: buffer; type: simple_byaddr
  DCHECK(buffer);
  if (!buffer) {
    return nullptr;
  }
  // Verify param: release_callback; type: refptr_diff
  DCHECK(release_callback.get());
  if (!release_callback.get()) {
    return nullptr;
  }

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_array_buffer(
      buffer, length,
      HoneycombV8ArrayBufferReleaseCallbackCppToC::Wrap(release_callback));

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreateFunction(
    const HoneycombString& name,
    HoneycombRefPtr<HoneycombV8Handler> handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return nullptr;
  }
  // Verify param: handler; type: refptr_diff
  DCHECK(handler.get());
  if (!handler.get()) {
    return nullptr;
  }

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_function(
      name.GetStruct(), HoneycombV8HandlerCppToC::Wrap(handler));

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombV8Value> HoneycombV8Value::CreatePromise() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8value_t* _retval = honey_v8value_create_promise();

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsValid() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsUndefined() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_undefined)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_undefined(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsNull() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_null)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_null(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsBool() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_bool(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsInt() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_int)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_int(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsUInt() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_uint)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_uint(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsDouble() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_double)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_double(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsDate() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_date)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_date(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsString() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_string)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_string(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsObject() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_object)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_object(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsArray() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_array)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_array(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsArrayBuffer() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_array_buffer)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_array_buffer(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsFunction() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_function)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_function(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsPromise() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_promise)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_promise(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::IsSame(HoneycombRefPtr<HoneycombV8Value> that) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombV8ValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::GetBoolValue() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bool_value)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_bool_value(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") int32_t HoneycombV8ValueCToCpp::GetIntValue() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_int_value)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int32_t _retval = _struct->get_int_value(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") uint32_t HoneycombV8ValueCToCpp::GetUIntValue() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_uint_value)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  uint32_t _retval = _struct->get_uint_value(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") double HoneycombV8ValueCToCpp::GetDoubleValue() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_double_value)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_double_value(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombBaseTime HoneycombV8ValueCToCpp::GetDateValue() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_date_value)) {
    return HoneycombBaseTime();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_basetime_t _retval = _struct->get_date_value(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombV8ValueCToCpp::GetStringValue() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_string_value)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_string_value(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::IsUserCreated() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_user_created)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_user_created(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::HasException() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_exception)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->has_exception(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Exception> HoneycombV8ValueCToCpp::GetException() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_exception)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8exception_t* _retval = _struct->get_exception(_struct);

  // Return type: refptr_same
  return HoneycombV8ExceptionCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::ClearException() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clear_exception)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->clear_exception(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::WillRethrowExceptions() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, will_rethrow_exceptions)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->will_rethrow_exceptions(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::SetRethrowExceptions(bool rethrow) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_rethrow_exceptions)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_rethrow_exceptions(_struct, rethrow);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::HasValue(const HoneycombString& key) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_value_bykey)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: key

  // Execute
  int _retval = _struct->has_value_bykey(_struct, key.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::HasValue(int index) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_value_byindex)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return false;
  }

  // Execute
  int _retval = _struct->has_value_byindex(_struct, index);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::DeleteValue(const HoneycombString& key) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, delete_value_bykey)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: key

  // Execute
  int _retval = _struct->delete_value_bykey(_struct, key.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::DeleteValue(int index) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, delete_value_byindex)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return false;
  }

  // Execute
  int _retval = _struct->delete_value_byindex(_struct, index);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8ValueCToCpp::GetValue(const HoneycombString& key) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_value_bykey)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: key

  // Execute
  honey_v8value_t* _retval = _struct->get_value_bykey(_struct, key.GetStruct());

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8ValueCToCpp::GetValue(int index) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_value_byindex)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return nullptr;
  }

  // Execute
  honey_v8value_t* _retval = _struct->get_value_byindex(_struct, index);

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::SetValue(const HoneycombString& key,
                                HoneycombRefPtr<HoneycombV8Value> value,
                                PropertyAttribute attribute) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_value_bykey)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }
  // Unverified params: key

  // Execute
  int _retval = _struct->set_value_bykey(
      _struct, key.GetStruct(), HoneycombV8ValueCToCpp::Unwrap(value), attribute);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::SetValue(int index, HoneycombRefPtr<HoneycombV8Value> value) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_value_byindex)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0) {
    return false;
  }
  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_value_byindex(_struct, index,
                                           HoneycombV8ValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::SetValue(const HoneycombString& key,
                                AccessControl settings,
                                PropertyAttribute attribute) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_value_byaccessor)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: key

  // Execute
  int _retval = _struct->set_value_byaccessor(_struct, key.GetStruct(),
                                              settings, attribute);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::GetKeys(std::vector<HoneycombString>& keys) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_keys)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: keys; type: string_vec_byref
  honey_string_list_t keysList = honey_string_list_alloc();
  DCHECK(keysList);
  if (keysList) {
    transfer_string_list_contents(keys, keysList);
  }

  // Execute
  int _retval = _struct->get_keys(_struct, keysList);

  // Restore param:keys; type: string_vec_byref
  if (keysList) {
    keys.clear();
    transfer_string_list_contents(keysList, keys);
    honey_string_list_free(keysList);
  }

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::SetUserData(HoneycombRefPtr<HoneycombBaseRefCounted> user_data) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_user_data)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: user_data

  // Execute
  int _retval =
      _struct->set_user_data(_struct, HoneycombBaseRefCountedCppToC::Wrap(user_data));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBaseRefCounted> HoneycombV8ValueCToCpp::GetUserData() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_user_data)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_base_ref_counted_t* _retval = _struct->get_user_data(_struct);

  // Return type: refptr_diff
  return HoneycombBaseRefCountedCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall") int HoneycombV8ValueCToCpp::GetExternallyAllocatedMemory() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_externally_allocated_memory)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_externally_allocated_memory(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
int HoneycombV8ValueCToCpp::AdjustExternallyAllocatedMemory(int change_in_bytes) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, adjust_externally_allocated_memory)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval =
      _struct->adjust_externally_allocated_memory(_struct, change_in_bytes);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") int HoneycombV8ValueCToCpp::GetArrayLength() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_array_length)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_array_length(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8ArrayBufferReleaseCallback>
HoneycombV8ValueCToCpp::GetArrayBufferReleaseCallback() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_array_buffer_release_callback)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8array_buffer_release_callback_t* _retval =
      _struct->get_array_buffer_release_callback(_struct);

  // Return type: refptr_diff
  return HoneycombV8ArrayBufferReleaseCallbackCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall") bool HoneycombV8ValueCToCpp::NeuterArrayBuffer() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, neuter_array_buffer)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->neuter_array_buffer(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombV8ValueCToCpp::GetFunctionName() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_function_name)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_function_name(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Handler> HoneycombV8ValueCToCpp::GetFunctionHandler() {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_function_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_v8handler_t* _retval = _struct->get_function_handler(_struct);

  // Return type: refptr_diff
  return HoneycombV8HandlerCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8ValueCToCpp::ExecuteFunction(
    HoneycombRefPtr<HoneycombV8Value> object,
    const HoneycombV8ValueList& arguments) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, execute_function)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: object

  // Translate param: arguments; type: refptr_vec_same_byref_const
  const size_t argumentsCount = arguments.size();
  honey_v8value_t** argumentsList = NULL;
  if (argumentsCount > 0) {
    argumentsList = new honey_v8value_t*[argumentsCount];
    DCHECK(argumentsList);
    if (argumentsList) {
      for (size_t i = 0; i < argumentsCount; ++i) {
        argumentsList[i] = HoneycombV8ValueCToCpp::Unwrap(arguments[i]);
      }
    }
  }

  // Execute
  honey_v8value_t* _retval = _struct->execute_function(
      _struct, HoneycombV8ValueCToCpp::Unwrap(object), argumentsCount, argumentsList);

  // Restore param:arguments; type: refptr_vec_same_byref_const
  if (argumentsList) {
    delete[] argumentsList;
  }

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombV8Value> HoneycombV8ValueCToCpp::ExecuteFunctionWithContext(
    HoneycombRefPtr<HoneycombV8Context> context,
    HoneycombRefPtr<HoneycombV8Value> object,
    const HoneycombV8ValueList& arguments) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, execute_function_with_context)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: context; type: refptr_same
  DCHECK(context.get());
  if (!context.get()) {
    return nullptr;
  }
  // Unverified params: object

  // Translate param: arguments; type: refptr_vec_same_byref_const
  const size_t argumentsCount = arguments.size();
  honey_v8value_t** argumentsList = NULL;
  if (argumentsCount > 0) {
    argumentsList = new honey_v8value_t*[argumentsCount];
    DCHECK(argumentsList);
    if (argumentsList) {
      for (size_t i = 0; i < argumentsCount; ++i) {
        argumentsList[i] = HoneycombV8ValueCToCpp::Unwrap(arguments[i]);
      }
    }
  }

  // Execute
  honey_v8value_t* _retval = _struct->execute_function_with_context(
      _struct, HoneycombV8ContextCToCpp::Unwrap(context),
      HoneycombV8ValueCToCpp::Unwrap(object), argumentsCount, argumentsList);

  // Restore param:arguments; type: refptr_vec_same_byref_const
  if (argumentsList) {
    delete[] argumentsList;
  }

  // Return type: refptr_same
  return HoneycombV8ValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::ResolvePromise(HoneycombRefPtr<HoneycombV8Value> arg) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, resolve_promise)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: arg

  // Execute
  int _retval =
      _struct->resolve_promise(_struct, HoneycombV8ValueCToCpp::Unwrap(arg));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombV8ValueCToCpp::RejectPromise(const HoneycombString& errorMsg) {
  honey_v8value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, reject_promise)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: errorMsg; type: string_byref_const
  DCHECK(!errorMsg.empty());
  if (errorMsg.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->reject_promise(_struct, errorMsg.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombV8ValueCToCpp::HoneycombV8ValueCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombV8ValueCToCpp::~HoneycombV8ValueCToCpp() {}

template <>
honey_v8value_t*
HoneycombCToCppRefCounted<HoneycombV8ValueCToCpp, HoneycombV8Value, honey_v8value_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombV8Value* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombV8ValueCToCpp,
                                   HoneycombV8Value,
                                   honey_v8value_t>::kWrapperType = WT_V8VALUE;
