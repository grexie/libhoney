// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d141b95304de99ab093db8f6c524a05e26f4edb5$
//

#include "libhoney_dll/ctocpp/life_span_handler_ctocpp.h"
#include "libhoney_dll/cpptoc/browser_cpptoc.h"
#include "libhoney_dll/cpptoc/dictionary_value_cpptoc.h"
#include "libhoney_dll/cpptoc/frame_cpptoc.h"
#include "libhoney_dll/ctocpp/client_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombLifeSpanHandlerCToCpp::OnBeforePopup(
    HoneycombRefPtr<HoneycombBrowser> browser,
    HoneycombRefPtr<HoneycombFrame> frame,
    const HoneycombString& target_url,
    const HoneycombString& target_frame_name,
    WindowOpenDisposition target_disposition,
    bool user_gesture,
    const HoneycombPopupFeatures& popupFeatures,
    HoneycombWindowInfo& windowInfo,
    HoneycombRefPtr<HoneycombClient>& client,
    HoneycombBrowserSettings& settings,
    HoneycombRefPtr<HoneycombDictionaryValue>& extra_info,
    bool* no_javascript_access) {
  shutdown_checker::AssertNotShutdown();

  honey_life_span_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_before_popup)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get()) {
    return false;
  }
  // Verify param: no_javascript_access; type: bool_byaddr
  DCHECK(no_javascript_access);
  if (!no_javascript_access) {
    return false;
  }
  // Unverified params: target_url, target_frame_name

  // Translate param: client; type: refptr_same_byref
  honey_client_t* clientStruct = NULL;
  if (client.get()) {
    clientStruct = HoneycombClientCToCpp::Unwrap(client);
  }
  honey_client_t* clientOrig = clientStruct;
  // Translate param: extra_info; type: refptr_diff_byref
  honey_dictionary_value_t* extra_infoStruct = NULL;
  if (extra_info.get()) {
    extra_infoStruct = HoneycombDictionaryValueCppToC::Wrap(extra_info);
  }
  honey_dictionary_value_t* extra_infoOrig = extra_infoStruct;
  // Translate param: no_javascript_access; type: bool_byaddr
  int no_javascript_accessInt =
      no_javascript_access ? *no_javascript_access : 0;

  // Execute
  int _retval = _struct->on_before_popup(
      _struct, HoneycombBrowserCppToC::Wrap(browser), HoneycombFrameCppToC::Wrap(frame),
      target_url.GetStruct(), target_frame_name.GetStruct(), target_disposition,
      user_gesture, &popupFeatures, &windowInfo, &clientStruct, &settings,
      &extra_infoStruct, &no_javascript_accessInt);

  // Restore param:client; type: refptr_same_byref
  if (clientStruct) {
    if (clientStruct != clientOrig) {
      client = HoneycombClientCToCpp::Wrap(clientStruct);
    }
  } else {
    client = nullptr;
  }
  // Restore param:extra_info; type: refptr_diff_byref
  if (extra_infoStruct) {
    if (extra_infoStruct != extra_infoOrig) {
      extra_info = HoneycombDictionaryValueCppToC::Unwrap(extra_infoStruct);
    }
  } else {
    extra_info = nullptr;
  }
  // Restore param:no_javascript_access; type: bool_byaddr
  if (no_javascript_access) {
    *no_javascript_access = no_javascript_accessInt ? true : false;
  }

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombLifeSpanHandlerCToCpp::OnAfterCreated(HoneycombRefPtr<HoneycombBrowser> browser) {
  shutdown_checker::AssertNotShutdown();

  honey_life_span_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_after_created)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }

  // Execute
  _struct->on_after_created(_struct, HoneycombBrowserCppToC::Wrap(browser));
}

NO_SANITIZE("cfi-icall")
bool HoneycombLifeSpanHandlerCToCpp::DoClose(HoneycombRefPtr<HoneycombBrowser> browser) {
  shutdown_checker::AssertNotShutdown();

  honey_life_span_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, do_close)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->do_close(_struct, HoneycombBrowserCppToC::Wrap(browser));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombLifeSpanHandlerCToCpp::OnBeforeClose(HoneycombRefPtr<HoneycombBrowser> browser) {
  shutdown_checker::AssertNotShutdown();

  honey_life_span_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_before_close)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return;
  }

  // Execute
  _struct->on_before_close(_struct, HoneycombBrowserCppToC::Wrap(browser));
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombLifeSpanHandlerCToCpp::HoneycombLifeSpanHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombLifeSpanHandlerCToCpp::~HoneycombLifeSpanHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_life_span_handler_t* HoneycombCToCppRefCounted<
    HoneycombLifeSpanHandlerCToCpp,
    HoneycombLifeSpanHandler,
    honey_life_span_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                            HoneycombLifeSpanHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombLifeSpanHandlerCToCpp,
                                   HoneycombLifeSpanHandler,
                                   honey_life_span_handler_t>::kWrapperType =
    WT_LIFE_SPAN_HANDLER;
