// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=1dadac1c1138021a5f38e52ccb8f9863f5a387b5$
//

#include "libhoney_dll/ctocpp/drag_data_ctocpp.h"
#include "libhoney_dll/ctocpp/image_ctocpp.h"
#include "libhoney_dll/ctocpp/stream_writer_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"
#include "libhoney_dll/transfer_util.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombDragData> HoneycombDragData::Create() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_drag_data_t* _retval = honey_drag_data_create();

  // Return type: refptr_same
  return HoneycombDragDataCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombDragData> HoneycombDragDataCToCpp::Clone() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clone)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_drag_data_t* _retval = _struct->clone(_struct);

  // Return type: refptr_same
  return HoneycombDragDataCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") bool HoneycombDragDataCToCpp::IsReadOnly() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombDragDataCToCpp::IsLink() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_link)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_link(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombDragDataCToCpp::IsFragment() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_fragment)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_fragment(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombDragDataCToCpp::IsFile() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_file)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_file(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDragDataCToCpp::GetLinkURL() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_link_url)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_link_url(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDragDataCToCpp::GetLinkTitle() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_link_title)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_link_title(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDragDataCToCpp::GetLinkMetadata() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_link_metadata)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_link_metadata(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDragDataCToCpp::GetFragmentText() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_fragment_text)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_fragment_text(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDragDataCToCpp::GetFragmentHtml() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_fragment_html)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_fragment_html(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDragDataCToCpp::GetFragmentBaseURL() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_fragment_base_url)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_fragment_base_url(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombDragDataCToCpp::GetFileName() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_file_name)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_file_name(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
size_t HoneycombDragDataCToCpp::GetFileContents(HoneycombRefPtr<HoneycombStreamWriter> writer) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_file_contents)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: writer

  // Execute
  size_t _retval = _struct->get_file_contents(
      _struct, HoneycombStreamWriterCToCpp::Unwrap(writer));

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
bool HoneycombDragDataCToCpp::GetFileNames(std::vector<HoneycombString>& names) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_file_names)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: names; type: string_vec_byref
  honey_string_list_t namesList = honey_string_list_alloc();
  DCHECK(namesList);
  if (namesList) {
    transfer_string_list_contents(names, namesList);
  }

  // Execute
  int _retval = _struct->get_file_names(_struct, namesList);

  // Restore param:names; type: string_vec_byref
  if (namesList) {
    names.clear();
    transfer_string_list_contents(namesList, names);
    honey_string_list_free(namesList);
  }

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombDragDataCToCpp::GetFilePaths(std::vector<HoneycombString>& paths) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_file_paths)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: paths; type: string_vec_byref
  honey_string_list_t pathsList = honey_string_list_alloc();
  DCHECK(pathsList);
  if (pathsList) {
    transfer_string_list_contents(paths, pathsList);
  }

  // Execute
  int _retval = _struct->get_file_paths(_struct, pathsList);

  // Restore param:paths; type: string_vec_byref
  if (pathsList) {
    paths.clear();
    transfer_string_list_contents(pathsList, paths);
    honey_string_list_free(pathsList);
  }

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombDragDataCToCpp::SetLinkURL(const HoneycombString& url) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_link_url)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: url

  // Execute
  _struct->set_link_url(_struct, url.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombDragDataCToCpp::SetLinkTitle(const HoneycombString& title) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_link_title)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: title

  // Execute
  _struct->set_link_title(_struct, title.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombDragDataCToCpp::SetLinkMetadata(const HoneycombString& data) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_link_metadata)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: data

  // Execute
  _struct->set_link_metadata(_struct, data.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombDragDataCToCpp::SetFragmentText(const HoneycombString& text) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_fragment_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: text

  // Execute
  _struct->set_fragment_text(_struct, text.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombDragDataCToCpp::SetFragmentHtml(const HoneycombString& html) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_fragment_html)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: html

  // Execute
  _struct->set_fragment_html(_struct, html.GetStruct());
}

NO_SANITIZE("cfi-icall")
void HoneycombDragDataCToCpp::SetFragmentBaseURL(const HoneycombString& base_url) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_fragment_base_url)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: base_url

  // Execute
  _struct->set_fragment_base_url(_struct, base_url.GetStruct());
}

NO_SANITIZE("cfi-icall") void HoneycombDragDataCToCpp::ResetFileContents() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, reset_file_contents)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->reset_file_contents(_struct);
}

NO_SANITIZE("cfi-icall")
void HoneycombDragDataCToCpp::AddFile(const HoneycombString& path,
                                const HoneycombString& display_name) {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, add_file)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: path; type: string_byref_const
  DCHECK(!path.empty());
  if (path.empty()) {
    return;
  }
  // Unverified params: display_name

  // Execute
  _struct->add_file(_struct, path.GetStruct(), display_name.GetStruct());
}

NO_SANITIZE("cfi-icall") void HoneycombDragDataCToCpp::ClearFilenames() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clear_filenames)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->clear_filenames(_struct);
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombImage> HoneycombDragDataCToCpp::GetImage() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_image)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_image_t* _retval = _struct->get_image(_struct);

  // Return type: refptr_same
  return HoneycombImageCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombPoint HoneycombDragDataCToCpp::GetImageHotspot() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_image_hotspot)) {
    return HoneycombPoint();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_point_t _retval = _struct->get_image_hotspot(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") bool HoneycombDragDataCToCpp::HasImage() {
  shutdown_checker::AssertNotShutdown();

  honey_drag_data_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_image)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->has_image(_struct);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombDragDataCToCpp::HoneycombDragDataCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombDragDataCToCpp::~HoneycombDragDataCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_drag_data_t*
HoneycombCToCppRefCounted<HoneycombDragDataCToCpp, HoneycombDragData, honey_drag_data_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombDragData* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombDragDataCToCpp,
                                   HoneycombDragData,
                                   honey_drag_data_t>::kWrapperType =
    WT_DRAG_DATA;
