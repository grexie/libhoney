// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=e70d58d7c779528d03b49ead50c162ebf0eb0ca7$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_POST_DATA_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_POST_DATA_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_request_capi.h"
#include "include/honey_request.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombPostDataCToCpp : public HoneycombCToCppRefCounted<HoneycombPostDataCToCpp,
                                                     HoneycombPostData,
                                                     honey_post_data_t> {
 public:
  HoneycombPostDataCToCpp();
  virtual ~HoneycombPostDataCToCpp();

  // HoneycombPostData methods.
  bool IsReadOnly() override;
  bool HasExcludedElements() override;
  size_t GetElementCount() override;
  void GetElements(ElementVector& elements) override;
  bool RemoveElement(HoneycombRefPtr<HoneycombPostDataElement> element) override;
  bool AddElement(HoneycombRefPtr<HoneycombPostDataElement> element) override;
  void RemoveElements() override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_POST_DATA_CTOCPP_H_
