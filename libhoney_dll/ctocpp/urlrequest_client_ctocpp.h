// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=0b70adb9a01fcb166ffa6b310825a4d9679a8d23$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_URLREQUEST_CLIENT_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_URLREQUEST_CLIENT_CTOCPP_H_
#pragma once

#if !defined(BUILDING_HONEYCOMB_SHARED)
#error This file can be included DLL-side only
#endif

#include "include/capi/honey_urlrequest_capi.h"
#include "include/honey_urlrequest.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class HoneycombURLRequestClientCToCpp
    : public HoneycombCToCppRefCounted<HoneycombURLRequestClientCToCpp,
                                 HoneycombURLRequestClient,
                                 honey_urlrequest_client_t> {
 public:
  HoneycombURLRequestClientCToCpp();
  virtual ~HoneycombURLRequestClientCToCpp();

  // HoneycombURLRequestClient methods.
  void OnRequestComplete(HoneycombRefPtr<HoneycombURLRequest> request) override;
  void OnUploadProgress(HoneycombRefPtr<HoneycombURLRequest> request,
                        int64_t current,
                        int64_t total) override;
  void OnDownloadProgress(HoneycombRefPtr<HoneycombURLRequest> request,
                          int64_t current,
                          int64_t total) override;
  void OnDownloadData(HoneycombRefPtr<HoneycombURLRequest> request,
                      const void* data,
                      size_t data_length) override;
  bool GetAuthCredentials(bool isProxy,
                          const HoneycombString& host,
                          int port,
                          const HoneycombString& realm,
                          const HoneycombString& scheme,
                          HoneycombRefPtr<HoneycombAuthCallback> callback) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_URLREQUEST_CLIENT_CTOCPP_H_
