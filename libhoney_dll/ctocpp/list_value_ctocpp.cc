// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=5b2b8bab4a1dc4d4f26918156aaad2ee4c3caf4a$
//

#include "libhoney_dll/ctocpp/list_value_ctocpp.h"
#include "libhoney_dll/ctocpp/binary_value_ctocpp.h"
#include "libhoney_dll/ctocpp/dictionary_value_ctocpp.h"
#include "libhoney_dll/ctocpp/value_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombListValue> HoneycombListValue::Create() {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_list_value_t* _retval = honey_list_value_create();

  // Return type: refptr_same
  return HoneycombListValueCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombListValueCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombListValueCToCpp::IsOwned() {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_owned)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_owned(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombListValueCToCpp::IsReadOnly() {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::IsSame(HoneycombRefPtr<HoneycombListValue> that) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, HoneycombListValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::IsEqual(HoneycombRefPtr<HoneycombListValue> that) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_equal)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  DCHECK(that.get());
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_equal(_struct, HoneycombListValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombListValue> HoneycombListValueCToCpp::Copy() {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, copy)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_list_value_t* _retval = _struct->copy(_struct);

  // Return type: refptr_same
  return HoneycombListValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") bool HoneycombListValueCToCpp::SetSize(size_t size) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_size)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_size(_struct, size);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") size_t HoneycombListValueCToCpp::GetSize() {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_size)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_size(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") bool HoneycombListValueCToCpp::Clear() {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clear)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->clear(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombListValueCToCpp::Remove(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, remove)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->remove(_struct, index);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombValueType HoneycombListValueCToCpp::GetType(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_type)) {
    return VTYPE_INVALID;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_value_type_t _retval = _struct->get_type(_struct, index);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombValue> HoneycombListValueCToCpp::GetValue(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_value)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_value_t* _retval = _struct->get_value(_struct, index);

  // Return type: refptr_same
  return HoneycombValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") bool HoneycombListValueCToCpp::GetBool(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_bool(_struct, index);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") int HoneycombListValueCToCpp::GetInt(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_int)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_int(_struct, index);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") double HoneycombListValueCToCpp::GetDouble(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_double)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_double(_struct, index);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombListValueCToCpp::GetString(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_string)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_string(_struct, index);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombBinaryValue> HoneycombListValueCToCpp::GetBinary(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_binary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_binary_value_t* _retval = _struct->get_binary(_struct, index);

  // Return type: refptr_same
  return HoneycombBinaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDictionaryValue> HoneycombListValueCToCpp::GetDictionary(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_dictionary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_dictionary_value_t* _retval = _struct->get_dictionary(_struct, index);

  // Return type: refptr_same
  return HoneycombDictionaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombListValue> HoneycombListValueCToCpp::GetList(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_list)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_list_value_t* _retval = _struct->get_list(_struct, index);

  // Return type: refptr_same
  return HoneycombListValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::SetValue(size_t index, HoneycombRefPtr<HoneycombValue> value) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_value)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_value(_struct, index, HoneycombValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombListValueCToCpp::SetNull(size_t index) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_null)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_null(_struct, index);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::SetBool(size_t index, bool value) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_bool(_struct, index, value);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::SetInt(size_t index, int value) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_int)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_int(_struct, index, value);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::SetDouble(size_t index, double value) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_double)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_double(_struct, index, value);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::SetString(size_t index, const HoneycombString& value) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_string)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: value

  // Execute
  int _retval = _struct->set_string(_struct, index, value.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::SetBinary(size_t index,
                                   HoneycombRefPtr<HoneycombBinaryValue> value) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_binary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_binary(_struct, index, HoneycombBinaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::SetDictionary(size_t index,
                                       HoneycombRefPtr<HoneycombDictionaryValue> value) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_dictionary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_dictionary(
      _struct, index, HoneycombDictionaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombListValueCToCpp::SetList(size_t index, HoneycombRefPtr<HoneycombListValue> value) {
  shutdown_checker::AssertNotShutdown();

  honey_list_value_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_list)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  DCHECK(value.get());
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_list(_struct, index, HoneycombListValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombListValueCToCpp::HoneycombListValueCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombListValueCToCpp::~HoneycombListValueCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_list_value_t*
HoneycombCToCppRefCounted<HoneycombListValueCToCpp, HoneycombListValue, honey_list_value_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombListValue* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombListValueCToCpp,
                                   HoneycombListValue,
                                   honey_list_value_t>::kWrapperType =
    WT_LIST_VALUE;
