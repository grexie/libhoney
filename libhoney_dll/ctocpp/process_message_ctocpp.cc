// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f542bb5ffcf0d7543e424741a62e93c58cc2e3ee$
//

#include "libhoney_dll/ctocpp/process_message_ctocpp.h"
#include "libhoney_dll/ctocpp/list_value_ctocpp.h"
#include "libhoney_dll/ctocpp/shared_memory_region_ctocpp.h"
#include "libhoney_dll/shutdown_checker.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombProcessMessage> HoneycombProcessMessage::Create(const HoneycombString& name) {
  shutdown_checker::AssertNotShutdown();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return nullptr;
  }

  // Execute
  honey_process_message_t* _retval = honey_process_message_create(name.GetStruct());

  // Return type: refptr_same
  return HoneycombProcessMessageCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombProcessMessageCToCpp::IsValid() {
  shutdown_checker::AssertNotShutdown();

  honey_process_message_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombProcessMessageCToCpp::IsReadOnly() {
  shutdown_checker::AssertNotShutdown();

  honey_process_message_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombProcessMessage> HoneycombProcessMessageCToCpp::Copy() {
  shutdown_checker::AssertNotShutdown();

  honey_process_message_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, copy)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_process_message_t* _retval = _struct->copy(_struct);

  // Return type: refptr_same
  return HoneycombProcessMessageCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombProcessMessageCToCpp::GetName() {
  shutdown_checker::AssertNotShutdown();

  honey_process_message_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_name)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_name(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombListValue> HoneycombProcessMessageCToCpp::GetArgumentList() {
  shutdown_checker::AssertNotShutdown();

  honey_process_message_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_argument_list)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_list_value_t* _retval = _struct->get_argument_list(_struct);

  // Return type: refptr_same
  return HoneycombListValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombSharedMemoryRegion>
HoneycombProcessMessageCToCpp::GetSharedMemoryRegion() {
  shutdown_checker::AssertNotShutdown();

  honey_process_message_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_shared_memory_region)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_shared_memory_region_t* _retval =
      _struct->get_shared_memory_region(_struct);

  // Return type: refptr_same
  return HoneycombSharedMemoryRegionCToCpp::Wrap(_retval);
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombProcessMessageCToCpp::HoneycombProcessMessageCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombProcessMessageCToCpp::~HoneycombProcessMessageCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_process_message_t* HoneycombCToCppRefCounted<
    HoneycombProcessMessageCToCpp,
    HoneycombProcessMessage,
    honey_process_message_t>::UnwrapDerived(HoneycombWrapperType type,
                                          HoneycombProcessMessage* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombProcessMessageCToCpp,
                                   HoneycombProcessMessage,
                                   honey_process_message_t>::kWrapperType =
    WT_PROCESS_MESSAGE;
