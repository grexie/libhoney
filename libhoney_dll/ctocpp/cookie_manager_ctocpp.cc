// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=18732d77c6a843954449ea97aa26f0ce0b7a776a$
//

#include "libhoney_dll/ctocpp/cookie_manager_ctocpp.h"
#include "libhoney_dll/cpptoc/completion_callback_cpptoc.h"
#include "libhoney_dll/cpptoc/cookie_visitor_cpptoc.h"
#include "libhoney_dll/cpptoc/delete_cookies_callback_cpptoc.h"
#include "libhoney_dll/cpptoc/set_cookie_callback_cpptoc.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombCookieManager> HoneycombCookieManager::GetGlobalManager(
    HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  honey_cookie_manager_t* _retval = honey_cookie_manager_get_global_manager(
      HoneycombCompletionCallbackCppToC::Wrap(callback));

  // Return type: refptr_same
  return HoneycombCookieManagerCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombCookieManagerCToCpp::VisitAllCookies(
    HoneycombRefPtr<HoneycombCookieVisitor> visitor) {
  honey_cookie_manager_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, visit_all_cookies)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->visit_all_cookies(
      _struct, HoneycombCookieVisitorCppToC::Wrap(visitor));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombCookieManagerCToCpp::VisitUrlCookies(
    const HoneycombString& url,
    bool includeHttpOnly,
    HoneycombRefPtr<HoneycombCookieVisitor> visitor) {
  honey_cookie_manager_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, visit_url_cookies)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty()) {
    return false;
  }
  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->visit_url_cookies(_struct, url.GetStruct(), includeHttpOnly,
                                 HoneycombCookieVisitorCppToC::Wrap(visitor));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombCookieManagerCToCpp::SetCookie(
    const HoneycombString& url,
    const HoneycombCookie& cookie,
    HoneycombRefPtr<HoneycombSetCookieCallback> callback) {
  honey_cookie_manager_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_cookie)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty()) {
    return false;
  }
  // Unverified params: callback

  // Execute
  int _retval = _struct->set_cookie(_struct, url.GetStruct(), &cookie,
                                    HoneycombSetCookieCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombCookieManagerCToCpp::DeleteCookies(
    const HoneycombString& url,
    const HoneycombString& cookie_name,
    HoneycombRefPtr<HoneycombDeleteCookiesCallback> callback) {
  honey_cookie_manager_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, delete_cookies)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: url, cookie_name, callback

  // Execute
  int _retval =
      _struct->delete_cookies(_struct, url.GetStruct(), cookie_name.GetStruct(),
                              HoneycombDeleteCookiesCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombCookieManagerCToCpp::FlushStore(
    HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  honey_cookie_manager_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, flush_store)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  int _retval = _struct->flush_store(
      _struct, HoneycombCompletionCallbackCppToC::Wrap(callback));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombCookieManagerCToCpp::HoneycombCookieManagerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombCookieManagerCToCpp::~HoneycombCookieManagerCToCpp() {}

template <>
honey_cookie_manager_t*
HoneycombCToCppRefCounted<HoneycombCookieManagerCToCpp,
                    HoneycombCookieManager,
                    honey_cookie_manager_t>::UnwrapDerived(HoneycombWrapperType type,
                                                         HoneycombCookieManager* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombCookieManagerCToCpp,
                                   HoneycombCookieManager,
                                   honey_cookie_manager_t>::kWrapperType =
    WT_COOKIE_MANAGER;
