// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=ec38c71520cffd0d1ff4f1ee83819c411b14c795$
//

#include "libhoney_dll/ctocpp/client_ctocpp.h"
#include "libhoney_dll/cpptoc/browser_cpptoc.h"
#include "libhoney_dll/cpptoc/frame_cpptoc.h"
#include "libhoney_dll/cpptoc/process_message_cpptoc.h"
#include "libhoney_dll/ctocpp/audio_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/command_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/context_menu_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/dialog_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/display_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/download_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/drag_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/find_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/focus_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/frame_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/jsdialog_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/keyboard_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/life_span_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/load_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/permission_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/print_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/render_handler_ctocpp.h"
#include "libhoney_dll/ctocpp/request_handler_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombAudioHandler> HoneycombClientCToCpp::GetAudioHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_audio_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_audio_handler_t* _retval = _struct->get_audio_handler(_struct);

  // Return type: refptr_same
  return HoneycombAudioHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombCommandHandler> HoneycombClientCToCpp::GetCommandHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_command_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_command_handler_t* _retval = _struct->get_command_handler(_struct);

  // Return type: refptr_same
  return HoneycombCommandHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombContextMenuHandler> HoneycombClientCToCpp::GetContextMenuHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_context_menu_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_context_menu_handler_t* _retval =
      _struct->get_context_menu_handler(_struct);

  // Return type: refptr_same
  return HoneycombContextMenuHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDialogHandler> HoneycombClientCToCpp::GetDialogHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_dialog_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_dialog_handler_t* _retval = _struct->get_dialog_handler(_struct);

  // Return type: refptr_same
  return HoneycombDialogHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDisplayHandler> HoneycombClientCToCpp::GetDisplayHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_display_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_display_handler_t* _retval = _struct->get_display_handler(_struct);

  // Return type: refptr_same
  return HoneycombDisplayHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDownloadHandler> HoneycombClientCToCpp::GetDownloadHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_download_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_download_handler_t* _retval = _struct->get_download_handler(_struct);

  // Return type: refptr_same
  return HoneycombDownloadHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDragHandler> HoneycombClientCToCpp::GetDragHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_drag_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_drag_handler_t* _retval = _struct->get_drag_handler(_struct);

  // Return type: refptr_same
  return HoneycombDragHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombFindHandler> HoneycombClientCToCpp::GetFindHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_find_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_find_handler_t* _retval = _struct->get_find_handler(_struct);

  // Return type: refptr_same
  return HoneycombFindHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombFocusHandler> HoneycombClientCToCpp::GetFocusHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_focus_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_focus_handler_t* _retval = _struct->get_focus_handler(_struct);

  // Return type: refptr_same
  return HoneycombFocusHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombFrameHandler> HoneycombClientCToCpp::GetFrameHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_frame_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_frame_handler_t* _retval = _struct->get_frame_handler(_struct);

  // Return type: refptr_same
  return HoneycombFrameHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombPermissionHandler> HoneycombClientCToCpp::GetPermissionHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_permission_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_permission_handler_t* _retval = _struct->get_permission_handler(_struct);

  // Return type: refptr_same
  return HoneycombPermissionHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombJSDialogHandler> HoneycombClientCToCpp::GetJSDialogHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_jsdialog_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_jsdialog_handler_t* _retval = _struct->get_jsdialog_handler(_struct);

  // Return type: refptr_same
  return HoneycombJSDialogHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombKeyboardHandler> HoneycombClientCToCpp::GetKeyboardHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_keyboard_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_keyboard_handler_t* _retval = _struct->get_keyboard_handler(_struct);

  // Return type: refptr_same
  return HoneycombKeyboardHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombLifeSpanHandler> HoneycombClientCToCpp::GetLifeSpanHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_life_span_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_life_span_handler_t* _retval = _struct->get_life_span_handler(_struct);

  // Return type: refptr_same
  return HoneycombLifeSpanHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombLoadHandler> HoneycombClientCToCpp::GetLoadHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_load_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_load_handler_t* _retval = _struct->get_load_handler(_struct);

  // Return type: refptr_same
  return HoneycombLoadHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombPrintHandler> HoneycombClientCToCpp::GetPrintHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_print_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_print_handler_t* _retval = _struct->get_print_handler(_struct);

  // Return type: refptr_same
  return HoneycombPrintHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombRenderHandler> HoneycombClientCToCpp::GetRenderHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_render_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_render_handler_t* _retval = _struct->get_render_handler(_struct);

  // Return type: refptr_same
  return HoneycombRenderHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombRequestHandler> HoneycombClientCToCpp::GetRequestHandler() {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_request_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_request_handler_t* _retval = _struct->get_request_handler(_struct);

  // Return type: refptr_same
  return HoneycombRequestHandlerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
bool HoneycombClientCToCpp::OnProcessMessageReceived(
    HoneycombRefPtr<HoneycombBrowser> browser,
    HoneycombRefPtr<HoneycombFrame> frame,
    HoneycombProcessId source_process,
    HoneycombRefPtr<HoneycombProcessMessage> message) {
  honey_client_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_process_message_received)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get()) {
    return false;
  }
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get()) {
    return false;
  }
  // Verify param: message; type: refptr_diff
  DCHECK(message.get());
  if (!message.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->on_process_message_received(
      _struct, HoneycombBrowserCppToC::Wrap(browser), HoneycombFrameCppToC::Wrap(frame),
      source_process, HoneycombProcessMessageCppToC::Wrap(message));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombClientCToCpp::HoneycombClientCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombClientCToCpp::~HoneycombClientCToCpp() {}

template <>
honey_client_t*
HoneycombCToCppRefCounted<HoneycombClientCToCpp, HoneycombClient, honey_client_t>::UnwrapDerived(
    HoneycombWrapperType type,
    HoneycombClient* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombClientCToCpp, HoneycombClient, honey_client_t>::
    kWrapperType = WT_CLIENT;
