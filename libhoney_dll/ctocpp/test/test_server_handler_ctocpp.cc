// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=43130e567ff34056d282a006b0023c5892b83afa$
//

#include "libhoney_dll/ctocpp/test/test_server_handler_ctocpp.h"
#include "libhoney_dll/cpptoc/request_cpptoc.h"
#include "libhoney_dll/cpptoc/test/test_server_connection_cpptoc.h"
#include "libhoney_dll/cpptoc/test/test_server_cpptoc.h"
#include "libhoney_dll/shutdown_checker.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombTestServerHandlerCToCpp::OnTestServerRequest(
    HoneycombRefPtr<HoneycombTestServer> server,
    HoneycombRefPtr<HoneycombRequest> request,
    HoneycombRefPtr<HoneycombTestServerConnection> connection) {
  shutdown_checker::AssertNotShutdown();

  honey_test_server_handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, on_test_server_request)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: server; type: refptr_diff
  DCHECK(server.get());
  if (!server.get()) {
    return false;
  }
  // Verify param: request; type: refptr_diff
  DCHECK(request.get());
  if (!request.get()) {
    return false;
  }
  // Verify param: connection; type: refptr_diff
  DCHECK(connection.get());
  if (!connection.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->on_test_server_request(
      _struct, HoneycombTestServerCppToC::Wrap(server),
      HoneycombRequestCppToC::Wrap(request),
      HoneycombTestServerConnectionCppToC::Wrap(connection));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombTestServerHandlerCToCpp::HoneycombTestServerHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombTestServerHandlerCToCpp::~HoneycombTestServerHandlerCToCpp() {
  shutdown_checker::AssertNotShutdown();
}

template <>
honey_test_server_handler_t* HoneycombCToCppRefCounted<
    HoneycombTestServerHandlerCToCpp,
    HoneycombTestServerHandler,
    honey_test_server_handler_t>::UnwrapDerived(HoneycombWrapperType type,
                                              HoneycombTestServerHandler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombTestServerHandlerCToCpp,
                                   HoneycombTestServerHandler,
                                   honey_test_server_handler_t>::kWrapperType =
    WT_TEST_SERVER_HANDLER;
