// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4a42afa43cf782789da01e2bc97fe635e530db7b$
//

#include "libhoney_dll/ctocpp/response_ctocpp.h"
#include "libhoney_dll/transfer_util.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") HoneycombRefPtr<HoneycombResponse> HoneycombResponse::Create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_response_t* _retval = honey_response_create();

  // Return type: refptr_same
  return HoneycombResponseCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall") bool HoneycombResponseCToCpp::IsReadOnly() {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") honey_errorcode_t HoneycombResponseCToCpp::GetError() {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_error)) {
    return ERR_NONE;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_errorcode_t _retval = _struct->get_error(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombResponseCToCpp::SetError(honey_errorcode_t error) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_error)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_error(_struct, error);
}

NO_SANITIZE("cfi-icall") int HoneycombResponseCToCpp::GetStatus() {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_status)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_status(_struct);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall") void HoneycombResponseCToCpp::SetStatus(int status) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_status)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_status(_struct, status);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombResponseCToCpp::GetStatusText() {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_status_text)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_status_text(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombResponseCToCpp::SetStatusText(const HoneycombString& statusText) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_status_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: statusText

  // Execute
  _struct->set_status_text(_struct, statusText.GetStruct());
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombResponseCToCpp::GetMimeType() {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_mime_type)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_mime_type(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombResponseCToCpp::SetMimeType(const HoneycombString& mimeType) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_mime_type)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: mimeType

  // Execute
  _struct->set_mime_type(_struct, mimeType.GetStruct());
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombResponseCToCpp::GetCharset() {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_charset)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_charset(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombResponseCToCpp::SetCharset(const HoneycombString& charset) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_charset)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: charset

  // Execute
  _struct->set_charset(_struct, charset.GetStruct());
}

NO_SANITIZE("cfi-icall")
HoneycombString HoneycombResponseCToCpp::GetHeaderByName(const HoneycombString& name) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_header_by_name)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return HoneycombString();
  }

  // Execute
  honey_string_userfree_t _retval =
      _struct->get_header_by_name(_struct, name.GetStruct());

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
void HoneycombResponseCToCpp::SetHeaderByName(const HoneycombString& name,
                                        const HoneycombString& value,
                                        bool overwrite) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_header_by_name)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return;
  }
  // Unverified params: value

  // Execute
  _struct->set_header_by_name(_struct, name.GetStruct(), value.GetStruct(),
                              overwrite);
}

NO_SANITIZE("cfi-icall")
void HoneycombResponseCToCpp::GetHeaderMap(HeaderMap& headerMap) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_header_map)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: headerMap; type: string_map_multi_byref
  honey_string_multimap_t headerMapMultimap = honey_string_multimap_alloc();
  DCHECK(headerMapMultimap);
  if (headerMapMultimap) {
    transfer_string_multimap_contents(headerMap, headerMapMultimap);
  }

  // Execute
  _struct->get_header_map(_struct, headerMapMultimap);

  // Restore param:headerMap; type: string_map_multi_byref
  if (headerMapMultimap) {
    headerMap.clear();
    transfer_string_multimap_contents(headerMapMultimap, headerMap);
    honey_string_multimap_free(headerMapMultimap);
  }
}

NO_SANITIZE("cfi-icall")
void HoneycombResponseCToCpp::SetHeaderMap(const HeaderMap& headerMap) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_header_map)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: headerMap; type: string_map_multi_byref_const
  honey_string_multimap_t headerMapMultimap = honey_string_multimap_alloc();
  DCHECK(headerMapMultimap);
  if (headerMapMultimap) {
    transfer_string_multimap_contents(headerMap, headerMapMultimap);
  }

  // Execute
  _struct->set_header_map(_struct, headerMapMultimap);

  // Restore param:headerMap; type: string_map_multi_byref_const
  if (headerMapMultimap) {
    honey_string_multimap_free(headerMapMultimap);
  }
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombResponseCToCpp::GetURL() {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_url)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_url(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall") void HoneycombResponseCToCpp::SetURL(const HoneycombString& url) {
  honey_response_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_url)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: url

  // Execute
  _struct->set_url(_struct, url.GetStruct());
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombResponseCToCpp::HoneycombResponseCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombResponseCToCpp::~HoneycombResponseCToCpp() {}

template <>
honey_response_t*
HoneycombCToCppRefCounted<HoneycombResponseCToCpp, HoneycombResponse, honey_response_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombResponse* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombResponseCToCpp,
                                   HoneycombResponse,
                                   honey_response_t>::kWrapperType = WT_RESPONSE;
