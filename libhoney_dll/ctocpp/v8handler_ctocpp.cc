// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4a30d78ab05a200e8d93b9e8da2c4cb3a8ff4acd$
//

#include "libhoney_dll/ctocpp/v8handler_ctocpp.h"
#include "libhoney_dll/cpptoc/v8value_cpptoc.h"

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombV8HandlerCToCpp::Execute(const HoneycombString& name,
                                 HoneycombRefPtr<HoneycombV8Value> object,
                                 const HoneycombV8ValueList& arguments,
                                 HoneycombRefPtr<HoneycombV8Value>& retval,
                                 HoneycombString& exception) {
  honey_v8handler_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, execute)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return false;
  }
  // Verify param: object; type: refptr_diff
  DCHECK(object.get());
  if (!object.get()) {
    return false;
  }

  // Translate param: arguments; type: refptr_vec_diff_byref_const
  const size_t argumentsCount = arguments.size();
  honey_v8value_t** argumentsList = NULL;
  if (argumentsCount > 0) {
    argumentsList = new honey_v8value_t*[argumentsCount];
    DCHECK(argumentsList);
    if (argumentsList) {
      for (size_t i = 0; i < argumentsCount; ++i) {
        argumentsList[i] = HoneycombV8ValueCppToC::Wrap(arguments[i]);
      }
    }
  }
  // Translate param: retval; type: refptr_diff_byref
  honey_v8value_t* retvalStruct = NULL;
  if (retval.get()) {
    retvalStruct = HoneycombV8ValueCppToC::Wrap(retval);
  }
  honey_v8value_t* retvalOrig = retvalStruct;

  // Execute
  int _retval = _struct->execute(
      _struct, name.GetStruct(), HoneycombV8ValueCppToC::Wrap(object), argumentsCount,
      argumentsList, &retvalStruct, exception.GetWritableStruct());

  // Restore param:arguments; type: refptr_vec_diff_byref_const
  if (argumentsList) {
    delete[] argumentsList;
  }
  // Restore param:retval; type: refptr_diff_byref
  if (retvalStruct) {
    if (retvalStruct != retvalOrig) {
      retval = HoneycombV8ValueCppToC::Unwrap(retvalStruct);
    }
  } else {
    retval = nullptr;
  }

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombV8HandlerCToCpp::HoneycombV8HandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombV8HandlerCToCpp::~HoneycombV8HandlerCToCpp() {}

template <>
honey_v8handler_t*
HoneycombCToCppRefCounted<HoneycombV8HandlerCToCpp, HoneycombV8Handler, honey_v8handler_t>::
    UnwrapDerived(HoneycombWrapperType type, HoneycombV8Handler* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombV8HandlerCToCpp,
                                   HoneycombV8Handler,
                                   honey_v8handler_t>::kWrapperType =
    WT_V8HANDLER;
