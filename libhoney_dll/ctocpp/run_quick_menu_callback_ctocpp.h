// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c079137f43167df4c21e63f38cdd8c33f4423445$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_RUN_QUICK_MENU_CALLBACK_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_RUN_QUICK_MENU_CALLBACK_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_context_menu_handler_capi.h"
#include "include/honey_context_menu_handler.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombRunQuickMenuCallbackCToCpp
    : public HoneycombCToCppRefCounted<HoneycombRunQuickMenuCallbackCToCpp,
                                 HoneycombRunQuickMenuCallback,
                                 honey_run_quick_menu_callback_t> {
 public:
  HoneycombRunQuickMenuCallbackCToCpp();
  virtual ~HoneycombRunQuickMenuCallbackCToCpp();

  // HoneycombRunQuickMenuCallback methods.
  void Continue(int command_id, honey_event_flags_t event_flags) override;
  void Cancel() override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_RUN_QUICK_MENU_CALLBACK_CTOCPP_H_
