// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=99b478c698261aa2aaf566b283fc938aacf3b2bf$
//

#ifndef HONEYCOMB_LIBHONEY_DLL_CTOCPP_LIST_VALUE_CTOCPP_H_
#define HONEYCOMB_LIBHONEY_DLL_CTOCPP_LIST_VALUE_CTOCPP_H_
#pragma once

#if !defined(WRAPPING_HONEYCOMB_SHARED)
#error This file can be included wrapper-side only
#endif

#include "include/capi/honey_values_capi.h"
#include "include/honey_values.h"
#include "libhoney_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed wrapper-side only.
class HoneycombListValueCToCpp : public HoneycombCToCppRefCounted<HoneycombListValueCToCpp,
                                                      HoneycombListValue,
                                                      honey_list_value_t> {
 public:
  HoneycombListValueCToCpp();
  virtual ~HoneycombListValueCToCpp();

  // HoneycombListValue methods.
  bool IsValid() override;
  bool IsOwned() override;
  bool IsReadOnly() override;
  bool IsSame(HoneycombRefPtr<HoneycombListValue> that) override;
  bool IsEqual(HoneycombRefPtr<HoneycombListValue> that) override;
  HoneycombRefPtr<HoneycombListValue> Copy() override;
  bool SetSize(size_t size) override;
  size_t GetSize() override;
  bool Clear() override;
  bool Remove(size_t index) override;
  HoneycombValueType GetType(size_t index) override;
  HoneycombRefPtr<HoneycombValue> GetValue(size_t index) override;
  bool GetBool(size_t index) override;
  int GetInt(size_t index) override;
  double GetDouble(size_t index) override;
  HoneycombString GetString(size_t index) override;
  HoneycombRefPtr<HoneycombBinaryValue> GetBinary(size_t index) override;
  HoneycombRefPtr<HoneycombDictionaryValue> GetDictionary(size_t index) override;
  HoneycombRefPtr<HoneycombListValue> GetList(size_t index) override;
  bool SetValue(size_t index, HoneycombRefPtr<HoneycombValue> value) override;
  bool SetNull(size_t index) override;
  bool SetBool(size_t index, bool value) override;
  bool SetInt(size_t index, int value) override;
  bool SetDouble(size_t index, double value) override;
  bool SetString(size_t index, const HoneycombString& value) override;
  bool SetBinary(size_t index, HoneycombRefPtr<HoneycombBinaryValue> value) override;
  bool SetDictionary(size_t index,
                     HoneycombRefPtr<HoneycombDictionaryValue> value) override;
  bool SetList(size_t index, HoneycombRefPtr<HoneycombListValue> value) override;
};

#endif  // HONEYCOMB_LIBHONEY_DLL_CTOCPP_LIST_VALUE_CTOCPP_H_
