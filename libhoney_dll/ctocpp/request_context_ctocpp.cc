// Copyright (c) 2023 The Honeycomb Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the Honeycomb translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=17602248a48e405470bdf7b6a34866cdf67a5780$
//

#include "libhoney_dll/ctocpp/request_context_ctocpp.h"
#include "libhoney_dll/cpptoc/completion_callback_cpptoc.h"
#include "libhoney_dll/cpptoc/extension_handler_cpptoc.h"
#include "libhoney_dll/cpptoc/request_context_handler_cpptoc.h"
#include "libhoney_dll/cpptoc/resolve_callback_cpptoc.h"
#include "libhoney_dll/cpptoc/scheme_handler_factory_cpptoc.h"
#include "libhoney_dll/ctocpp/cookie_manager_ctocpp.h"
#include "libhoney_dll/ctocpp/dictionary_value_ctocpp.h"
#include "libhoney_dll/ctocpp/extension_ctocpp.h"
#include "libhoney_dll/ctocpp/media_router_ctocpp.h"
#include "libhoney_dll/ctocpp/value_ctocpp.h"
#include "libhoney_dll/transfer_util.h"

// STATIC METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombRequestContext> HoneycombRequestContext::GetGlobalContext() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_request_context_t* _retval = honey_request_context_get_global_context();

  // Return type: refptr_same
  return HoneycombRequestContextCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombRequestContext> HoneycombRequestContext::CreateContext(
    const HoneycombRequestContextSettings& settings,
    HoneycombRefPtr<HoneycombRequestContextHandler> handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: handler

  // Execute
  honey_request_context_t* _retval = honey_request_context_create_context(
      &settings, HoneycombRequestContextHandlerCppToC::Wrap(handler));

  // Return type: refptr_same
  return HoneycombRequestContextCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombRequestContext> HoneycombRequestContext::CreateContext(
    HoneycombRefPtr<HoneycombRequestContext> other,
    HoneycombRefPtr<HoneycombRequestContextHandler> handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: other; type: refptr_same
  DCHECK(other.get());
  if (!other.get()) {
    return nullptr;
  }
  // Unverified params: handler

  // Execute
  honey_request_context_t* _retval =
      honey_create_context_shared(HoneycombRequestContextCToCpp::Unwrap(other),
                                HoneycombRequestContextHandlerCppToC::Wrap(handler));

  // Return type: refptr_same
  return HoneycombRequestContextCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::IsSame(HoneycombRefPtr<HoneycombRequestContext> other) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: other; type: refptr_same
  DCHECK(other.get());
  if (!other.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->is_same(_struct, HoneycombRequestContextCToCpp::Unwrap(other));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::IsSharingWith(
    HoneycombRefPtr<HoneycombRequestContext> other) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_sharing_with)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: other; type: refptr_same
  DCHECK(other.get());
  if (!other.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->is_sharing_with(_struct, HoneycombRequestContextCToCpp::Unwrap(other));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall") bool HoneycombRequestContextCToCpp::IsGlobal() {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, is_global)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_global(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombRequestContextHandler> HoneycombRequestContextCToCpp::GetHandler() {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_handler)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_request_context_handler_t* _retval = _struct->get_handler(_struct);

  // Return type: refptr_diff
  return HoneycombRequestContextHandlerCppToC::Unwrap(_retval);
}

NO_SANITIZE("cfi-icall") HoneycombString HoneycombRequestContextCToCpp::GetCachePath() {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_cache_path)) {
    return HoneycombString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_string_userfree_t _retval = _struct->get_cache_path(_struct);

  // Return type: string
  HoneycombString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombCookieManager> HoneycombRequestContextCToCpp::GetCookieManager(
    HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_cookie_manager)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  honey_cookie_manager_t* _retval = _struct->get_cookie_manager(
      _struct, HoneycombCompletionCallbackCppToC::Wrap(callback));

  // Return type: refptr_same
  return HoneycombCookieManagerCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::RegisterSchemeHandlerFactory(
    const HoneycombString& scheme_name,
    const HoneycombString& domain_name,
    HoneycombRefPtr<HoneycombSchemeHandlerFactory> factory) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, register_scheme_handler_factory)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: scheme_name; type: string_byref_const
  DCHECK(!scheme_name.empty());
  if (scheme_name.empty()) {
    return false;
  }
  // Unverified params: domain_name, factory

  // Execute
  int _retval = _struct->register_scheme_handler_factory(
      _struct, scheme_name.GetStruct(), domain_name.GetStruct(),
      HoneycombSchemeHandlerFactoryCppToC::Wrap(factory));

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::ClearSchemeHandlerFactories() {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clear_scheme_handler_factories)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->clear_scheme_handler_factories(_struct);

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
void HoneycombRequestContextCToCpp::ClearCertificateExceptions(
    HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clear_certificate_exceptions)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  _struct->clear_certificate_exceptions(
      _struct, HoneycombCompletionCallbackCppToC::Wrap(callback));
}

NO_SANITIZE("cfi-icall")
void HoneycombRequestContextCToCpp::ClearHttpAuthCredentials(
    HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, clear_http_auth_credentials)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  _struct->clear_http_auth_credentials(
      _struct, HoneycombCompletionCallbackCppToC::Wrap(callback));
}

NO_SANITIZE("cfi-icall")
void HoneycombRequestContextCToCpp::CloseAllConnections(
    HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, close_all_connections)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  _struct->close_all_connections(_struct,
                                 HoneycombCompletionCallbackCppToC::Wrap(callback));
}

NO_SANITIZE("cfi-icall")
void HoneycombRequestContextCToCpp::ResolveHost(
    const HoneycombString& origin,
    HoneycombRefPtr<HoneycombResolveCallback> callback) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, resolve_host)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: origin; type: string_byref_const
  DCHECK(!origin.empty());
  if (origin.empty()) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  DCHECK(callback.get());
  if (!callback.get()) {
    return;
  }

  // Execute
  _struct->resolve_host(_struct, origin.GetStruct(),
                        HoneycombResolveCallbackCppToC::Wrap(callback));
}

NO_SANITIZE("cfi-icall")
void HoneycombRequestContextCToCpp::LoadExtension(
    const HoneycombString& root_directory,
    HoneycombRefPtr<HoneycombDictionaryValue> manifest,
    HoneycombRefPtr<HoneycombExtensionHandler> handler) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, load_extension)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: root_directory; type: string_byref_const
  DCHECK(!root_directory.empty());
  if (root_directory.empty()) {
    return;
  }
  // Unverified params: manifest, handler

  // Execute
  _struct->load_extension(_struct, root_directory.GetStruct(),
                          HoneycombDictionaryValueCToCpp::Unwrap(manifest),
                          HoneycombExtensionHandlerCppToC::Wrap(handler));
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::DidLoadExtension(const HoneycombString& extension_id) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, did_load_extension)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension_id; type: string_byref_const
  DCHECK(!extension_id.empty());
  if (extension_id.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->did_load_extension(_struct, extension_id.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::HasExtension(const HoneycombString& extension_id) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_extension)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension_id; type: string_byref_const
  DCHECK(!extension_id.empty());
  if (extension_id.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->has_extension(_struct, extension_id.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::GetExtensions(
    std::vector<HoneycombString>& extension_ids) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_extensions)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: extension_ids; type: string_vec_byref
  honey_string_list_t extension_idsList = honey_string_list_alloc();
  DCHECK(extension_idsList);
  if (extension_idsList) {
    transfer_string_list_contents(extension_ids, extension_idsList);
  }

  // Execute
  int _retval = _struct->get_extensions(_struct, extension_idsList);

  // Restore param:extension_ids; type: string_vec_byref
  if (extension_idsList) {
    extension_ids.clear();
    transfer_string_list_contents(extension_idsList, extension_ids);
    honey_string_list_free(extension_idsList);
  }

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombExtension> HoneycombRequestContextCToCpp::GetExtension(
    const HoneycombString& extension_id) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_extension)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: extension_id; type: string_byref_const
  DCHECK(!extension_id.empty());
  if (extension_id.empty()) {
    return nullptr;
  }

  // Execute
  honey_extension_t* _retval =
      _struct->get_extension(_struct, extension_id.GetStruct());

  // Return type: refptr_same
  return HoneycombExtensionCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombMediaRouter> HoneycombRequestContextCToCpp::GetMediaRouter(
    HoneycombRefPtr<HoneycombCompletionCallback> callback) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_media_router)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: callback

  // Execute
  honey_media_router_t* _retval = _struct->get_media_router(
      _struct, HoneycombCompletionCallbackCppToC::Wrap(callback));

  // Return type: refptr_same
  return HoneycombMediaRouterCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombValue> HoneycombRequestContextCToCpp::GetWebsiteSetting(
    const HoneycombString& requesting_url,
    const HoneycombString& top_level_url,
    honey_content_setting_types_t content_type) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_website_setting)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: requesting_url, top_level_url

  // Execute
  honey_value_t* _retval =
      _struct->get_website_setting(_struct, requesting_url.GetStruct(),
                                   top_level_url.GetStruct(), content_type);

  // Return type: refptr_same
  return HoneycombValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
void HoneycombRequestContextCToCpp::SetWebsiteSetting(
    const HoneycombString& requesting_url,
    const HoneycombString& top_level_url,
    honey_content_setting_types_t content_type,
    HoneycombRefPtr<HoneycombValue> value) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_website_setting)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: requesting_url, top_level_url, value

  // Execute
  _struct->set_website_setting(_struct, requesting_url.GetStruct(),
                               top_level_url.GetStruct(), content_type,
                               HoneycombValueCToCpp::Unwrap(value));
}

NO_SANITIZE("cfi-icall")
honey_content_setting_values_t HoneycombRequestContextCToCpp::GetContentSetting(
    const HoneycombString& requesting_url,
    const HoneycombString& top_level_url,
    honey_content_setting_types_t content_type) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_content_setting)) {
    return HONEYCOMB_CONTENT_SETTING_VALUE_DEFAULT;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: requesting_url, top_level_url

  // Execute
  honey_content_setting_values_t _retval =
      _struct->get_content_setting(_struct, requesting_url.GetStruct(),
                                   top_level_url.GetStruct(), content_type);

  // Return type: simple
  return _retval;
}

NO_SANITIZE("cfi-icall")
void HoneycombRequestContextCToCpp::SetContentSetting(
    const HoneycombString& requesting_url,
    const HoneycombString& top_level_url,
    honey_content_setting_types_t content_type,
    honey_content_setting_values_t value) {
  honey_request_context_t* _struct = GetStruct();
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_content_setting)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: requesting_url, top_level_url

  // Execute
  _struct->set_content_setting(_struct, requesting_url.GetStruct(),
                               top_level_url.GetStruct(), content_type, value);
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::HasPreference(const HoneycombString& name) {
  honey_preference_manager_t* _struct =
      reinterpret_cast<honey_preference_manager_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, has_preference)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->has_preference(_struct, name.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombValue> HoneycombRequestContextCToCpp::GetPreference(
    const HoneycombString& name) {
  honey_preference_manager_t* _struct =
      reinterpret_cast<honey_preference_manager_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_preference)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return nullptr;
  }

  // Execute
  honey_value_t* _retval = _struct->get_preference(_struct, name.GetStruct());

  // Return type: refptr_same
  return HoneycombValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
HoneycombRefPtr<HoneycombDictionaryValue> HoneycombRequestContextCToCpp::GetAllPreferences(
    bool include_defaults) {
  honey_preference_manager_t* _struct =
      reinterpret_cast<honey_preference_manager_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, get_all_preferences)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  honey_dictionary_value_t* _retval =
      _struct->get_all_preferences(_struct, include_defaults);

  // Return type: refptr_same
  return HoneycombDictionaryValueCToCpp::Wrap(_retval);
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::CanSetPreference(const HoneycombString& name) {
  honey_preference_manager_t* _struct =
      reinterpret_cast<honey_preference_manager_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, can_set_preference)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->can_set_preference(_struct, name.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

NO_SANITIZE("cfi-icall")
bool HoneycombRequestContextCToCpp::SetPreference(const HoneycombString& name,
                                            HoneycombRefPtr<HoneycombValue> value,
                                            HoneycombString& error) {
  honey_preference_manager_t* _struct =
      reinterpret_cast<honey_preference_manager_t*>(GetStruct());
  if (HONEYCOMB_MEMBER_MISSING(_struct, set_preference)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  DCHECK(!name.empty());
  if (name.empty()) {
    return false;
  }
  // Unverified params: value

  // Execute
  int _retval = _struct->set_preference(_struct, name.GetStruct(),
                                        HoneycombValueCToCpp::Unwrap(value),
                                        error.GetWritableStruct());

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

HoneycombRequestContextCToCpp::HoneycombRequestContextCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

HoneycombRequestContextCToCpp::~HoneycombRequestContextCToCpp() {}

template <>
honey_request_context_t* HoneycombCToCppRefCounted<
    HoneycombRequestContextCToCpp,
    HoneycombRequestContext,
    honey_request_context_t>::UnwrapDerived(HoneycombWrapperType type,
                                          HoneycombRequestContext* c) {
  DCHECK(false) << "Unexpected class type: " << type;
  return nullptr;
}

template <>
HoneycombWrapperType HoneycombCToCppRefCounted<HoneycombRequestContextCToCpp,
                                   HoneycombRequestContext,
                                   honey_request_context_t>::kWrapperType =
    WT_REQUEST_CONTEXT;
